// Copyright (c) 2020. | David Annebicque | IUT de Troyes  - All Rights Reserved
// @file /Users/davidannebicque/htdocs/intranetV3/public/build/vendors~agenda~app.js
// @author davidannebicque
// @project intranetV3
// @lastUpdate 04/12/2020 13:44

(window['webpackJsonp'] = window['webpackJsonp'] || []).push([['vendors~agenda~app'], {

  /***/ './node_modules/@fortawesome/fontawesome-free/scss/fontawesome.scss':
  /*!**************************************************************************!*\
  !*** ./node_modules/@fortawesome/fontawesome-free/scss/fontawesome.scss ***!
  \**************************************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

    /***/
  }),

  /***/ './node_modules/@fortawesome/fontawesome-free/scss/solid.scss':
  /*!********************************************************************!*\
  !*** ./node_modules/@fortawesome/fontawesome-free/scss/solid.scss ***!
  \********************************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/index.js':
  /*!***************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/index.js ***!
  \***************************************************/
  /*! exports provided: Application, Context, Controller, defaultSchema */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony import */
    var _src_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/application */ './node_modules/@stimulus/core/dist/src/application.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'Application', function () {
      return _src_application__WEBPACK_IMPORTED_MODULE_0__['Application']
    })

    /* harmony import */
    var _src_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/context */ './node_modules/@stimulus/core/dist/src/context.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'Context', function () {
      return _src_context__WEBPACK_IMPORTED_MODULE_1__['Context']
    })

    /* harmony import */
    var _src_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/controller */ './node_modules/@stimulus/core/dist/src/controller.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'Controller', function () {
      return _src_controller__WEBPACK_IMPORTED_MODULE_2__['Controller']
    })

    /* harmony import */
    var _src_schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/schema */ './node_modules/@stimulus/core/dist/src/schema.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'defaultSchema', function () {
      return _src_schema__WEBPACK_IMPORTED_MODULE_3__['defaultSchema']
    })


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUF5QixNQUFNLGtCQUFrQixDQUFBO0FBRXBFLE9BQU8sRUFBVSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUEifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/action.js':
  /*!********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/action.js ***!
  \********************************************************/
  /*! exports provided: Action, getDefaultEventNameForElement */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Action', function () {
      return Action
    })
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'getDefaultEventNameForElement', function () {
      return getDefaultEventNameForElement
    })
    /* harmony import */
    var _action_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action_descriptor */ './node_modules/@stimulus/core/dist/src/action_descriptor.js')

    var Action = /** @class */ (function () {
      function Action (element, index, descriptor) {
        this.element = element
        this.index = index
        this.eventTarget = descriptor.eventTarget || element
        this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error('missing event name')
        this.identifier = descriptor.identifier || error('missing identifier')
        this.methodName = descriptor.methodName || error('missing method name')
      }

      Action.forToken = function (token) {
        return new this(token.element, token.index, Object(_action_descriptor__WEBPACK_IMPORTED_MODULE_0__['parseDescriptorString'])(token.content))
      }
      Action.prototype.toString = function () {
        var eventNameSuffix = this.eventTargetName ? '@' + this.eventTargetName : ''
        return '' + this.eventName + eventNameSuffix + '->' + this.identifier + '#' + this.methodName
      }
      Object.defineProperty(Action.prototype, 'eventTargetName', {
        get: function () {
          return Object(_action_descriptor__WEBPACK_IMPORTED_MODULE_0__['stringifyEventTarget'])(this.eventTarget)
        },
        enumerable: true,
        configurable: true
      })
      return Action
    }())

    var defaultEventNames = {
      'a': function (e) {
        return 'click'
      },
      'button': function (e) {
        return 'click'
      },
      'form': function (e) {
        return 'submit'
      },
      'input': function (e) {
        return e.getAttribute('type') == 'submit' ? 'click' : 'change'
      },
      'select': function (e) {
        return 'change'
      },
      'textarea': function (e) {
        return 'change'
      }
    }

    function getDefaultEventNameForElement (element) {
      var tagName = element.tagName.toLowerCase()
      if (tagName in defaultEventNames) {
        return defaultEventNames[tagName](element)
      }
    }

    function error (message) {
      throw new Error(message)
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9CLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFHbkc7SUFZRSxnQkFBWSxPQUFnQixFQUFFLEtBQWEsRUFBRSxVQUFxQztRQUNoRixJQUFJLENBQUMsT0FBTyxHQUFPLE9BQU8sQ0FBQTtRQUMxQixJQUFJLENBQUMsS0FBSyxHQUFTLEtBQUssQ0FBQTtRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFBO1FBQ3BELElBQUksQ0FBQyxTQUFTLEdBQUssVUFBVSxDQUFDLFNBQVMsSUFBSSw2QkFBNkIsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUNoSCxJQUFJLENBQUMsVUFBVSxHQUFJLFVBQVUsQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUE7UUFDdkUsSUFBSSxDQUFDLFVBQVUsR0FBSSxVQUFVLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0lBQzFFLENBQUM7SUFYTSxlQUFRLEdBQWYsVUFBZ0IsS0FBWTtRQUMxQixPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUNuRixDQUFDO0lBV0QseUJBQVEsR0FBUjtRQUNFLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE1BQUksSUFBSSxDQUFDLGVBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUM5RSxPQUFPLEtBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLFVBQUssSUFBSSxDQUFDLFVBQVUsU0FBSSxJQUFJLENBQUMsVUFBWSxDQUFBO0lBQ3JGLENBQUM7SUFFRCxzQkFBWSxtQ0FBZTthQUEzQjtZQUNFLE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQy9DLENBQUM7OztPQUFBO0lBQ0gsYUFBQztBQUFELENBQUMsQUE3QkQsSUE2QkM7O0FBRUQsSUFBTSxpQkFBaUIsR0FBd0Q7SUFDN0UsR0FBRyxFQUFTLFVBQUEsQ0FBQyxJQUFJLE9BQUEsT0FBTyxFQUFQLENBQU87SUFDeEIsUUFBUSxFQUFJLFVBQUEsQ0FBQyxJQUFJLE9BQUEsT0FBTyxFQUFQLENBQU87SUFDeEIsTUFBTSxFQUFNLFVBQUEsQ0FBQyxJQUFJLE9BQUEsUUFBUSxFQUFSLENBQVE7SUFDekIsT0FBTyxFQUFLLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUF2RCxDQUF1RDtJQUN4RSxRQUFRLEVBQUksVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLEVBQVIsQ0FBUTtJQUN6QixVQUFVLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLEVBQVIsQ0FBUTtDQUMxQixDQUFBO0FBRUQsTUFBTSx3Q0FBd0MsT0FBZ0I7SUFDNUQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUM3QyxJQUFJLE9BQU8sSUFBSSxpQkFBaUIsRUFBRTtRQUNoQyxPQUFPLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQzNDO0FBQ0gsQ0FBQztBQUVELGVBQWUsT0FBZTtJQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQzFCLENBQUMifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/action_descriptor.js':
  /*!*******************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/action_descriptor.js ***!
  \*******************************************************************/
  /*! exports provided: parseDescriptorString, stringifyEventTarget */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'parseDescriptorString', function () {
      return parseDescriptorString
    })
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'stringifyEventTarget', function () {
      return stringifyEventTarget
    })
// capture nos.:            12   23 4               43   1 5   56 7  76
    var descriptorPattern = /^((.+?)(@(window|document))?->)?(.+?)(#(.+))?$/

    function parseDescriptorString (descriptorString) {
      var source = descriptorString.trim()
      var matches = source.match(descriptorPattern) || []
      return {
        eventTarget: parseEventTarget(matches[4]),
        eventName: matches[2],
        identifier: matches[5],
        methodName: matches[7]
      }
    }

    function parseEventTarget (eventTargetName) {
      if (eventTargetName == 'window') {
        return window
      } else if (eventTargetName == 'document') {
        return document
      }
    }

    function stringifyEventTarget (eventTarget) {
      if (eventTarget == window) {
        return 'window'
      } else if (eventTarget == document) {
        return 'document'
      }
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uX2Rlc2NyaXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWN0aW9uX2Rlc2NyaXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsdUVBQXVFO0FBQ3ZFLElBQU0saUJBQWlCLEdBQUcsZ0RBQWdELENBQUE7QUFFMUUsTUFBTSxnQ0FBZ0MsZ0JBQXdCO0lBQzVELElBQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFBO0lBQ3RDLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDckQsT0FBTztRQUNMLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsU0FBUyxFQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdkIsVUFBVSxFQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdkIsVUFBVSxFQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDeEIsQ0FBQTtBQUNILENBQUM7QUFFRCwwQkFBMEIsZUFBdUI7SUFDL0MsSUFBSSxlQUFlLElBQUksUUFBUSxFQUFFO1FBQy9CLE9BQU8sTUFBTSxDQUFBO0tBQ2Q7U0FBTSxJQUFJLGVBQWUsSUFBSSxVQUFVLEVBQUU7UUFDeEMsT0FBTyxRQUFRLENBQUE7S0FDaEI7QUFDSCxDQUFDO0FBRUQsTUFBTSwrQkFBK0IsV0FBd0I7SUFDM0QsSUFBSSxXQUFXLElBQUksTUFBTSxFQUFFO1FBQ3pCLE9BQU8sUUFBUSxDQUFBO0tBQ2hCO1NBQU0sSUFBSSxXQUFXLElBQUksUUFBUSxFQUFFO1FBQ2xDLE9BQU8sVUFBVSxDQUFBO0tBQ2xCO0FBQ0gsQ0FBQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/application.js':
  /*!*************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/application.js ***!
  \*************************************************************/
  /*! exports provided: Application */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Application', function () {
      return Application
    })
    /* harmony import */
    var _dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dispatcher */ './node_modules/@stimulus/core/dist/src/dispatcher.js')
    /* harmony import */
    var _router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./router */ './node_modules/@stimulus/core/dist/src/router.js')
    /* harmony import */
    var _schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema */ './node_modules/@stimulus/core/dist/src/schema.js')
    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled (value) {
          try {
            step(generator.next(value))
          } catch (e) {
            reject(e)
          }
        }

        function rejected (value) {
          try {
            step(generator['throw'](value))
          } catch (e) {
            reject(e)
          }
        }

        function step (result) {
          result.done ? resolve(result.value) : new P(function (resolve) {
            resolve(result.value)
          }).then(fulfilled, rejected)
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next())
      })
    }
    var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
      var _ = {
        label: 0, sent: function () {
          if (t[0] & 1) throw t[1]
          return t[1]
        }, trys: [], ops: []
      }, f, y, t, g
      return g = {
        next: verb(0),
        'throw': verb(1),
        'return': verb(2)
      }, typeof Symbol === 'function' && (g[Symbol.iterator] = function () {
        return this
      }), g

      function verb (n) {
        return function (v) {
          return step([n, v])
        }
      }

      function step (op) {
        if (f) throw new TypeError('Generator is already executing.')
        while (_) try {
          if (f = 1, y && (t = y[op[0] & 2 ? 'return' : op[0] ? 'throw' : 'next']) && !(t = t.call(y, op[1])).done) return t
          if (y = 0, t) op = [0, t.value]
          switch (op[0]) {
            case 0:
            case 1:
              t = op
              break
            case 4:
              _.label++
              return {value: op[1], done: false}
            case 5:
              _.label++
              y = op[1]
              op = [0]
              continue
            case 7:
              op = _.ops.pop()
              _.trys.pop()
              continue
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0
                continue
              }
              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                _.label = op[1]
                break
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1]
                t = op
                break
              }
              if (t && _.label < t[2]) {
                _.label = t[2]
                _.ops.push(op)
                break
              }
              if (t[2]) _.ops.pop()
              _.trys.pop()
              continue
          }
          op = body.call(thisArg, _)
        } catch (e) {
          op = [6, e]
          y = 0
        } finally {
          f = t = 0
        }
        if (op[0] & 5) throw op[1]
        return {value: op[0] ? op[1] : void 0, done: true}
      }
    }


    var Application = /** @class */ (function () {
      function Application (element, schema) {
        if (element === void 0) {
          element = document.documentElement
        }
        if (schema === void 0) {
          schema = _schema__WEBPACK_IMPORTED_MODULE_2__['defaultSchema']
        }
        this.element = element
        this.schema = schema
        this.dispatcher = new _dispatcher__WEBPACK_IMPORTED_MODULE_0__['Dispatcher'](this)
        this.router = new _router__WEBPACK_IMPORTED_MODULE_1__['Router'](this)
      }

      Application.start = function (element, schema) {
        var application = new Application(element, schema)
        application.start()
        return application
      }
      Application.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                return [4 /*yield*/, domReady()]
              case 1:
                _a.sent()
                this.router.start()
                this.dispatcher.start()
                return [2 /*return*/]
            }
          })
        })
      }
      Application.prototype.stop = function () {
        this.router.stop()
        this.dispatcher.stop()
      }
      Application.prototype.register = function (identifier, controllerConstructor) {
        this.load({identifier: identifier, controllerConstructor: controllerConstructor})
      }
      Application.prototype.load = function (head) {
        var _this = this
        var rest = []
        for (var _i = 1; _i < arguments.length; _i++) {
          rest[_i - 1] = arguments[_i]
        }
        var definitions = Array.isArray(head) ? head : [head].concat(rest)
        definitions.forEach(function (definition) {
          return _this.router.loadDefinition(definition)
        })
      }
      Application.prototype.unload = function (head) {
        var _this = this
        var rest = []
        for (var _i = 1; _i < arguments.length; _i++) {
          rest[_i - 1] = arguments[_i]
        }
        var identifiers = Array.isArray(head) ? head : [head].concat(rest)
        identifiers.forEach(function (identifier) {
          return _this.router.unloadIdentifier(identifier)
        })
      }
      Object.defineProperty(Application.prototype, 'controllers', {
        // Controllers
        get: function () {
          return this.router.contexts.map(function (context) {
            return context.controller
          })
        },
        enumerable: true,
        configurable: true
      })
      Application.prototype.getControllerForElementAndIdentifier = function (element, identifier) {
        var context = this.router.getContextForElementAndIdentifier(element, identifier)
        return context ? context.controller : null
      }
      // Error handling
      Application.prototype.handleError = function (error, message, detail) {
        console.error('%s\n\n%o\n\n%o', message, error, detail)
      }
      return Application
    }())

    function domReady () {
      return new Promise(function (resolve) {
        if (document.readyState == 'loading') {
          document.addEventListener('DOMContentLoaded', resolve)
        } else {
          resolve()
        }
      })
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBwbGljYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRXpDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDakMsT0FBTyxFQUFVLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVoRDtJQVlFLHFCQUFZLE9BQTJDLEVBQUUsTUFBOEI7UUFBM0Usd0JBQUEsRUFBQSxVQUFtQixRQUFRLENBQUMsZUFBZTtRQUFFLHVCQUFBLEVBQUEsc0JBQThCO1FBQ3JGLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBWE0saUJBQUssR0FBWixVQUFhLE9BQWlCLEVBQUUsTUFBZTtRQUM3QyxJQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDcEQsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ25CLE9BQU8sV0FBVyxDQUFBO0lBQ3BCLENBQUM7SUFTSywyQkFBSyxHQUFYOzs7OzRCQUNFLHFCQUFNLFFBQVEsRUFBRSxFQUFBOzt3QkFBaEIsU0FBZ0IsQ0FBQTt3QkFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTt3QkFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQTs7Ozs7S0FDeEI7SUFFRCwwQkFBSSxHQUFKO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFFRCw4QkFBUSxHQUFSLFVBQVMsVUFBa0IsRUFBRSxxQkFBNEM7UUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsWUFBQSxFQUFFLHFCQUFxQix1QkFBQSxFQUFFLENBQUMsQ0FBQTtJQUNsRCxDQUFDO0lBSUQsMEJBQUksR0FBSixVQUFLLElBQStCO1FBQXBDLGlCQUdDO1FBSHFDLGNBQXFCO2FBQXJCLFVBQXFCLEVBQXJCLHFCQUFxQixFQUFyQixJQUFxQjtZQUFyQiw2QkFBcUI7O1FBQ3pELElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxTQUFLLElBQUksQ0FBQyxDQUFBO1FBQ2hFLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQSxVQUFVLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxDQUFBO0lBQzNFLENBQUM7SUFJRCw0QkFBTSxHQUFOLFVBQU8sSUFBdUI7UUFBOUIsaUJBR0M7UUFIK0IsY0FBaUI7YUFBakIsVUFBaUIsRUFBakIscUJBQWlCLEVBQWpCLElBQWlCO1lBQWpCLDZCQUFpQjs7UUFDL0MsSUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLFNBQUssSUFBSSxDQUFDLENBQUE7UUFDaEUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFVBQVUsSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQXhDLENBQXdDLENBQUMsQ0FBQTtJQUM3RSxDQUFDO0lBSUQsc0JBQUksb0NBQVc7UUFGZixjQUFjO2FBRWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sQ0FBQyxVQUFVLEVBQWxCLENBQWtCLENBQUMsQ0FBQTtRQUNoRSxDQUFDOzs7T0FBQTtJQUVELDBEQUFvQyxHQUFwQyxVQUFxQyxPQUFnQixFQUFFLFVBQWtCO1FBQ3ZFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsaUNBQWlDLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ2xGLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDNUMsQ0FBQztJQUVELGlCQUFpQjtJQUVqQixpQ0FBVyxHQUFYLFVBQVksS0FBWSxFQUFFLE9BQWUsRUFBRSxNQUFjO1FBQ3ZELE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBaEVELElBZ0VDOztBQUVEO0lBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFBLE9BQU87UUFDeEIsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLFNBQVMsRUFBRTtZQUNwQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUE7U0FDdkQ7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFBO1NBQ1Y7SUFDSCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/binding.js':
  /*!*********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/binding.js ***!
  \*********************************************************/
  /*! exports provided: Binding */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Binding', function () {
      return Binding
    })
    var Binding = /** @class */ (function () {
      function Binding (context, action) {
        this.context = context
        this.action = action
      }

      Object.defineProperty(Binding.prototype, 'index', {
        get: function () {
          return this.action.index
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Binding.prototype, 'eventTarget', {
        get: function () {
          return this.action.eventTarget
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Binding.prototype, 'identifier', {
        get: function () {
          return this.context.identifier
        },
        enumerable: true,
        configurable: true
      })
      Binding.prototype.handleEvent = function (event) {
        if (this.willBeInvokedByEvent(event)) {
          this.invokeWithEvent(event)
        }
      }
      Object.defineProperty(Binding.prototype, 'eventName', {
        get: function () {
          return this.action.eventName
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Binding.prototype, 'method', {
        get: function () {
          var method = this.controller[this.methodName]
          if (typeof method == 'function') {
            return method
          }
          throw new Error('Action "' + this.action + '" references undefined method "' + this.methodName + '"')
        },
        enumerable: true,
        configurable: true
      })
      Binding.prototype.invokeWithEvent = function (event) {
        try {
          this.method.call(this.controller, event)
        } catch (error) {
          var _a = this, identifier = _a.identifier, controller = _a.controller, element = _a.element, index = _a.index
          var detail = {identifier: identifier, controller: controller, element: element, index: index, event: event}
          this.context.handleError(error, 'invoking action "' + this.action + '"', detail)
        }
      }
      Binding.prototype.willBeInvokedByEvent = function (event) {
        var eventTarget = event.target
        if (this.element === eventTarget) {
          return true
        } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
          return this.scope.containsElement(eventTarget)
        } else {
          return true
        }
      }
      Object.defineProperty(Binding.prototype, 'controller', {
        get: function () {
          return this.context.controller
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Binding.prototype, 'methodName', {
        get: function () {
          return this.action.methodName
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Binding.prototype, 'element', {
        get: function () {
          return this.scope.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Binding.prototype, 'scope', {
        get: function () {
          return this.context.scope
        },
        enumerable: true,
        configurable: true
      })
      return Binding
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW5kaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBO0lBSUUsaUJBQVksT0FBZ0IsRUFBRSxNQUFjO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQ3RCLENBQUM7SUFFRCxzQkFBSSwwQkFBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUMxQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGdDQUFXO2FBQWY7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFBO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0JBQVU7YUFBZDtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUE7UUFDaEMsQ0FBQzs7O09BQUE7SUFFRCw2QkFBVyxHQUFYLFVBQVksS0FBWTtRQUN0QixJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQzVCO0lBQ0gsQ0FBQztJQUVELHNCQUFJLDhCQUFTO2FBQWI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFBO1FBQzlCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMkJBQU07YUFBVjtZQUNFLElBQU0sTUFBTSxHQUFJLElBQUksQ0FBQyxVQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUN4RCxJQUFJLE9BQU8sTUFBTSxJQUFJLFVBQVUsRUFBRTtnQkFDL0IsT0FBTyxNQUFNLENBQUE7YUFDZDtZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBVyxJQUFJLENBQUMsTUFBTSx5Q0FBa0MsSUFBSSxDQUFDLFVBQVUsT0FBRyxDQUFDLENBQUE7UUFDN0YsQ0FBQzs7O09BQUE7SUFFTyxpQ0FBZSxHQUF2QixVQUF3QixLQUFZO1FBQ2xDLElBQUk7WUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFBO1NBQ3pDO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDUixJQUFBLFNBQWlELEVBQS9DLDBCQUFVLEVBQUUsMEJBQVUsRUFBRSxvQkFBTyxFQUFFLGdCQUFLLENBQVM7WUFDdkQsSUFBTSxNQUFNLEdBQUcsRUFBRSxVQUFVLFlBQUEsRUFBRSxVQUFVLFlBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFBO1lBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSx1QkFBb0IsSUFBSSxDQUFDLE1BQU0sT0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1NBQzVFO0lBQ0gsQ0FBQztJQUVPLHNDQUFvQixHQUE1QixVQUE2QixLQUFZO1FBQ3ZDLElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7UUFDaEMsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtZQUNoQyxPQUFPLElBQUksQ0FBQTtTQUNaO2FBQU0sSUFBSSxXQUFXLFlBQVksT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQy9FLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUE7U0FDL0M7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFBO1NBQ1o7SUFDSCxDQUFDO0lBRUQsc0JBQVksK0JBQVU7YUFBdEI7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFBO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQVksK0JBQVU7YUFBdEI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFBO1FBQy9CLENBQUM7OztPQUFBO0lBRUQsc0JBQVksNEJBQU87YUFBbkI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFBO1FBQzNCLENBQUM7OztPQUFBO0lBRUQsc0JBQVksMEJBQUs7YUFBakI7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFBO1FBQzNCLENBQUM7OztPQUFBO0lBQ0gsY0FBQztBQUFELENBQUMsQUEzRUQsSUEyRUMifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/binding_observer.js':
  /*!******************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/binding_observer.js ***!
  \******************************************************************/
  /*! exports provided: BindingObserver */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'BindingObserver', function () {
      return BindingObserver
    })
    /* harmony import */
    var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ './node_modules/@stimulus/core/dist/src/action.js')
    /* harmony import */
    var _binding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binding */ './node_modules/@stimulus/core/dist/src/binding.js')
    /* harmony import */
    var _stimulus_mutation_observers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stimulus/mutation-observers */ './node_modules/@stimulus/mutation-observers/dist/index.js')


    var BindingObserver = /** @class */ (function () {
      function BindingObserver (context, delegate) {
        this.context = context
        this.delegate = delegate
        this.bindingsByAction = new Map
      }

      BindingObserver.prototype.start = function () {
        if (!this.valueListObserver) {
          this.valueListObserver = new _stimulus_mutation_observers__WEBPACK_IMPORTED_MODULE_2__['ValueListObserver'](this.element, this.actionAttribute, this)
          this.valueListObserver.start()
        }
      }
      BindingObserver.prototype.stop = function () {
        if (this.valueListObserver) {
          this.valueListObserver.stop()
          delete this.valueListObserver
          this.disconnectAllActions()
        }
      }
      Object.defineProperty(BindingObserver.prototype, 'element', {
        get: function () {
          return this.context.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(BindingObserver.prototype, 'identifier', {
        get: function () {
          return this.context.identifier
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(BindingObserver.prototype, 'actionAttribute', {
        get: function () {
          return this.schema.actionAttribute
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(BindingObserver.prototype, 'schema', {
        get: function () {
          return this.context.schema
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(BindingObserver.prototype, 'bindings', {
        get: function () {
          return Array.from(this.bindingsByAction.values())
        },
        enumerable: true,
        configurable: true
      })
      BindingObserver.prototype.connectAction = function (action) {
        var binding = new _binding__WEBPACK_IMPORTED_MODULE_1__['Binding'](this.context, action)
        this.bindingsByAction.set(action, binding)
        this.delegate.bindingConnected(binding)
      }
      BindingObserver.prototype.disconnectAction = function (action) {
        var binding = this.bindingsByAction.get(action)
        if (binding) {
          this.bindingsByAction.delete(action)
          this.delegate.bindingDisconnected(binding)
        }
      }
      BindingObserver.prototype.disconnectAllActions = function () {
        var _this = this
        this.bindings.forEach(function (binding) {
          return _this.delegate.bindingDisconnected(binding)
        })
        this.bindingsByAction.clear()
      }
      // Value observer delegate
      BindingObserver.prototype.parseValueForToken = function (token) {
        var action = _action__WEBPACK_IMPORTED_MODULE_0__['Action'].forToken(token)
        if (action.identifier == this.identifier) {
          return action
        }
      }
      BindingObserver.prototype.elementMatchedValue = function (element, action) {
        this.connectAction(action)
      }
      BindingObserver.prototype.elementUnmatchedValue = function (element, action) {
        this.disconnectAction(action)
      }
      return BindingObserver
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19vYnNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW5kaW5nX29ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDakMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUluQyxPQUFPLEVBQVMsaUJBQWlCLEVBQTZCLE1BQU0sOEJBQThCLENBQUE7QUFPbEc7SUFNRSx5QkFBWSxPQUFnQixFQUFFLFFBQWlDO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsK0JBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ3hGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtTQUMvQjtJQUNILENBQUM7SUFFRCw4QkFBSSxHQUFKO1FBQ0UsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFBO1lBQzdCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFBO1lBQzdCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFBO1NBQzVCO0lBQ0gsQ0FBQztJQUVELHNCQUFJLG9DQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFBO1FBQzdCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksdUNBQVU7YUFBZDtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUE7UUFDaEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw0Q0FBZTthQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUE7UUFDcEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxtQ0FBTTthQUFWO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQTtRQUM1QixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHFDQUFRO2FBQVo7WUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDbkQsQ0FBQzs7O09BQUE7SUFFTyx1Q0FBYSxHQUFyQixVQUFzQixNQUFjO1FBQ2xDLElBQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDakQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRU8sMENBQWdCLEdBQXhCLFVBQXlCLE1BQWM7UUFDckMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNqRCxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUMzQztJQUNILENBQUM7SUFFTyw4Q0FBb0IsR0FBNUI7UUFBQSxpQkFHQztRQUZDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsRUFBMUMsQ0FBMEMsQ0FBQyxDQUFBO1FBQzVFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0lBRUQsMEJBQTBCO0lBRTFCLDRDQUFrQixHQUFsQixVQUFtQixLQUFZO1FBQzdCLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDckMsSUFBSSxNQUFNLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDeEMsT0FBTyxNQUFNLENBQUE7U0FDZDtJQUNILENBQUM7SUFFRCw2Q0FBbUIsR0FBbkIsVUFBb0IsT0FBZ0IsRUFBRSxNQUFjO1FBQ2xELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDNUIsQ0FBQztJQUVELCtDQUFxQixHQUFyQixVQUFzQixPQUFnQixFQUFFLE1BQWM7UUFDcEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFsRkQsSUFrRkMifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/context.js':
  /*!*********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/context.js ***!
  \*********************************************************/
  /*! exports provided: Context */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Context', function () {
      return Context
    })
    /* harmony import */
    var _binding_observer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binding_observer */ './node_modules/@stimulus/core/dist/src/binding_observer.js')

    var Context = /** @class */ (function () {
      function Context (module, scope) {
        this.module = module
        this.scope = scope
        this.controller = new module.controllerConstructor(this)
        this.bindingObserver = new _binding_observer__WEBPACK_IMPORTED_MODULE_0__['BindingObserver'](this, this.dispatcher)
        try {
          this.controller.initialize()
        } catch (error) {
          this.handleError(error, 'initializing controller')
        }
      }

      Context.prototype.connect = function () {
        this.bindingObserver.start()
        try {
          this.controller.connect()
        } catch (error) {
          this.handleError(error, 'connecting controller')
        }
      }
      Context.prototype.disconnect = function () {
        try {
          this.controller.disconnect()
        } catch (error) {
          this.handleError(error, 'disconnecting controller')
        }
        this.bindingObserver.stop()
      }
      Object.defineProperty(Context.prototype, 'application', {
        get: function () {
          return this.module.application
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Context.prototype, 'identifier', {
        get: function () {
          return this.module.identifier
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Context.prototype, 'schema', {
        get: function () {
          return this.application.schema
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Context.prototype, 'dispatcher', {
        get: function () {
          return this.application.dispatcher
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Context.prototype, 'element', {
        get: function () {
          return this.scope.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Context.prototype, 'parentElement', {
        get: function () {
          return this.element.parentElement
        },
        enumerable: true,
        configurable: true
      })
      // Error handling
      Context.prototype.handleError = function (error, message, detail) {
        if (detail === void 0) {
          detail = {}
        }
        var _a = this, identifier = _a.identifier, controller = _a.controller, element = _a.element
        detail = Object.assign({identifier: identifier, controller: controller, element: element}, detail)
        this.application.handleError(error, 'Error ' + message, detail)
      }
      return Context
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQVFwRDtJQU1FLGlCQUFZLE1BQWMsRUFBRSxLQUFZO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDeEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRWpFLElBQUk7WUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFBO1NBQzdCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSx5QkFBeUIsQ0FBQyxDQUFBO1NBQ25EO0lBQ0gsQ0FBQztJQUVELHlCQUFPLEdBQVA7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBRTVCLElBQUk7WUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFBO1NBQzFCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxDQUFBO1NBQ2pEO0lBQ0gsQ0FBQztJQUVELDRCQUFVLEdBQVY7UUFDRSxJQUFJO1lBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtTQUM3QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsMEJBQTBCLENBQUMsQ0FBQTtTQUNwRDtRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDN0IsQ0FBQztJQUVELHNCQUFJLGdDQUFXO2FBQWY7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFBO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0JBQVU7YUFBZDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUE7UUFDL0IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwyQkFBTTthQUFWO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQTtRQUNoQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLCtCQUFVO2FBQWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFBO1FBQ3BDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNEJBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUE7UUFDM0IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxrQ0FBYTthQUFqQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUE7UUFDbkMsQ0FBQzs7O09BQUE7SUFFRCxpQkFBaUI7SUFFakIsNkJBQVcsR0FBWCxVQUFZLEtBQVksRUFBRSxPQUFlLEVBQUUsTUFBbUI7UUFBbkIsdUJBQUEsRUFBQSxXQUFtQjtRQUN0RCxJQUFBLFNBQTBDLEVBQXhDLDBCQUFVLEVBQUUsMEJBQVUsRUFBRSxvQkFBTyxDQUFTO1FBQ2hELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsVUFBVSxZQUFBLEVBQUUsVUFBVSxZQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNuRSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsV0FBUyxPQUFTLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDakUsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBdEVELElBc0VDIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/controller.js':
  /*!************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/controller.js ***!
  \************************************************************/
  /*! exports provided: Controller */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Controller', function () {
      return Controller
    })
    /* harmony import */
    var _target_properties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./target_properties */ './node_modules/@stimulus/core/dist/src/target_properties.js')

    var Controller = /** @class */ (function () {
      function Controller (context) {
        this.context = context
      }

      Controller.bless = function () {
        Object(_target_properties__WEBPACK_IMPORTED_MODULE_0__['defineTargetProperties'])(this)
      }
      Object.defineProperty(Controller.prototype, 'application', {
        get: function () {
          return this.context.application
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Controller.prototype, 'scope', {
        get: function () {
          return this.context.scope
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Controller.prototype, 'element', {
        get: function () {
          return this.scope.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Controller.prototype, 'identifier', {
        get: function () {
          return this.scope.identifier
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Controller.prototype, 'targets', {
        get: function () {
          return this.scope.targets
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Controller.prototype, 'data', {
        get: function () {
          return this.scope.data
        },
        enumerable: true,
        configurable: true
      })
      Controller.prototype.initialize = function () {
        // Override in your subclass to set up initial controller state
      }
      Controller.prototype.connect = function () {
        // Override in your subclass to respond when the controller is connected to the DOM
      }
      Controller.prototype.disconnect = function () {
        // Override in your subclass to respond when the controller is disconnected from the DOM
      }
      Controller.targets = []
      return Controller
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBTzVEO0lBU0Usb0JBQVksT0FBZ0I7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDeEIsQ0FBQztJQU5NLGdCQUFLLEdBQVo7UUFDRSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM5QixDQUFDO0lBTUQsc0JBQUksbUNBQVc7YUFBZjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUE7UUFDakMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw2QkFBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQTtRQUMzQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLCtCQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFBO1FBQzNCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksa0NBQVU7YUFBZDtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUE7UUFDOUIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwrQkFBTzthQUFYO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQTtRQUMzQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDRCQUFJO2FBQVI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFBO1FBQ3hCLENBQUM7OztPQUFBO0lBRUQsK0JBQVUsR0FBVjtRQUNFLCtEQUErRDtJQUNqRSxDQUFDO0lBRUQsNEJBQU8sR0FBUDtRQUNFLG1GQUFtRjtJQUNyRixDQUFDO0lBRUQsK0JBQVUsR0FBVjtRQUNFLHdGQUF3RjtJQUMxRixDQUFDO0lBOUNNLGtCQUFPLEdBQWEsRUFBRSxDQUFBO0lBK0MvQixpQkFBQztDQUFBLEFBaERELElBZ0RDO1NBaERZLFVBQVUifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/data_map.js':
  /*!**********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/data_map.js ***!
  \**********************************************************/
  /*! exports provided: DataMap */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'DataMap', function () {
      return DataMap
    })
    var DataMap = /** @class */ (function () {
      function DataMap (scope) {
        this.scope = scope
      }

      Object.defineProperty(DataMap.prototype, 'element', {
        get: function () {
          return this.scope.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(DataMap.prototype, 'identifier', {
        get: function () {
          return this.scope.identifier
        },
        enumerable: true,
        configurable: true
      })
      DataMap.prototype.get = function (key) {
        key = this.getFormattedKey(key)
        return this.element.getAttribute(key)
      }
      DataMap.prototype.set = function (key, value) {
        key = this.getFormattedKey(key)
        this.element.setAttribute(key, value)
        return this.get(key)
      }
      DataMap.prototype.has = function (key) {
        key = this.getFormattedKey(key)
        return this.element.hasAttribute(key)
      }
      DataMap.prototype.delete = function (key) {
        if (this.has(key)) {
          key = this.getFormattedKey(key)
          this.element.removeAttribute(key)
          return true
        } else {
          return false
        }
      }
      DataMap.prototype.getFormattedKey = function (key) {
        return 'data-' + this.identifier + '-' + dasherize(key)
      }
      return DataMap
    }())

    function dasherize (value) {
      return value.replace(/([A-Z])/g, function (_, char) {
        return '-' + char.toLowerCase()
      })
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9tYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGF0YV9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7SUFHRSxpQkFBWSxLQUFZO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxzQkFBSSw0QkFBTzthQUFYO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQTtRQUMzQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLCtCQUFVO2FBQWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFBO1FBQzlCLENBQUM7OztPQUFBO0lBRUQscUJBQUcsR0FBSCxVQUFJLEdBQVc7UUFDYixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMvQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFRCxxQkFBRyxHQUFILFVBQUksR0FBVyxFQUFFLEtBQWE7UUFDNUIsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN0QixDQUFDO0lBRUQscUJBQUcsR0FBSCxVQUFJLEdBQVc7UUFDYixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMvQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFRCx3QkFBTSxHQUFOLFVBQU8sR0FBVztRQUNoQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakIsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDakMsT0FBTyxJQUFJLENBQUE7U0FDWjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUE7U0FDYjtJQUNILENBQUM7SUFFTyxpQ0FBZSxHQUF2QixVQUF3QixHQUFXO1FBQ2pDLE9BQU8sVUFBUSxJQUFJLENBQUMsVUFBVSxTQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUcsQ0FBQTtJQUNwRCxDQUFDO0lBQ0gsY0FBQztBQUFELENBQUMsQUE1Q0QsSUE0Q0M7O0FBRUQsbUJBQW1CLEtBQWE7SUFDOUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxVQUFDLENBQUMsRUFBRSxJQUFJLElBQUssT0FBQSxNQUFJLElBQUksQ0FBQyxXQUFXLEVBQUksRUFBeEIsQ0FBd0IsQ0FBQyxDQUFBO0FBQ3pFLENBQUMifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/definition.js':
  /*!************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/definition.js ***!
  \************************************************************/
  /*! exports provided: blessDefinition */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'blessDefinition', function () {
      return blessDefinition
    })
    var __extends = (undefined && undefined.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
        ({__proto__: []} instanceof Array && function (d, b) {
          d.__proto__ = b
        }) ||
        function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]
        }
      return function (d, b) {
        extendStatics(d, b)

        function __ () {
          this.constructor = d
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __())
      }
    })()

    /** @hidden */
    function blessDefinition (definition) {
      return {
        identifier: definition.identifier,
        controllerConstructor: blessControllerConstructor(definition.controllerConstructor)
      }
    }

    function blessControllerConstructor (controllerConstructor) {
      var constructor = extend(controllerConstructor)
      constructor.bless()
      return constructor
    }

    var extend = (function () {
      function extendWithReflect (constructor) {
        function Controller () {
          var _newTarget = this && this instanceof Controller ? this.constructor : void 0
          return Reflect.construct(constructor, arguments, _newTarget)
        }

        Controller.prototype = Object.create(constructor.prototype, {
          constructor: {value: Controller}
        })
        Reflect.setPrototypeOf(Controller, constructor)
        return Controller
      }

      function testReflectExtension () {
        var a = function () {
          this.a.call(this)
        }
        var b = extendWithReflect(a)
        b.prototype.a = function () {
        }
        return new b
      }

      try {
        testReflectExtension()
        return extendWithReflect
      } catch (error) {
        return function (constructor) {
          return /** @class */ (function (_super) {
            __extends(Controller, _super)

            function Controller () {
              return _super !== null && _super.apply(this, arguments) || this
            }

            return Controller
          }(constructor))
        }
      }
    })()
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5pdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWZpbml0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFPQSxjQUFjO0FBQ2QsTUFBTSwwQkFBMEIsVUFBc0I7SUFDcEQsT0FBTztRQUNMLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVTtRQUNqQyxxQkFBcUIsRUFBRSwwQkFBMEIsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7S0FDcEYsQ0FBQTtBQUNILENBQUM7QUFFRCxvQ0FBb0MscUJBQTRDO0lBQzlFLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0lBQ2pELFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNuQixPQUFPLFdBQVcsQ0FBQTtBQUNwQixDQUFDO0FBRUQsSUFBTSxNQUFNLEdBQUcsQ0FBQztJQUdkLDJCQUFzRCxXQUFjO1FBQ2xFOztZQUNFLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsU0FBUyxhQUFhLENBQUE7UUFDOUQsQ0FBQztRQUVELFVBQVUsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFO1lBQzFELFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7U0FDbkMsQ0FBQyxDQUFBO1FBRUYsT0FBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDL0MsT0FBTyxVQUFpQixDQUFBO0lBQzFCLENBQUM7SUFFRDtRQUNFLElBQU0sQ0FBQyxHQUFHLGNBQXNCLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUMsQ0FBUSxDQUFBO1FBQzFELElBQU0sQ0FBQyxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzlCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLGNBQVksQ0FBQyxDQUFBO1FBQzdCLE9BQU8sSUFBSSxDQUFDLENBQUE7SUFDZCxDQUFDO0lBRUQsSUFBSTtRQUNGLG9CQUFvQixFQUFFLENBQUE7UUFDdEIsT0FBTyxpQkFBaUIsQ0FBQTtLQUN6QjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTyxVQUE0QixXQUFjLElBQUs7WUFBeUIsOEJBQVc7WUFBcEM7O1lBQXNDLENBQUM7WUFBRCxpQkFBQztRQUFELENBQUMsQUFBdkMsQ0FBeUIsV0FBVyxJQUFwQyxDQUF1QyxDQUFBO0tBQzlGO0FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQSJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/dispatcher.js':
  /*!************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/dispatcher.js ***!
  \************************************************************/
  /*! exports provided: Dispatcher */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Dispatcher', function () {
      return Dispatcher
    })
    /* harmony import */
    var _event_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event_listener */ './node_modules/@stimulus/core/dist/src/event_listener.js')

    var Dispatcher = /** @class */ (function () {
      function Dispatcher (application) {
        this.application = application
        this.eventListenerMaps = new Map
        this.started = false
      }

      Dispatcher.prototype.start = function () {
        if (!this.started) {
          this.started = true
          this.eventListeners.forEach(function (eventListener) {
            return eventListener.connect()
          })
        }
      }
      Dispatcher.prototype.stop = function () {
        if (this.started) {
          this.started = false
          this.eventListeners.forEach(function (eventListener) {
            return eventListener.disconnect()
          })
        }
      }
      Object.defineProperty(Dispatcher.prototype, 'eventListeners', {
        get: function () {
          return Array.from(this.eventListenerMaps.values())
            .reduce(function (listeners, map) {
              return listeners.concat(Array.from(map.values()))
            }, [])
        },
        enumerable: true,
        configurable: true
      })
      // Binding observer delegate
      /** @hidden */
      Dispatcher.prototype.bindingConnected = function (binding) {
        this.fetchEventListenerForBinding(binding).bindingConnected(binding)
      }
      /** @hidden */
      Dispatcher.prototype.bindingDisconnected = function (binding) {
        this.fetchEventListenerForBinding(binding).bindingDisconnected(binding)
      }
      // Error handling
      Dispatcher.prototype.handleError = function (error, message, detail) {
        if (detail === void 0) {
          detail = {}
        }
        this.application.handleError(error, 'Error ' + message, detail)
      }
      Dispatcher.prototype.fetchEventListenerForBinding = function (binding) {
        var eventTarget = binding.eventTarget, eventName = binding.eventName
        return this.fetchEventListener(eventTarget, eventName)
      }
      Dispatcher.prototype.fetchEventListener = function (eventTarget, eventName) {
        var eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget)
        var eventListener = eventListenerMap.get(eventName)
        if (!eventListener) {
          eventListener = this.createEventListener(eventTarget, eventName)
          eventListenerMap.set(eventName, eventListener)
        }
        return eventListener
      }
      Dispatcher.prototype.createEventListener = function (eventTarget, eventName) {
        var eventListener = new _event_listener__WEBPACK_IMPORTED_MODULE_0__['EventListener'](eventTarget, eventName)
        if (this.started) {
          eventListener.connect()
        }
        return eventListener
      }
      Dispatcher.prototype.fetchEventListenerMapForEventTarget = function (eventTarget) {
        var eventListenerMap = this.eventListenerMaps.get(eventTarget)
        if (!eventListenerMap) {
          eventListenerMap = new Map
          this.eventListenerMaps.set(eventTarget, eventListenerMap)
        }
        return eventListenerMap
      }
      return Dispatcher
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaXNwYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUVoRDtJQUtFLG9CQUFZLFdBQXdCO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsQ0FBQTtRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtJQUN0QixDQUFDO0lBRUQsMEJBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1lBQ25CLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQUEsYUFBYSxJQUFJLE9BQUEsYUFBYSxDQUFDLE9BQU8sRUFBRSxFQUF2QixDQUF1QixDQUFDLENBQUE7U0FDdEU7SUFDSCxDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtZQUNwQixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFBLGFBQWEsSUFBSSxPQUFBLGFBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFBO1NBQ3pFO0lBQ0gsQ0FBQztJQUVELHNCQUFJLHNDQUFjO2FBQWxCO1lBQ0UsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztpQkFDL0MsTUFBTSxDQUFDLFVBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSyxPQUFBLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUExQyxDQUEwQyxFQUFFLEVBQXFCLENBQUMsQ0FBQTtRQUNsRyxDQUFDOzs7T0FBQTtJQUVELDRCQUE0QjtJQUU1QixjQUFjO0lBQ2QscUNBQWdCLEdBQWhCLFVBQWlCLE9BQWdCO1FBQy9CLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN0RSxDQUFDO0lBRUQsY0FBYztJQUNkLHdDQUFtQixHQUFuQixVQUFvQixPQUFnQjtRQUNsQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDekUsQ0FBQztJQUVELGlCQUFpQjtJQUVqQixnQ0FBVyxHQUFYLFVBQVksS0FBWSxFQUFFLE9BQWUsRUFBRSxNQUFtQjtRQUFuQix1QkFBQSxFQUFBLFdBQW1CO1FBQzVELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxXQUFTLE9BQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBRU8saURBQTRCLEdBQXBDLFVBQXFDLE9BQWdCO1FBQzNDLElBQUEsaUNBQVcsRUFBRSw2QkFBUyxDQUFZO1FBQzFDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0lBRU8sdUNBQWtCLEdBQTFCLFVBQTJCLFdBQXdCLEVBQUUsU0FBaUI7UUFDcEUsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsbUNBQW1DLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDOUUsSUFBSSxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ25ELElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsYUFBYSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUE7WUFDaEUsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQTtTQUMvQztRQUNELE9BQU8sYUFBYSxDQUFBO0lBQ3RCLENBQUM7SUFFTyx3Q0FBbUIsR0FBM0IsVUFBNEIsV0FBd0IsRUFBRSxTQUFpQjtRQUNyRSxJQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDL0QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtTQUN4QjtRQUNELE9BQU8sYUFBYSxDQUFBO0lBQ3RCLENBQUM7SUFFTyx3REFBbUMsR0FBM0MsVUFBNEMsV0FBd0I7UUFDbEUsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzlELElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQixnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO1NBQzFEO1FBQ0QsT0FBTyxnQkFBZ0IsQ0FBQTtJQUN6QixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBL0VELElBK0VDIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/event_listener.js':
  /*!****************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/event_listener.js ***!
  \****************************************************************/
  /*! exports provided: EventListener */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'EventListener', function () {
      return EventListener
    })
    var EventListener = /** @class */ (function () {
      function EventListener (eventTarget, eventName) {
        this.eventTarget = eventTarget
        this.eventName = eventName
        this.unorderedBindings = new Set
      }

      EventListener.prototype.connect = function () {
        this.eventTarget.addEventListener(this.eventName, this, false)
      }
      EventListener.prototype.disconnect = function () {
        this.eventTarget.removeEventListener(this.eventName, this, false)
      }
      // Binding observer delegate
      /** @hidden */
      EventListener.prototype.bindingConnected = function (binding) {
        this.unorderedBindings.add(binding)
      }
      /** @hidden */
      EventListener.prototype.bindingDisconnected = function (binding) {
        this.unorderedBindings.delete(binding)
      }
      EventListener.prototype.handleEvent = function (event) {
        var extendedEvent = extendEvent(event)
        for (var _i = 0, _a = this.bindings; _i < _a.length; _i++) {
          var binding = _a[_i]
          if (extendedEvent.immediatePropagationStopped) {
            break
          } else {
            binding.handleEvent(extendedEvent)
          }
        }
      }
      Object.defineProperty(EventListener.prototype, 'bindings', {
        get: function () {
          return Array.from(this.unorderedBindings).sort(function (left, right) {
            var leftIndex = left.index, rightIndex = right.index
            return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0
          })
        },
        enumerable: true,
        configurable: true
      })
      return EventListener
    }())

    function extendEvent (event) {
      if ('immediatePropagationStopped' in event) {
        return event
      } else {
        var stopImmediatePropagation_1 = event.stopImmediatePropagation
        return Object.assign(event, {
          immediatePropagationStopped: false,
          stopImmediatePropagation: function () {
            this.immediatePropagationStopped = true
            stopImmediatePropagation_1.call(this)
          }
        })
      }
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfbGlzdGVuZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnRfbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7SUFLRSx1QkFBWSxXQUF3QixFQUFFLFNBQWlCO1FBQ3JELElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsQ0FBQTtJQUNsQyxDQUFDO0lBRUQsK0JBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDaEUsQ0FBQztJQUVELGtDQUFVLEdBQVY7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ25FLENBQUM7SUFFRCw0QkFBNEI7SUFFNUIsY0FBYztJQUNkLHdDQUFnQixHQUFoQixVQUFpQixPQUFnQjtRQUMvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFRCxjQUFjO0lBQ2QsMkNBQW1CLEdBQW5CLFVBQW9CLE9BQWdCO1FBQ2xDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVELG1DQUFXLEdBQVgsVUFBWSxLQUFZO1FBQ3RCLElBQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN4QyxLQUFzQixVQUFhLEVBQWIsS0FBQSxJQUFJLENBQUMsUUFBUSxFQUFiLGNBQWEsRUFBYixJQUFhLEVBQUU7WUFBaEMsSUFBTSxPQUFPLFNBQUE7WUFDaEIsSUFBSSxhQUFhLENBQUMsMkJBQTJCLEVBQUU7Z0JBQzdDLE1BQUs7YUFDTjtpQkFBTTtnQkFDTCxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFBO2FBQ25DO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsc0JBQUksbUNBQVE7YUFBWjtZQUNFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSztnQkFDekQsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQTtnQkFDdEQsT0FBTyxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDckUsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDOzs7T0FBQTtJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQWhERCxJQWdEQzs7QUFFRCxxQkFBcUIsS0FBWTtJQUMvQixJQUFJLDZCQUE2QixJQUFJLEtBQUssRUFBRTtRQUMxQyxPQUFPLEtBQUssQ0FBQTtLQUNiO1NBQU07UUFDRyxJQUFBLDJEQUF3QixDQUFVO1FBQzFDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDMUIsMkJBQTJCLEVBQUUsS0FBSztZQUNsQyx3QkFBd0I7Z0JBQ3RCLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUE7Z0JBQ3ZDLDBCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNyQyxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0tBQ0g7QUFDSCxDQUFDIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/module.js':
  /*!********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/module.js ***!
  \********************************************************/
  /*! exports provided: Module */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Module', function () {
      return Module
    })
    /* harmony import */
    var _context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context */ './node_modules/@stimulus/core/dist/src/context.js')
    /* harmony import */
    var _definition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./definition */ './node_modules/@stimulus/core/dist/src/definition.js')


    var Module = /** @class */ (function () {
      function Module (application, definition) {
        this.application = application
        this.definition = Object(_definition__WEBPACK_IMPORTED_MODULE_1__['blessDefinition'])(definition)
        this.contextsByScope = new WeakMap
        this.connectedContexts = new Set
      }

      Object.defineProperty(Module.prototype, 'identifier', {
        get: function () {
          return this.definition.identifier
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Module.prototype, 'controllerConstructor', {
        get: function () {
          return this.definition.controllerConstructor
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Module.prototype, 'contexts', {
        get: function () {
          return Array.from(this.connectedContexts)
        },
        enumerable: true,
        configurable: true
      })
      Module.prototype.connectContextForScope = function (scope) {
        var context = this.fetchContextForScope(scope)
        this.connectedContexts.add(context)
        context.connect()
      }
      Module.prototype.disconnectContextForScope = function (scope) {
        var context = this.contextsByScope.get(scope)
        if (context) {
          this.connectedContexts.delete(context)
          context.disconnect()
        }
      }
      Module.prototype.fetchContextForScope = function (scope) {
        var context = this.contextsByScope.get(scope)
        if (!context) {
          context = new _context__WEBPACK_IMPORTED_MODULE_0__['Context'](this, scope)
          this.contextsByScope.set(scope, context)
        }
        return context
      }
      return Module
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRW5DLE9BQU8sRUFBYyxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFHMUQ7SUFNRSxnQkFBWSxXQUF3QixFQUFFLFVBQXNCO1FBQzFELElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxPQUFPLENBQUE7UUFDbEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFBO0lBQ2xDLENBQUM7SUFFRCxzQkFBSSw4QkFBVTthQUFkO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQTtRQUNuQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHlDQUFxQjthQUF6QjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQTtRQUM5QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDRCQUFRO2FBQVo7WUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFDM0MsQ0FBQzs7O09BQUE7SUFFRCx1Q0FBc0IsR0FBdEIsVUFBdUIsS0FBWTtRQUNqQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDaEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDbkIsQ0FBQztJQUVELDBDQUF5QixHQUF6QixVQUEwQixLQUFZO1FBQ3BDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQy9DLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN0QyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUE7U0FDckI7SUFDSCxDQUFDO0lBRU8scUNBQW9CLEdBQTVCLFVBQTZCLEtBQVk7UUFDdkMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDN0MsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDbEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1NBQ3pDO1FBQ0QsT0FBTyxPQUFPLENBQUE7SUFDaEIsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBL0NELElBK0NDIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/router.js':
  /*!********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/router.js ***!
  \********************************************************/
  /*! exports provided: Router */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Router', function () {
      return Router
    })
    /* harmony import */
    var _module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module */ './node_modules/@stimulus/core/dist/src/module.js')
    /* harmony import */
    var _stimulus_multimap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stimulus/multimap */ './node_modules/@stimulus/multimap/dist/index.js')
    /* harmony import */
    var _scope_observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scope_observer */ './node_modules/@stimulus/core/dist/src/scope_observer.js')


    var Router = /** @class */ (function () {
      function Router (application) {
        this.application = application
        this.scopeObserver = new _scope_observer__WEBPACK_IMPORTED_MODULE_2__['ScopeObserver'](this.element, this.schema, this)
        this.scopesByIdentifier = new _stimulus_multimap__WEBPACK_IMPORTED_MODULE_1__['Multimap']
        this.modulesByIdentifier = new Map
      }

      Object.defineProperty(Router.prototype, 'element', {
        get: function () {
          return this.application.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Router.prototype, 'schema', {
        get: function () {
          return this.application.schema
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Router.prototype, 'controllerAttribute', {
        get: function () {
          return this.schema.controllerAttribute
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Router.prototype, 'modules', {
        get: function () {
          return Array.from(this.modulesByIdentifier.values())
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Router.prototype, 'contexts', {
        get: function () {
          return this.modules.reduce(function (contexts, module) {
            return contexts.concat(module.contexts)
          }, [])
        },
        enumerable: true,
        configurable: true
      })
      Router.prototype.start = function () {
        this.scopeObserver.start()
      }
      Router.prototype.stop = function () {
        this.scopeObserver.stop()
      }
      Router.prototype.loadDefinition = function (definition) {
        this.unloadIdentifier(definition.identifier)
        var module = new _module__WEBPACK_IMPORTED_MODULE_0__['Module'](this.application, definition)
        this.connectModule(module)
      }
      Router.prototype.unloadIdentifier = function (identifier) {
        var module = this.modulesByIdentifier.get(identifier)
        if (module) {
          this.disconnectModule(module)
        }
      }
      Router.prototype.getContextForElementAndIdentifier = function (element, identifier) {
        var module = this.modulesByIdentifier.get(identifier)
        if (module) {
          return module.contexts.find(function (context) {
            return context.element == element
          })
        }
      }
      // Error handler delegate
      /** @hidden */
      Router.prototype.handleError = function (error, message, detail) {
        this.application.handleError(error, message, detail)
      }
      // Scope observer delegate
      /** @hidden */
      Router.prototype.scopeConnected = function (scope) {
        this.scopesByIdentifier.add(scope.identifier, scope)
        var module = this.modulesByIdentifier.get(scope.identifier)
        if (module) {
          module.connectContextForScope(scope)
        }
      }
      /** @hidden */
      Router.prototype.scopeDisconnected = function (scope) {
        this.scopesByIdentifier.delete(scope.identifier, scope)
        var module = this.modulesByIdentifier.get(scope.identifier)
        if (module) {
          module.disconnectContextForScope(scope)
        }
      }
      // Modules
      Router.prototype.connectModule = function (module) {
        this.modulesByIdentifier.set(module.identifier, module)
        var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier)
        scopes.forEach(function (scope) {
          return module.connectContextForScope(scope)
        })
      }
      Router.prototype.disconnectModule = function (module) {
        this.modulesByIdentifier.delete(module.identifier)
        var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier)
        scopes.forEach(function (scope) {
          return module.disconnectContextForScope(scope)
        })
      }
      return Router
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUc3QyxPQUFPLEVBQUUsYUFBYSxFQUF5QixNQUFNLGtCQUFrQixDQUFBO0FBRXZFO0lBTUUsZ0JBQVksV0FBd0I7UUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7UUFDOUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDdkUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksUUFBUSxDQUFBO1FBQ3RDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsQ0FBQTtJQUNwQyxDQUFDO0lBRUQsc0JBQUksMkJBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUE7UUFDakMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwwQkFBTTthQUFWO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQTtRQUNoQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHVDQUFtQjthQUF2QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQTtRQUN4QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDJCQUFPO2FBQVg7WUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDdEQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw0QkFBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLFFBQVEsRUFBRSxNQUFNLElBQUssT0FBQSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBaEMsQ0FBZ0MsRUFBRSxFQUFlLENBQUMsQ0FBQTtRQUNyRyxDQUFDOzs7T0FBQTtJQUVELHNCQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFRCxxQkFBSSxHQUFKO1FBQ0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0lBRUQsK0JBQWMsR0FBZCxVQUFlLFVBQXNCO1FBQ25DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDNUMsSUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzVCLENBQUM7SUFFRCxpQ0FBZ0IsR0FBaEIsVUFBaUIsVUFBa0I7UUFDakMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN2RCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUM5QjtJQUNILENBQUM7SUFFRCxrREFBaUMsR0FBakMsVUFBa0MsT0FBZ0IsRUFBRSxVQUFrQjtRQUNwRSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3ZELElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxFQUExQixDQUEwQixDQUFDLENBQUE7U0FDbkU7SUFDSCxDQUFDO0lBRUQseUJBQXlCO0lBRXpCLGNBQWM7SUFDZCw0QkFBVyxHQUFYLFVBQVksS0FBWSxFQUFFLE9BQWUsRUFBRSxNQUFXO1FBQ3BELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDdEQsQ0FBQztJQUVELDBCQUEwQjtJQUUxQixjQUFjO0lBQ2QsK0JBQWMsR0FBZCxVQUFlLEtBQVk7UUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3BELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdELElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ3JDO0lBQ0gsQ0FBQztJQUVELGNBQWM7SUFDZCxrQ0FBaUIsR0FBakIsVUFBa0IsS0FBWTtRQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDdkQsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDN0QsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDeEM7SUFDSCxDQUFDO0lBRUQsVUFBVTtJQUVGLDhCQUFhLEdBQXJCLFVBQXNCLE1BQWM7UUFDbEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3ZELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3pFLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLEVBQXBDLENBQW9DLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRU8saUNBQWdCLEdBQXhCLFVBQXlCLE1BQWM7UUFDckMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEQsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDekUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFDSCxhQUFDO0FBQUQsQ0FBQyxBQXJHRCxJQXFHQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/schema.js':
  /*!********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/schema.js ***!
  \********************************************************/
  /*! exports provided: defaultSchema */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'defaultSchema', function () {
      return defaultSchema
    })
    var defaultSchema = {
      controllerAttribute: 'data-controller',
      actionAttribute: 'data-action',
      targetAttribute: 'data-target'
    }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQVc7SUFDbkMsbUJBQW1CLEVBQUUsaUJBQWlCO0lBQ3RDLGVBQWUsRUFBRSxhQUFhO0lBQzlCLGVBQWUsRUFBRSxhQUFhO0NBQy9CLENBQUEifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/scope.js':
  /*!*******************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/scope.js ***!
  \*******************************************************/
  /*! exports provided: Scope */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Scope', function () {
      return Scope
    })
    /* harmony import */
    var _data_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data_map */ './node_modules/@stimulus/core/dist/src/data_map.js')
    /* harmony import */
    var _target_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./target_set */ './node_modules/@stimulus/core/dist/src/target_set.js')
    /* harmony import */
    var _selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectors */ './node_modules/@stimulus/core/dist/src/selectors.js')


    var Scope = /** @class */ (function () {
      function Scope (schema, identifier, element) {
        this.schema = schema
        this.identifier = identifier
        this.element = element
        this.targets = new _target_set__WEBPACK_IMPORTED_MODULE_1__['TargetSet'](this)
        this.data = new _data_map__WEBPACK_IMPORTED_MODULE_0__['DataMap'](this)
      }

      Scope.prototype.findElement = function (selector) {
        return this.findAllElements(selector)[0]
      }
      Scope.prototype.findAllElements = function (selector) {
        var head = this.element.matches(selector) ? [this.element] : []
        var tail = this.filterElements(Array.from(this.element.querySelectorAll(selector)))
        return head.concat(tail)
      }
      Scope.prototype.filterElements = function (elements) {
        var _this = this
        return elements.filter(function (element) {
          return _this.containsElement(element)
        })
      }
      Scope.prototype.containsElement = function (element) {
        return element.closest(this.controllerSelector) === this.element
      }
      Object.defineProperty(Scope.prototype, 'controllerSelector', {
        get: function () {
          return Object(_selectors__WEBPACK_IMPORTED_MODULE_2__['attributeValueContainsToken'])(this.schema.controllerAttribute, this.identifier)
        },
        enumerable: true,
        configurable: true
      })
      return Scope
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NvcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUVwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3hDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUV6RDtJQU9FLGVBQVksTUFBYyxFQUFFLFVBQWtCLEVBQUUsT0FBZ0I7UUFDOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFRCwyQkFBVyxHQUFYLFVBQVksUUFBZ0I7UUFDMUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFRCwrQkFBZSxHQUFmLFVBQWdCLFFBQWdCO1FBQzlCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO1FBQ2pFLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNyRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVELDhCQUFjLEdBQWQsVUFBZSxRQUFtQjtRQUFsQyxpQkFFQztRQURDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQTdCLENBQTZCLENBQUMsQ0FBQTtJQUNsRSxDQUFDO0lBRUQsK0JBQWUsR0FBZixVQUFnQixPQUFnQjtRQUM5QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUNsRSxDQUFDO0lBRUQsc0JBQVkscUNBQWtCO2FBQTlCO1lBQ0UsT0FBTywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN0RixDQUFDOzs7T0FBQTtJQUNILFlBQUM7QUFBRCxDQUFDLEFBcENELElBb0NDIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/scope_observer.js':
  /*!****************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/scope_observer.js ***!
  \****************************************************************/
  /*! exports provided: ScopeObserver */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'ScopeObserver', function () {
      return ScopeObserver
    })
    /* harmony import */
    var _scope__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scope */ './node_modules/@stimulus/core/dist/src/scope.js')
    /* harmony import */
    var _stimulus_mutation_observers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stimulus/mutation-observers */ './node_modules/@stimulus/mutation-observers/dist/index.js')


    var ScopeObserver = /** @class */ (function () {
      function ScopeObserver (element, schema, delegate) {
        this.element = element
        this.schema = schema
        this.delegate = delegate
        this.valueListObserver = new _stimulus_mutation_observers__WEBPACK_IMPORTED_MODULE_1__['ValueListObserver'](this.element, this.controllerAttribute, this)
        this.scopesByIdentifierByElement = new WeakMap
        this.scopeReferenceCounts = new WeakMap
      }

      ScopeObserver.prototype.start = function () {
        this.valueListObserver.start()
      }
      ScopeObserver.prototype.stop = function () {
        this.valueListObserver.stop()
      }
      Object.defineProperty(ScopeObserver.prototype, 'controllerAttribute', {
        get: function () {
          return this.schema.controllerAttribute
        },
        enumerable: true,
        configurable: true
      })
      // Value observer delegate
      /** @hidden */
      ScopeObserver.prototype.parseValueForToken = function (token) {
        var element = token.element, identifier = token.content
        var scopesByIdentifier = this.fetchScopesByIdentifierForElement(element)
        var scope = scopesByIdentifier.get(identifier)
        if (!scope) {
          scope = new _scope__WEBPACK_IMPORTED_MODULE_0__['Scope'](this.schema, identifier, element)
          scopesByIdentifier.set(identifier, scope)
        }
        return scope
      }
      /** @hidden */
      ScopeObserver.prototype.elementMatchedValue = function (element, value) {
        var referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1
        this.scopeReferenceCounts.set(value, referenceCount)
        if (referenceCount == 1) {
          this.delegate.scopeConnected(value)
        }
      }
      /** @hidden */
      ScopeObserver.prototype.elementUnmatchedValue = function (element, value) {
        var referenceCount = this.scopeReferenceCounts.get(value)
        if (referenceCount) {
          this.scopeReferenceCounts.set(value, referenceCount - 1)
          if (referenceCount == 1) {
            this.delegate.scopeDisconnected(value)
          }
        }
      }
      ScopeObserver.prototype.fetchScopesByIdentifierForElement = function (element) {
        var scopesByIdentifier = this.scopesByIdentifierByElement.get(element)
        if (!scopesByIdentifier) {
          scopesByIdentifier = new Map
          this.scopesByIdentifierByElement.set(element, scopesByIdentifier)
        }
        return scopesByIdentifier
      }
      return ScopeObserver
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGVfb2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NvcGVfb2JzZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUMvQixPQUFPLEVBQVMsaUJBQWlCLEVBQTZCLE1BQU0sOEJBQThCLENBQUE7QUFPbEc7SUFRRSx1QkFBWSxPQUFnQixFQUFFLE1BQWMsRUFBRSxRQUErQjtRQUMzRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUM1RixJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxPQUFPLENBQUE7UUFDOUMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksT0FBTyxDQUFBO0lBQ3pDLENBQUM7SUFFRCw2QkFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ2hDLENBQUM7SUFFRCw0QkFBSSxHQUFKO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFBO0lBQy9CLENBQUM7SUFFRCxzQkFBSSw4Q0FBbUI7YUFBdkI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUE7UUFDeEMsQ0FBQzs7O09BQUE7SUFFRCwwQkFBMEI7SUFFMUIsY0FBYztJQUNkLDBDQUFrQixHQUFsQixVQUFtQixLQUFZO1FBQ3JCLElBQUEsdUJBQU8sRUFBRSwwQkFBbUIsQ0FBVTtRQUM5QyxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUUxRSxJQUFJLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUNuRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFBO1NBQzFDO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsY0FBYztJQUNkLDJDQUFtQixHQUFuQixVQUFvQixPQUFnQixFQUFFLEtBQVk7UUFDaEQsSUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN0RSxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQTtRQUNwRCxJQUFJLGNBQWMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDcEM7SUFDSCxDQUFDO0lBRUQsY0FBYztJQUNkLDZDQUFxQixHQUFyQixVQUFzQixPQUFnQixFQUFFLEtBQVk7UUFDbEQsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMzRCxJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDeEQsSUFBSSxjQUFjLElBQUksQ0FBQyxFQUFFO2dCQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQ3ZDO1NBQ0Y7SUFDSCxDQUFDO0lBRU8seURBQWlDLEdBQXpDLFVBQTBDLE9BQWdCO1FBQ3hELElBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0RSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDdkIsa0JBQWtCLEdBQUcsSUFBSSxHQUFHLENBQUE7WUFDNUIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtTQUNsRTtRQUNELE9BQU8sa0JBQWtCLENBQUE7SUFDM0IsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQXpFRCxJQXlFQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/selectors.js':
  /*!***********************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/selectors.js ***!
  \***********************************************************/
  /*! exports provided: attributeValueContainsToken */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'attributeValueContainsToken', function () {
      return attributeValueContainsToken
    })

    /** @hidden */
    function attributeValueContainsToken (attributeName, token) {
      return '[' + attributeName + '~="' + token + '"]'
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBQ2QsTUFBTSxzQ0FBc0MsYUFBcUIsRUFBRSxLQUFhO0lBQzlFLE9BQU8sTUFBSSxhQUFhLFlBQU0sS0FBSyxRQUFJLENBQUE7QUFDekMsQ0FBQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/target_properties.js':
  /*!*******************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/target_properties.js ***!
  \*******************************************************************/
  /*! exports provided: defineTargetProperties */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'defineTargetProperties', function () {
      return defineTargetProperties
    })

    /** @hidden */
    function defineTargetProperties (constructor) {
      var prototype = constructor.prototype
      var targetNames = getTargetNamesForConstructor(constructor)
      targetNames.forEach(function (name) {
        var _a
        return defineLinkedProperties(prototype, (_a = {},
          _a[name + 'Target'] = {
            get: function () {
              var target = this.targets.find(name)
              if (target) {
                return target
              } else {
                throw new Error('Missing target element "' + this.identifier + '.' + name + '"')
              }
            }
          },
          _a[name + 'Targets'] = {
            get: function () {
              return this.targets.findAll(name)
            }
          },
          _a['has' + capitalize(name) + 'Target'] = {
            get: function () {
              return this.targets.has(name)
            }
          },
          _a))
      })
    }

    function getTargetNamesForConstructor (constructor) {
      var ancestors = getAncestorsForConstructor(constructor)
      return Array.from(ancestors.reduce(function (targetNames, constructor) {
        getOwnTargetNamesForConstructor(constructor).forEach(function (name) {
          return targetNames.add(name)
        })
        return targetNames
      }, new Set))
    }

    function getAncestorsForConstructor (constructor) {
      var ancestors = []
      while (constructor) {
        ancestors.push(constructor)
        constructor = Object.getPrototypeOf(constructor)
      }
      return ancestors
    }

    function getOwnTargetNamesForConstructor (constructor) {
      var definition = constructor['targets']
      return Array.isArray(definition) ? definition : []
    }

    function defineLinkedProperties (object, properties) {
      Object.keys(properties).forEach(function (name) {
        if (!(name in object)) {
          var descriptor = properties[name]
          Object.defineProperty(object, name, descriptor)
        }
      })
    }

    function capitalize (name) {
      return name.charAt(0).toUpperCase() + name.slice(1)
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0X3Byb3BlcnRpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0X3Byb3BlcnRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsY0FBYztBQUNkLE1BQU0saUNBQWlDLFdBQXFCO0lBQzFELElBQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUE7SUFDdkMsSUFBTSxXQUFXLEdBQUcsNEJBQTRCLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDN0QsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7O1FBQUksT0FBQSxzQkFBc0IsQ0FBQyxTQUFTO1lBQzFELEdBQUksSUFBSSxXQUFRLElBQUc7Z0JBQ2pCLEdBQUc7b0JBQ0QsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7b0JBQ3RDLElBQUksTUFBTSxFQUFFO3dCQUNWLE9BQU8sTUFBTSxDQUFBO3FCQUNkO3lCQUFNO3dCQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQTJCLElBQUksQ0FBQyxVQUFVLFNBQUksSUFBSSxPQUFHLENBQUMsQ0FBQTtxQkFDdkU7Z0JBQ0gsQ0FBQzthQUNGO1lBQ0QsR0FBSSxJQUFJLFlBQVMsSUFBRztnQkFDbEIsR0FBRztvQkFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNuQyxDQUFDO2FBQ0Y7WUFDRCxHQUFDLFFBQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFRLElBQUc7Z0JBQ2hDLEdBQUc7b0JBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDL0IsQ0FBQzthQUNGO2dCQUNEO0lBckIwQixDQXFCMUIsQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQUVELHNDQUFzQyxXQUFxQjtJQUN6RCxJQUFNLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN6RCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFDLFdBQVcsRUFBRSxXQUFXO1FBQzFELCtCQUErQixDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQTtRQUNuRixPQUFPLFdBQVcsQ0FBQTtJQUNwQixDQUFDLEVBQUUsSUFBSSxHQUFrQixDQUFDLENBQUMsQ0FBQTtBQUM3QixDQUFDO0FBRUQsb0NBQW9DLFdBQXFCO0lBQ3ZELElBQU0sU0FBUyxHQUFlLEVBQUUsQ0FBQTtJQUNoQyxPQUFPLFdBQVcsRUFBRTtRQUNsQixTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzNCLFdBQVcsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0tBQ2pEO0lBQ0QsT0FBTyxTQUFTLENBQUE7QUFDbEIsQ0FBQztBQUVELHlDQUF5QyxXQUFxQjtJQUM1RCxJQUFNLFVBQVUsR0FBSSxXQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2xELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7QUFDcEQsQ0FBQztBQUVELGdDQUFnQyxNQUFXLEVBQUUsVUFBaUM7SUFDNUUsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJO1FBQ25DLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsRUFBRTtZQUNyQixJQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDbkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1NBQ2hEO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQsb0JBQW9CLElBQVk7SUFDOUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDckQsQ0FBQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/core/dist/src/target_set.js':
  /*!************************************************************!*\
  !*** ./node_modules/@stimulus/core/dist/src/target_set.js ***!
  \************************************************************/
  /*! exports provided: TargetSet */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'TargetSet', function () {
      return TargetSet
    })
    /* harmony import */
    var _selectors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selectors */ './node_modules/@stimulus/core/dist/src/selectors.js')

    var TargetSet = /** @class */ (function () {
      function TargetSet (scope) {
        this.scope = scope
      }

      Object.defineProperty(TargetSet.prototype, 'element', {
        get: function () {
          return this.scope.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(TargetSet.prototype, 'identifier', {
        get: function () {
          return this.scope.identifier
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(TargetSet.prototype, 'schema', {
        get: function () {
          return this.scope.schema
        },
        enumerable: true,
        configurable: true
      })
      TargetSet.prototype.has = function (targetName) {
        return this.find(targetName) != null
      }
      TargetSet.prototype.find = function () {
        var targetNames = []
        for (var _i = 0; _i < arguments.length; _i++) {
          targetNames[_i] = arguments[_i]
        }
        var selector = this.getSelectorForTargetNames(targetNames)
        return this.scope.findElement(selector)
      }
      TargetSet.prototype.findAll = function () {
        var targetNames = []
        for (var _i = 0; _i < arguments.length; _i++) {
          targetNames[_i] = arguments[_i]
        }
        var selector = this.getSelectorForTargetNames(targetNames)
        return this.scope.findAllElements(selector)
      }
      TargetSet.prototype.getSelectorForTargetNames = function (targetNames) {
        var _this = this
        return targetNames.map(function (targetName) {
          return _this.getSelectorForTargetName(targetName)
        }).join(', ')
      }
      TargetSet.prototype.getSelectorForTargetName = function (targetName) {
        var targetDescriptor = this.identifier + '.' + targetName
        return Object(_selectors__WEBPACK_IMPORTED_MODULE_0__['attributeValueContainsToken'])(this.schema.targetAttribute, targetDescriptor)
      }
      return TargetSet
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0X3NldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXRfc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUV6RDtJQUdFLG1CQUFZLEtBQVk7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDcEIsQ0FBQztJQUVELHNCQUFJLDhCQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFBO1FBQzNCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksaUNBQVU7YUFBZDtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUE7UUFDOUIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw2QkFBTTthQUFWO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQTtRQUMxQixDQUFDOzs7T0FBQTtJQUVELHVCQUFHLEdBQUgsVUFBSSxVQUFrQjtRQUNwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFBO0lBQ3RDLENBQUM7SUFFRCx3QkFBSSxHQUFKO1FBQUsscUJBQXdCO2FBQXhCLFVBQXdCLEVBQXhCLHFCQUF3QixFQUF4QixJQUF3QjtZQUF4QixnQ0FBd0I7O1FBQzNCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUM1RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3pDLENBQUM7SUFFRCwyQkFBTyxHQUFQO1FBQVEscUJBQXdCO2FBQXhCLFVBQXdCLEVBQXhCLHFCQUF3QixFQUF4QixJQUF3QjtZQUF4QixnQ0FBd0I7O1FBQzlCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUM1RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFTyw2Q0FBeUIsR0FBakMsVUFBa0MsV0FBcUI7UUFBdkQsaUJBRUM7UUFEQyxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBQSxVQUFVLElBQUksT0FBQSxLQUFJLENBQUMsd0JBQXdCLENBQUMsVUFBVSxDQUFDLEVBQXpDLENBQXlDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUYsQ0FBQztJQUVPLDRDQUF3QixHQUFoQyxVQUFpQyxVQUFrQjtRQUNqRCxJQUFNLGdCQUFnQixHQUFNLElBQUksQ0FBQyxVQUFVLFNBQUksVUFBWSxDQUFBO1FBQzNELE9BQU8sMkJBQTJCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtJQUNuRixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/multimap/dist/index.js':
  /*!*******************************************************!*\
  !*** ./node_modules/@stimulus/multimap/dist/index.js ***!
  \*******************************************************/
  /*! exports provided: Multimap, IndexedMultimap */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony import */
    var _src_multimap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/multimap */ './node_modules/@stimulus/multimap/dist/src/multimap.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'Multimap', function () {
      return _src_multimap__WEBPACK_IMPORTED_MODULE_0__['Multimap']
    })

    /* harmony import */
    var _src_indexed_multimap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/indexed_multimap */ './node_modules/@stimulus/multimap/dist/src/indexed_multimap.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'IndexedMultimap', function () {
      return _src_indexed_multimap__WEBPACK_IMPORTED_MODULE_1__['IndexedMultimap']
    })


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLGdCQUFnQixDQUFBO0FBQzlCLGNBQWMsd0JBQXdCLENBQUEifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/multimap/dist/src/indexed_multimap.js':
  /*!**********************************************************************!*\
  !*** ./node_modules/@stimulus/multimap/dist/src/indexed_multimap.js ***!
  \**********************************************************************/
  /*! exports provided: IndexedMultimap */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'IndexedMultimap', function () {
      return IndexedMultimap
    })
    /* harmony import */
    var _multimap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./multimap */ './node_modules/@stimulus/multimap/dist/src/multimap.js')
    /* harmony import */
    var _set_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./set_operations */ './node_modules/@stimulus/multimap/dist/src/set_operations.js')
    var __extends = (undefined && undefined.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
        ({__proto__: []} instanceof Array && function (d, b) {
          d.__proto__ = b
        }) ||
        function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]
        }
      return function (d, b) {
        extendStatics(d, b)

        function __ () {
          this.constructor = d
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __())
      }
    })()


    var IndexedMultimap = /** @class */ (function (_super) {
      __extends(IndexedMultimap, _super)

      function IndexedMultimap () {
        var _this = _super.call(this) || this
        _this.keysByValue = new Map
        return _this
      }

      Object.defineProperty(IndexedMultimap.prototype, 'values', {
        get: function () {
          return Array.from(this.keysByValue.keys())
        },
        enumerable: true,
        configurable: true
      })
      IndexedMultimap.prototype.add = function (key, value) {
        _super.prototype.add.call(this, key, value)
        Object(_set_operations__WEBPACK_IMPORTED_MODULE_1__['add'])(this.keysByValue, value, key)
      }
      IndexedMultimap.prototype.delete = function (key, value) {
        _super.prototype.delete.call(this, key, value)
        Object(_set_operations__WEBPACK_IMPORTED_MODULE_1__['del'])(this.keysByValue, value, key)
      }
      IndexedMultimap.prototype.hasValue = function (value) {
        return this.keysByValue.has(value)
      }
      IndexedMultimap.prototype.getKeysForValue = function (value) {
        var set = this.keysByValue.get(value)
        return set ? Array.from(set) : []
      }
      return IndexedMultimap
    }(_multimap__WEBPACK_IMPORTED_MODULE_0__['Multimap']))

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlZF9tdWx0aW1hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleGVkX211bHRpbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3JDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFM0M7SUFBMkMsbUNBQWM7SUFHdkQ7UUFBQSxZQUNFLGlCQUFPLFNBRVI7UUFEQyxLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxDQUFBOztJQUM1QixDQUFDO0lBRUQsc0JBQUksbUNBQU07YUFBVjtZQUNFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDNUMsQ0FBQzs7O09BQUE7SUFFRCw2QkFBRyxHQUFILFVBQUksR0FBTSxFQUFFLEtBQVE7UUFDbEIsaUJBQU0sR0FBRyxZQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVELGdDQUFNLEdBQU4sVUFBTyxHQUFNLEVBQUUsS0FBUTtRQUNyQixpQkFBTSxNQUFNLFlBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRUQsa0NBQVEsR0FBUixVQUFTLEtBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFRCx5Q0FBZSxHQUFmLFVBQWdCLEtBQVE7UUFDdEIsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdkMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUNuQyxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBOUJELENBQTJDLFFBQVEsR0E4QmxEIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/multimap/dist/src/multimap.js':
  /*!**************************************************************!*\
  !*** ./node_modules/@stimulus/multimap/dist/src/multimap.js ***!
  \**************************************************************/
  /*! exports provided: Multimap */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'Multimap', function () {
      return Multimap
    })
    /* harmony import */
    var _set_operations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./set_operations */ './node_modules/@stimulus/multimap/dist/src/set_operations.js')

    var Multimap = /** @class */ (function () {
      function Multimap () {
        this.valuesByKey = new Map()
      }

      Object.defineProperty(Multimap.prototype, 'values', {
        get: function () {
          var sets = Array.from(this.valuesByKey.values())
          return sets.reduce(function (values, set) {
            return values.concat(Array.from(set))
          }, [])
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(Multimap.prototype, 'size', {
        get: function () {
          var sets = Array.from(this.valuesByKey.values())
          return sets.reduce(function (size, set) {
            return size + set.size
          }, 0)
        },
        enumerable: true,
        configurable: true
      })
      Multimap.prototype.add = function (key, value) {
        Object(_set_operations__WEBPACK_IMPORTED_MODULE_0__['add'])(this.valuesByKey, key, value)
      }
      Multimap.prototype.delete = function (key, value) {
        Object(_set_operations__WEBPACK_IMPORTED_MODULE_0__['del'])(this.valuesByKey, key, value)
      }
      Multimap.prototype.has = function (key, value) {
        var values = this.valuesByKey.get(key)
        return values != null && values.has(value)
      }
      Multimap.prototype.hasKey = function (key) {
        return this.valuesByKey.has(key)
      }
      Multimap.prototype.hasValue = function (value) {
        var sets = Array.from(this.valuesByKey.values())
        return sets.some(function (set) {
          return set.has(value)
        })
      }
      Multimap.prototype.getValuesForKey = function (key) {
        var values = this.valuesByKey.get(key)
        return values ? Array.from(values) : []
      }
      Multimap.prototype.getKeysForValue = function (value) {
        return Array.from(this.valuesByKey)
          .filter(function (_a) {
            var key = _a[0], values = _a[1]
            return values.has(value)
          })
          .map(function (_a) {
            var key = _a[0], values = _a[1]
            return key
          })
      }
      return Multimap
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGltYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbXVsdGltYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUUzQztJQUdFO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBYSxDQUFBO0lBQ3pDLENBQUM7SUFFRCxzQkFBSSw0QkFBTTthQUFWO1lBQ0UsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7WUFDbEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUE5QixDQUE4QixFQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9FLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMEJBQUk7YUFBUjtZQUNFLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1lBQ2xELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxHQUFHLElBQUssT0FBQSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBZixDQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDdkQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBRyxHQUFILFVBQUksR0FBTSxFQUFFLEtBQVE7UUFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCx5QkFBTSxHQUFOLFVBQU8sR0FBTSxFQUFFLEtBQVE7UUFDckIsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxzQkFBRyxHQUFILFVBQUksR0FBTSxFQUFFLEtBQVE7UUFDbEIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDeEMsT0FBTyxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUVELHlCQUFNLEdBQU4sVUFBTyxHQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0lBRUQsMkJBQVEsR0FBUixVQUFTLEtBQVE7UUFDZixJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUNsRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFkLENBQWMsQ0FBQyxDQUFBO0lBQ3pDLENBQUM7SUFFRCxrQ0FBZSxHQUFmLFVBQWdCLEdBQU07UUFDcEIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDeEMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUN6QyxDQUFDO0lBRUQsa0NBQWUsR0FBZixVQUFnQixLQUFRO1FBQ3RCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ2hDLE1BQU0sQ0FBQyxVQUFDLEVBQWE7Z0JBQVosV0FBRyxFQUFFLGNBQU07WUFBTSxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQWpCLENBQWlCLENBQUM7YUFDNUMsR0FBRyxDQUFDLFVBQUMsRUFBYTtnQkFBWixXQUFHLEVBQUUsY0FBTTtZQUFNLE9BQUEsR0FBRztRQUFILENBQUcsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFDSCxlQUFDO0FBQUQsQ0FBQyxBQWpERCxJQWlEQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/multimap/dist/src/set_operations.js':
  /*!********************************************************************!*\
  !*** ./node_modules/@stimulus/multimap/dist/src/set_operations.js ***!
  \********************************************************************/
  /*! exports provided: add, del, fetch, prune */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'add', function () {
      return add
    })
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'del', function () {
      return del
    })
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'fetch', function () {
      return fetch
    })
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'prune', function () {
      return prune
    })

    function add (map, key, value) {
      fetch(map, key).add(value)
    }

    function del (map, key, value) {
      fetch(map, key).delete(value)
      prune(map, key)
    }

    function fetch (map, key) {
      var values = map.get(key)
      if (!values) {
        values = new Set()
        map.set(key, values)
      }
      return values
    }

    function prune (map, key) {
      var values = map.get(key)
      if (values != null && values.size == 0) {
        map.delete(key)
      }
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0X29wZXJhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2V0X29wZXJhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxjQUFvQixHQUFtQixFQUFFLEdBQU0sRUFBRSxLQUFRO0lBQzdELEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzVCLENBQUM7QUFFRCxNQUFNLGNBQW9CLEdBQW1CLEVBQUUsR0FBTSxFQUFFLEtBQVE7SUFDN0QsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDN0IsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUNqQixDQUFDO0FBRUQsTUFBTSxnQkFBc0IsR0FBbUIsRUFBRSxHQUFNO0lBQ3JELElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDekIsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0tBQ3JCO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBRUQsTUFBTSxnQkFBc0IsR0FBbUIsRUFBRSxHQUFNO0lBQ3JELElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDM0IsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDaEI7QUFDSCxDQUFDIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/mutation-observers/dist/index.js':
  /*!*****************************************************************!*\
  !*** ./node_modules/@stimulus/mutation-observers/dist/index.js ***!
  \*****************************************************************/
  /*! exports provided: AttributeObserver, ElementObserver, TokenListObserver, ValueListObserver */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony import */
    var _src_attribute_observer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/attribute_observer */ './node_modules/@stimulus/mutation-observers/dist/src/attribute_observer.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'AttributeObserver', function () {
      return _src_attribute_observer__WEBPACK_IMPORTED_MODULE_0__['AttributeObserver']
    })

    /* harmony import */
    var _src_element_observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/element_observer */ './node_modules/@stimulus/mutation-observers/dist/src/element_observer.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'ElementObserver', function () {
      return _src_element_observer__WEBPACK_IMPORTED_MODULE_1__['ElementObserver']
    })

    /* harmony import */
    var _src_token_list_observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/token_list_observer */ './node_modules/@stimulus/mutation-observers/dist/src/token_list_observer.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'TokenListObserver', function () {
      return _src_token_list_observer__WEBPACK_IMPORTED_MODULE_2__['TokenListObserver']
    })

    /* harmony import */
    var _src_value_list_observer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/value_list_observer */ './node_modules/@stimulus/mutation-observers/dist/src/value_list_observer.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'ValueListObserver', function () {
      return _src_value_list_observer__WEBPACK_IMPORTED_MODULE_3__['ValueListObserver']
    })


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLDBCQUEwQixDQUFBO0FBQ3hDLGNBQWMsd0JBQXdCLENBQUE7QUFDdEMsY0FBYywyQkFBMkIsQ0FBQTtBQUN6QyxjQUFjLDJCQUEyQixDQUFBIn0=

    /***/
  }),

  /***/ './node_modules/@stimulus/mutation-observers/dist/src/attribute_observer.js':
  /*!**********************************************************************************!*\
  !*** ./node_modules/@stimulus/mutation-observers/dist/src/attribute_observer.js ***!
  \**********************************************************************************/
  /*! exports provided: AttributeObserver */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'AttributeObserver', function () {
      return AttributeObserver
    })
    /* harmony import */
    var _element_observer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element_observer */ './node_modules/@stimulus/mutation-observers/dist/src/element_observer.js')

    var AttributeObserver = /** @class */ (function () {
      function AttributeObserver (element, attributeName, delegate) {
        this.attributeName = attributeName
        this.delegate = delegate
        this.elementObserver = new _element_observer__WEBPACK_IMPORTED_MODULE_0__['ElementObserver'](element, this)
      }

      Object.defineProperty(AttributeObserver.prototype, 'element', {
        get: function () {
          return this.elementObserver.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(AttributeObserver.prototype, 'selector', {
        get: function () {
          return '[' + this.attributeName + ']'
        },
        enumerable: true,
        configurable: true
      })
      AttributeObserver.prototype.start = function () {
        this.elementObserver.start()
      }
      AttributeObserver.prototype.stop = function () {
        this.elementObserver.stop()
      }
      AttributeObserver.prototype.refresh = function () {
        this.elementObserver.refresh()
      }
      Object.defineProperty(AttributeObserver.prototype, 'started', {
        get: function () {
          return this.elementObserver.started
        },
        enumerable: true,
        configurable: true
      })
      // Element observer delegate
      AttributeObserver.prototype.matchElement = function (element) {
        return element.hasAttribute(this.attributeName)
      }
      AttributeObserver.prototype.matchElementsInTree = function (tree) {
        var match = this.matchElement(tree) ? [tree] : []
        var matches = Array.from(tree.querySelectorAll(this.selector))
        return match.concat(matches)
      }
      AttributeObserver.prototype.elementMatched = function (element) {
        if (this.delegate.elementMatchedAttribute) {
          this.delegate.elementMatchedAttribute(element, this.attributeName)
        }
      }
      AttributeObserver.prototype.elementUnmatched = function (element) {
        if (this.delegate.elementUnmatchedAttribute) {
          this.delegate.elementUnmatchedAttribute(element, this.attributeName)
        }
      }
      AttributeObserver.prototype.elementAttributeChanged = function (element, attributeName) {
        if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
          this.delegate.elementAttributeValueChanged(element, attributeName)
        }
      }
      return AttributeObserver
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlX29ic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F0dHJpYnV0ZV9vYnNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUEyQixNQUFNLG9CQUFvQixDQUFBO0FBUTdFO0lBTUUsMkJBQVksT0FBZ0IsRUFBRSxhQUFxQixFQUFFLFFBQW1DO1FBQ3RGLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBRXhCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzNELENBQUM7SUFFRCxzQkFBSSxzQ0FBTzthQUFYO1lBQ0UsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQTtRQUNyQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHVDQUFRO2FBQVo7WUFDRSxPQUFPLE1BQUksSUFBSSxDQUFDLGFBQWEsTUFBRyxDQUFBO1FBQ2xDLENBQUM7OztPQUFBO0lBRUQsaUNBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDOUIsQ0FBQztJQUVELGdDQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQzdCLENBQUM7SUFFRCxtQ0FBTyxHQUFQO1FBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsc0JBQUksc0NBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUE7UUFDckMsQ0FBQzs7O09BQUE7SUFFRCw0QkFBNEI7SUFFNUIsd0NBQVksR0FBWixVQUFhLE9BQWdCO1FBQzNCLE9BQU8sT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDakQsQ0FBQztJQUVELCtDQUFtQixHQUFuQixVQUFvQixJQUFhO1FBQy9CLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUNuRCxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUNoRSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDOUIsQ0FBQztJQUVELDBDQUFjLEdBQWQsVUFBZSxPQUFnQjtRQUM3QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUU7WUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1NBQ25FO0lBQ0gsQ0FBQztJQUVELDRDQUFnQixHQUFoQixVQUFpQixPQUFnQjtRQUMvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMseUJBQXlCLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1NBQ3JFO0lBQ0gsQ0FBQztJQUVELG1EQUF1QixHQUF2QixVQUF3QixPQUFnQixFQUFFLGFBQXFCO1FBQzdELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLGFBQWEsRUFBRTtZQUNyRixJQUFJLENBQUMsUUFBUSxDQUFDLDRCQUE0QixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQTtTQUNuRTtJQUNILENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFsRUQsSUFrRUMifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/mutation-observers/dist/src/element_observer.js':
  /*!********************************************************************************!*\
  !*** ./node_modules/@stimulus/mutation-observers/dist/src/element_observer.js ***!
  \********************************************************************************/
  /*! exports provided: ElementObserver */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'ElementObserver', function () {
      return ElementObserver
    })
    var ElementObserver = /** @class */ (function () {
      function ElementObserver (element, delegate) {
        var _this = this
        this.element = element
        this.started = false
        this.delegate = delegate
        this.elements = new Set
        this.mutationObserver = new MutationObserver(function (mutations) {
          return _this.processMutations(mutations)
        })
      }

      ElementObserver.prototype.start = function () {
        if (!this.started) {
          this.started = true
          this.mutationObserver.observe(this.element, {attributes: true, childList: true, subtree: true})
          this.refresh()
        }
      }
      ElementObserver.prototype.stop = function () {
        if (this.started) {
          this.mutationObserver.takeRecords()
          this.mutationObserver.disconnect()
          this.started = false
        }
      }
      ElementObserver.prototype.refresh = function () {
        if (this.started) {
          var matches = new Set(this.matchElementsInTree())
          for (var _i = 0, _a = Array.from(this.elements); _i < _a.length; _i++) {
            var element = _a[_i]
            if (!matches.has(element)) {
              this.removeElement(element)
            }
          }
          for (var _b = 0, _c = Array.from(matches); _b < _c.length; _b++) {
            var element = _c[_b]
            this.addElement(element)
          }
        }
      }
      // Mutation record processing
      ElementObserver.prototype.processMutations = function (mutations) {
        if (this.started) {
          for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
            var mutation = mutations_1[_i]
            this.processMutation(mutation)
          }
        }
      }
      ElementObserver.prototype.processMutation = function (mutation) {
        if (mutation.type == 'attributes') {
          this.processAttributeChange(mutation.target, mutation.attributeName)
        } else if (mutation.type == 'childList') {
          this.processRemovedNodes(mutation.removedNodes)
          this.processAddedNodes(mutation.addedNodes)
        }
      }
      ElementObserver.prototype.processAttributeChange = function (node, attributeName) {
        var element = node
        if (this.elements.has(element)) {
          if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
            this.delegate.elementAttributeChanged(element, attributeName)
          } else {
            this.removeElement(element)
          }
        } else if (this.matchElement(element)) {
          this.addElement(element)
        }
      }
      ElementObserver.prototype.processRemovedNodes = function (nodes) {
        for (var _i = 0, _a = Array.from(nodes); _i < _a.length; _i++) {
          var node = _a[_i]
          var element = this.elementFromNode(node)
          if (element) {
            this.processTree(element, this.removeElement)
          }
        }
      }
      ElementObserver.prototype.processAddedNodes = function (nodes) {
        for (var _i = 0, _a = Array.from(nodes); _i < _a.length; _i++) {
          var node = _a[_i]
          var element = this.elementFromNode(node)
          if (element && this.elementIsActive(element)) {
            this.processTree(element, this.addElement)
          }
        }
      }
      // Element matching
      ElementObserver.prototype.matchElement = function (element) {
        return this.delegate.matchElement(element)
      }
      ElementObserver.prototype.matchElementsInTree = function (tree) {
        if (tree === void 0) {
          tree = this.element
        }
        return this.delegate.matchElementsInTree(tree)
      }
      ElementObserver.prototype.processTree = function (tree, processor) {
        for (var _i = 0, _a = this.matchElementsInTree(tree); _i < _a.length; _i++) {
          var element = _a[_i]
          processor.call(this, element)
        }
      }
      ElementObserver.prototype.elementFromNode = function (node) {
        if (node.nodeType == Node.ELEMENT_NODE) {
          return node
        }
      }
      ElementObserver.prototype.elementIsActive = function (element) {
        if (element.isConnected != this.element.isConnected) {
          return false
        } else {
          return this.element.contains(element)
        }
      }
      // Element tracking
      ElementObserver.prototype.addElement = function (element) {
        if (!this.elements.has(element)) {
          if (this.elementIsActive(element)) {
            this.elements.add(element)
            if (this.delegate.elementMatched) {
              this.delegate.elementMatched(element)
            }
          }
        }
      }
      ElementObserver.prototype.removeElement = function (element) {
        if (this.elements.has(element)) {
          this.elements.delete(element)
          if (this.delegate.elementUnmatched) {
            this.delegate.elementUnmatched(element)
          }
        }
      }
      return ElementObserver
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudF9vYnNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbGVtZW50X29ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBO0lBUUUseUJBQVksT0FBZ0IsRUFBRSxRQUFpQztRQUEvRCxpQkFPQztRQU5DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUE7UUFDdkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLENBQUMsVUFBQyxTQUFTLElBQUssT0FBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQTtJQUMvRixDQUFDO0lBRUQsK0JBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1lBQ25CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUNqRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7U0FDZjtJQUNILENBQUM7SUFFRCw4QkFBSSxHQUFKO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUE7WUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7U0FDckI7SUFDSCxDQUFDO0lBRUQsaUNBQU8sR0FBUDtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFBO1lBRW5ELEtBQXNCLFVBQXlCLEVBQXpCLEtBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQXpCLGNBQXlCLEVBQXpCLElBQXlCLEVBQUU7Z0JBQTVDLElBQU0sT0FBTyxTQUFBO2dCQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtpQkFDNUI7YUFDRjtZQUVELEtBQXNCLFVBQW1CLEVBQW5CLEtBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBbkIsY0FBbUIsRUFBbkIsSUFBbUIsRUFBRTtnQkFBdEMsSUFBTSxPQUFPLFNBQUE7Z0JBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7YUFDekI7U0FDRjtJQUNILENBQUM7SUFFRCw2QkFBNkI7SUFFckIsMENBQWdCLEdBQXhCLFVBQXlCLFNBQTJCO1FBQ2xELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixLQUF1QixVQUFTLEVBQVQsdUJBQVMsRUFBVCx1QkFBUyxFQUFULElBQVMsRUFBRTtnQkFBN0IsSUFBTSxRQUFRLGtCQUFBO2dCQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFBO2FBQy9CO1NBQ0Y7SUFDSCxDQUFDO0lBRU8seUNBQWUsR0FBdkIsVUFBd0IsUUFBd0I7UUFDOUMsSUFBSSxRQUFRLENBQUMsSUFBSSxJQUFJLFlBQVksRUFBRTtZQUNqQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsYUFBYyxDQUFDLENBQUE7U0FDdEU7YUFBTSxJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksV0FBVyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDL0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtTQUM1QztJQUNILENBQUM7SUFFTyxnREFBc0IsR0FBOUIsVUFBK0IsSUFBVSxFQUFFLGFBQXFCO1FBQzlELElBQU0sT0FBTyxHQUFHLElBQWUsQ0FBQTtRQUMvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN2RSxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQTthQUM5RDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2FBQzVCO1NBQ0Y7YUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUN6QjtJQUNILENBQUM7SUFFTyw2Q0FBbUIsR0FBM0IsVUFBNEIsS0FBZTtRQUN6QyxLQUFtQixVQUFpQixFQUFqQixLQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQWpCLGNBQWlCLEVBQWpCLElBQWlCLEVBQUU7WUFBakMsSUFBTSxJQUFJLFNBQUE7WUFDYixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzFDLElBQUksT0FBTyxFQUFFO2dCQUNYLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTthQUM5QztTQUNGO0lBQ0gsQ0FBQztJQUVPLDJDQUFpQixHQUF6QixVQUEwQixLQUFlO1FBQ3ZDLEtBQW1CLFVBQWlCLEVBQWpCLEtBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBakIsY0FBaUIsRUFBakIsSUFBaUIsRUFBRTtZQUFqQyxJQUFNLElBQUksU0FBQTtZQUNiLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDMUMsSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO2FBQzNDO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsbUJBQW1CO0lBRVgsc0NBQVksR0FBcEIsVUFBcUIsT0FBZ0I7UUFDbkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRU8sNkNBQW1CLEdBQTNCLFVBQTRCLElBQTRCO1FBQTVCLHFCQUFBLEVBQUEsT0FBZ0IsSUFBSSxDQUFDLE9BQU87UUFDdEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFTyxxQ0FBVyxHQUFuQixVQUFvQixJQUFhLEVBQUUsU0FBcUM7UUFDdEUsS0FBc0IsVUFBOEIsRUFBOUIsS0FBQSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQTlCLGNBQThCLEVBQTlCLElBQThCLEVBQUU7WUFBakQsSUFBTSxPQUFPLFNBQUE7WUFDaEIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7U0FDOUI7SUFDSCxDQUFDO0lBRU8seUNBQWUsR0FBdkIsVUFBd0IsSUFBVTtRQUNoQyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QyxPQUFPLElBQWUsQ0FBQTtTQUN2QjtJQUNILENBQUM7SUFFTyx5Q0FBZSxHQUF2QixVQUF3QixPQUFnQjtRQUN0QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDbkQsT0FBTyxLQUFLLENBQUE7U0FDYjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUN0QztJQUNILENBQUM7SUFFRCxtQkFBbUI7SUFFWCxvQ0FBVSxHQUFsQixVQUFtQixPQUFnQjtRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtvQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUE7aUJBQ3RDO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFTyx1Q0FBYSxHQUFyQixVQUFzQixPQUFnQjtRQUNwQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQzdCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTthQUN4QztTQUNGO0lBQ0gsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXRKRCxJQXNKQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/mutation-observers/dist/src/token_list_observer.js':
  /*!***********************************************************************************!*\
  !*** ./node_modules/@stimulus/mutation-observers/dist/src/token_list_observer.js ***!
  \***********************************************************************************/
  /*! exports provided: TokenListObserver */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'TokenListObserver', function () {
      return TokenListObserver
    })
    /* harmony import */
    var _attribute_observer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attribute_observer */ './node_modules/@stimulus/mutation-observers/dist/src/attribute_observer.js')
    /* harmony import */
    var _stimulus_multimap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stimulus/multimap */ './node_modules/@stimulus/multimap/dist/index.js')


    var TokenListObserver = /** @class */ (function () {
      function TokenListObserver (element, attributeName, delegate) {
        this.attributeObserver = new _attribute_observer__WEBPACK_IMPORTED_MODULE_0__['AttributeObserver'](element, attributeName, this)
        this.delegate = delegate
        this.tokensByElement = new _stimulus_multimap__WEBPACK_IMPORTED_MODULE_1__['Multimap']
      }

      Object.defineProperty(TokenListObserver.prototype, 'started', {
        get: function () {
          return this.attributeObserver.started
        },
        enumerable: true,
        configurable: true
      })
      TokenListObserver.prototype.start = function () {
        this.attributeObserver.start()
      }
      TokenListObserver.prototype.stop = function () {
        this.attributeObserver.stop()
      }
      TokenListObserver.prototype.refresh = function () {
        this.attributeObserver.refresh()
      }
      Object.defineProperty(TokenListObserver.prototype, 'element', {
        get: function () {
          return this.attributeObserver.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(TokenListObserver.prototype, 'attributeName', {
        get: function () {
          return this.attributeObserver.attributeName
        },
        enumerable: true,
        configurable: true
      })
      // Attribute observer delegate
      TokenListObserver.prototype.elementMatchedAttribute = function (element) {
        this.tokensMatched(this.readTokensForElement(element))
      }
      TokenListObserver.prototype.elementAttributeValueChanged = function (element) {
        var _a = this.refreshTokensForElement(element), unmatchedTokens = _a[0], matchedTokens = _a[1]
        this.tokensUnmatched(unmatchedTokens)
        this.tokensMatched(matchedTokens)
      }
      TokenListObserver.prototype.elementUnmatchedAttribute = function (element) {
        this.tokensUnmatched(this.tokensByElement.getValuesForKey(element))
      }
      TokenListObserver.prototype.tokensMatched = function (tokens) {
        var _this = this
        tokens.forEach(function (token) {
          return _this.tokenMatched(token)
        })
      }
      TokenListObserver.prototype.tokensUnmatched = function (tokens) {
        var _this = this
        tokens.forEach(function (token) {
          return _this.tokenUnmatched(token)
        })
      }
      TokenListObserver.prototype.tokenMatched = function (token) {
        this.delegate.tokenMatched(token)
        this.tokensByElement.add(token.element, token)
      }
      TokenListObserver.prototype.tokenUnmatched = function (token) {
        this.delegate.tokenUnmatched(token)
        this.tokensByElement.delete(token.element, token)
      }
      TokenListObserver.prototype.refreshTokensForElement = function (element) {
        var previousTokens = this.tokensByElement.getValuesForKey(element)
        var currentTokens = this.readTokensForElement(element)
        var firstDifferingIndex = zip(previousTokens, currentTokens)
          .findIndex(function (_a) {
            var previousToken = _a[0], currentToken = _a[1]
            return !tokensAreEqual(previousToken, currentToken)
          })
        if (firstDifferingIndex == -1) {
          return [[], []]
        } else {
          return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)]
        }
      }
      TokenListObserver.prototype.readTokensForElement = function (element) {
        var attributeName = this.attributeName
        var tokenString = element.getAttribute(attributeName) || ''
        return parseTokenString(tokenString, element, attributeName)
      }
      return TokenListObserver
    }())

    function parseTokenString (tokenString, element, attributeName) {
      return tokenString.trim().split(/\s+/).filter(function (content) {
        return content.length
      })
        .map(function (content, index) {
          return ({element: element, attributeName: attributeName, content: content, index: index})
        })
    }

    function zip (left, right) {
      var length = Math.max(left.length, right.length)
      return Array.from({length: length}, function (_, index) {
        return [left[index], right[index]]
      })
    }

    function tokensAreEqual (left, right) {
      return left && right && left.index == right.index && left.content == right.content
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5fbGlzdF9vYnNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b2tlbl9saXN0X29ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBNkIsTUFBTSxzQkFBc0IsQ0FBQTtBQUNuRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFjN0M7SUFLRSwyQkFBWSxPQUFnQixFQUFFLGFBQXFCLEVBQUUsUUFBbUM7UUFDdEYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUM1RSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksUUFBUSxDQUFBO0lBQ3JDLENBQUM7SUFFRCxzQkFBSSxzQ0FBTzthQUFYO1lBQ0UsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFBO1FBQ3ZDLENBQUM7OztPQUFBO0lBRUQsaUNBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsZ0NBQUksR0FBSjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0lBRUQsbUNBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNsQyxDQUFDO0lBRUQsc0JBQUksc0NBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQTtRQUN2QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDRDQUFhO2FBQWpCO1lBQ0UsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFBO1FBQzdDLENBQUM7OztPQUFBO0lBRUQsOEJBQThCO0lBRTlCLG1EQUF1QixHQUF2QixVQUF3QixPQUFnQjtRQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFFRCx3REFBNEIsR0FBNUIsVUFBNkIsT0FBZ0I7UUFDckMsSUFBQSwwQ0FBd0UsRUFBdkUsdUJBQWUsRUFBRSxxQkFBYSxDQUF5QztRQUM5RSxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVELHFEQUF5QixHQUF6QixVQUEwQixPQUFnQjtRQUN4QyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDckUsQ0FBQztJQUVPLHlDQUFhLEdBQXJCLFVBQXNCLE1BQWU7UUFBckMsaUJBRUM7UUFEQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFTywyQ0FBZSxHQUF2QixVQUF3QixNQUFlO1FBQXZDLGlCQUVDO1FBREMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQTFCLENBQTBCLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0lBRU8sd0NBQVksR0FBcEIsVUFBcUIsS0FBWTtRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFTywwQ0FBYyxHQUF0QixVQUF1QixLQUFZO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDbkQsQ0FBQztJQUVPLG1EQUF1QixHQUEvQixVQUFnQyxPQUFnQjtRQUM5QyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwRSxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDeEQsSUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQzthQUMzRCxTQUFTLENBQUMsVUFBQyxFQUE2QjtnQkFBNUIscUJBQWEsRUFBRSxvQkFBWTtZQUFNLE9BQUEsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztRQUE1QyxDQUE0QyxDQUFDLENBQUE7UUFFN0YsSUFBSSxtQkFBbUIsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1NBQ2hCO2FBQU07WUFDTCxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFBO1NBQzdGO0lBQ0gsQ0FBQztJQUVPLGdEQUFvQixHQUE1QixVQUE2QixPQUFnQjtRQUMzQyxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFBO1FBQ3hDLElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzdELE9BQU8sZ0JBQWdCLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUM5RCxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBdkZELElBdUZDOztBQUVELDBCQUEwQixXQUFtQixFQUFFLE9BQWdCLEVBQUUsYUFBcUI7SUFDcEYsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sQ0FBQyxNQUFNLEVBQWQsQ0FBYyxDQUFDO1NBQ3JFLEdBQUcsQ0FBQyxVQUFDLE9BQU8sRUFBRSxLQUFLLElBQUssT0FBQSxDQUFDLEVBQUUsT0FBTyxTQUFBLEVBQUUsYUFBYSxlQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxFQUE1QyxDQUE0QyxDQUFDLENBQUE7QUFDMUUsQ0FBQztBQUVELGFBQW1CLElBQVMsRUFBRSxLQUFVO0lBQ3RDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbEQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsRUFBRSxVQUFDLENBQUMsRUFBRSxLQUFLLElBQUssT0FBQSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQVcsRUFBckMsQ0FBcUMsQ0FBQyxDQUFBO0FBQ3BGLENBQUM7QUFFRCx3QkFBd0IsSUFBWSxFQUFFLEtBQWE7SUFDakQsT0FBTyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUE7QUFDcEYsQ0FBQyJ9

    /***/
  }),

  /***/ './node_modules/@stimulus/mutation-observers/dist/src/value_list_observer.js':
  /*!***********************************************************************************!*\
  !*** ./node_modules/@stimulus/mutation-observers/dist/src/value_list_observer.js ***!
  \***********************************************************************************/
  /*! exports provided: ValueListObserver */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'ValueListObserver', function () {
      return ValueListObserver
    })
    /* harmony import */
    var _token_list_observer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token_list_observer */ './node_modules/@stimulus/mutation-observers/dist/src/token_list_observer.js')

    var ValueListObserver = /** @class */ (function () {
      function ValueListObserver (element, attributeName, delegate) {
        this.tokenListObserver = new _token_list_observer__WEBPACK_IMPORTED_MODULE_0__['TokenListObserver'](element, attributeName, this)
        this.delegate = delegate
        this.parseResultsByToken = new WeakMap
        this.valuesByTokenByElement = new WeakMap
      }

      Object.defineProperty(ValueListObserver.prototype, 'started', {
        get: function () {
          return this.tokenListObserver.started
        },
        enumerable: true,
        configurable: true
      })
      ValueListObserver.prototype.start = function () {
        this.tokenListObserver.start()
      }
      ValueListObserver.prototype.stop = function () {
        this.tokenListObserver.stop()
      }
      ValueListObserver.prototype.refresh = function () {
        this.tokenListObserver.refresh()
      }
      Object.defineProperty(ValueListObserver.prototype, 'element', {
        get: function () {
          return this.tokenListObserver.element
        },
        enumerable: true,
        configurable: true
      })
      Object.defineProperty(ValueListObserver.prototype, 'attributeName', {
        get: function () {
          return this.tokenListObserver.attributeName
        },
        enumerable: true,
        configurable: true
      })
      ValueListObserver.prototype.tokenMatched = function (token) {
        var element = token.element
        var value = this.fetchParseResultForToken(token).value
        if (value) {
          this.fetchValuesByTokenForElement(element).set(token, value)
          this.delegate.elementMatchedValue(element, value)
        }
      }
      ValueListObserver.prototype.tokenUnmatched = function (token) {
        var element = token.element
        var value = this.fetchParseResultForToken(token).value
        if (value) {
          this.fetchValuesByTokenForElement(element).delete(token)
          this.delegate.elementUnmatchedValue(element, value)
        }
      }
      ValueListObserver.prototype.fetchParseResultForToken = function (token) {
        var parseResult = this.parseResultsByToken.get(token)
        if (!parseResult) {
          parseResult = this.parseToken(token)
          this.parseResultsByToken.set(token, parseResult)
        }
        return parseResult
      }
      ValueListObserver.prototype.fetchValuesByTokenForElement = function (element) {
        var valuesByToken = this.valuesByTokenByElement.get(element)
        if (!valuesByToken) {
          valuesByToken = new Map
          this.valuesByTokenByElement.set(element, valuesByToken)
        }
        return valuesByToken
      }
      ValueListObserver.prototype.parseToken = function (token) {
        try {
          var value = this.delegate.parseValueForToken(token)
          return {value: value}
        } catch (error) {
          return {error: error}
        }
      }
      return ValueListObserver
    }())

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWVfbGlzdF9vYnNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWx1ZV9saXN0X29ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBUyxpQkFBaUIsRUFBNkIsTUFBTSx1QkFBdUIsQ0FBQTtBQWEzRjtJQU1FLDJCQUFZLE9BQWdCLEVBQUUsYUFBcUIsRUFBRSxRQUFzQztRQUN6RixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzVFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLE9BQU8sQ0FBQTtRQUN0QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxPQUFPLENBQUE7SUFDM0MsQ0FBQztJQUVELHNCQUFJLHNDQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUE7UUFDdkMsQ0FBQzs7O09BQUE7SUFFRCxpQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ2hDLENBQUM7SUFFRCxnQ0FBSSxHQUFKO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFBO0lBQy9CLENBQUM7SUFFRCxtQ0FBTyxHQUFQO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2xDLENBQUM7SUFFRCxzQkFBSSxzQ0FBTzthQUFYO1lBQ0UsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFBO1FBQ3ZDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNENBQWE7YUFBakI7WUFDRSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUE7UUFDN0MsQ0FBQzs7O09BQUE7SUFFRCx3Q0FBWSxHQUFaLFVBQWEsS0FBWTtRQUNmLElBQUEsdUJBQU8sQ0FBVTtRQUNqQixJQUFBLGtEQUFLLENBQXlDO1FBQ3RELElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLDRCQUE0QixDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDNUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7U0FDbEQ7SUFDSCxDQUFDO0lBRUQsMENBQWMsR0FBZCxVQUFlLEtBQVk7UUFDakIsSUFBQSx1QkFBTyxDQUFVO1FBQ2pCLElBQUEsa0RBQUssQ0FBeUM7UUFDdEQsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3hELElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO1NBQ3BEO0lBQ0gsQ0FBQztJQUVPLG9EQUF3QixHQUFoQyxVQUFpQyxLQUFZO1FBQzNDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDckQsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNwQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQTtTQUNqRDtRQUNELE9BQU8sV0FBVyxDQUFBO0lBQ3BCLENBQUM7SUFFTyx3REFBNEIsR0FBcEMsVUFBcUMsT0FBZ0I7UUFDbkQsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM1RCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQTtZQUN2QixJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQTtTQUN4RDtRQUNELE9BQU8sYUFBYSxDQUFBO0lBQ3RCLENBQUM7SUFFTyxzQ0FBVSxHQUFsQixVQUFtQixLQUFZO1FBQzdCLElBQUk7WUFDRixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3JELE9BQU8sRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFBO1NBQ2pCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQTtTQUNqQjtJQUNILENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFqRkQsSUFpRkMifQ==

    /***/
  }),

  /***/ './node_modules/@stimulus/webpack-helpers/dist/index.js':
  /*!**************************************************************!*\
  !*** ./node_modules/@stimulus/webpack-helpers/dist/index.js ***!
  \**************************************************************/
  /*! exports provided: definitionsFromContext, identifierForContextKey */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'definitionsFromContext', function () {
      return definitionsFromContext
    })
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, 'identifierForContextKey', function () {
      return identifierForContextKey
    })

    function definitionsFromContext (context) {
      return context.keys()
        .map(function (key) {
          return definitionForModuleWithContextAndKey(context, key)
        })
        .filter(function (value) {
          return value
        })
    }

    function definitionForModuleWithContextAndKey (context, key) {
      var identifier = identifierForContextKey(key)
      if (identifier) {
        return definitionForModuleAndIdentifier(context(key), identifier)
      }
    }

    function definitionForModuleAndIdentifier (module, identifier) {
      var controllerConstructor = module.default
      if (typeof controllerConstructor == 'function') {
        return {identifier: identifier, controllerConstructor: controllerConstructor}
      }
    }

    function identifierForContextKey (key) {
      var logicalName = (key.match(/^(?:\.\/)?(.+)(?:[_-]controller\..+?)$/) || [])[1]
      if (logicalName) {
        return logicalName.replace(/_/g, '-').replace(/\//g, '--')
      }
    }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLGlDQUFpQyxPQUEwQztJQUMvRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUU7U0FDbEIsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsb0NBQW9DLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFsRCxDQUFrRCxDQUFDO1NBQzlELE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssRUFBTCxDQUFLLENBQWlCLENBQUE7QUFDM0MsQ0FBQztBQUVELDhDQUE4QyxPQUEwQyxFQUFFLEdBQVc7SUFDbkcsSUFBTSxVQUFVLEdBQUcsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDL0MsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLGdDQUFnQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQTtLQUNsRTtBQUNILENBQUM7QUFFRCwwQ0FBMEMsTUFBd0IsRUFBRSxVQUFrQjtJQUNwRixJQUFNLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUE7SUFDNUMsSUFBSSxPQUFPLHFCQUFxQixJQUFJLFVBQVUsRUFBRTtRQUM5QyxPQUFPLEVBQUUsVUFBVSxZQUFBLEVBQUUscUJBQXFCLHVCQUFBLEVBQUUsQ0FBQTtLQUM3QztBQUNILENBQUM7QUFFRCxNQUFNLGtDQUFrQyxHQUFXO0lBQ2pELElBQU0sV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2xGLElBQUksV0FBVyxFQUFFO1FBQ2YsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO0tBQzNEO0FBQ0gsQ0FBQyJ9

    /***/
  }),

  /***/ './node_modules/@symfony/controllers.js':
  /*!**********************************************!*\
  !*** ./node_modules/@symfony/controllers.js ***!
  \**********************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

    module.exports = {
      '@symfony/ux-chartjs/chart': Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(null, /*! @symfony/ux-chartjs/dist/controller.js */ './node_modules/@symfony/ux-chartjs/dist/controller.js', 7))
    }

    /***/
  }),

  /***/ './node_modules/@symfony/stimulus-bridge/dist/index.js':
  /*!*************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/dist/index.js ***!
  \*************************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

    'use strict'
    /*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */


    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports.startStimulusApp = startStimulusApp

    var _stimulus = __webpack_require__(/*! stimulus */ './node_modules/stimulus/index.js')

    var _webpackHelpers = __webpack_require__(/*! stimulus/webpack-helpers */ './node_modules/stimulus/webpack-helpers.js')

    var _controllers = _interopRequireDefault(__webpack_require__(/*! @symfony/controllers */ './node_modules/@symfony/controllers.js'))

    function _interopRequireDefault (obj) {
      return obj && obj.__esModule ? obj : {'default': obj}
    }

    function startStimulusApp (context) {
      var application = _stimulus.Application.start()

      application.load((0, _webpackHelpers.definitionsFromContext)(context))

      var _loop = function _loop (controllerName) {
        if (!_controllers['default'].hasOwnProperty(controllerName)) {
          return 'continue'
        }

        _controllers['default'][controllerName].then(function (module) {
          application.register(controllerName, module['default'])
        })
      }

      for (var controllerName in _controllers['default']) {
        var _ret = _loop(controllerName)

        if (_ret === 'continue') continue
      }

      return application
    }

    /***/
  }),

  /***/ './node_modules/@symfony/ux-chartjs/dist/controller.js':
  /*!*************************************************************!*\
  !*** ./node_modules/@symfony/ux-chartjs/dist/controller.js ***!
  \*************************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

    'use strict'

    /*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */


    function _typeof (obj) {
      '@babel/helpers - typeof'
      if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
        _typeof = function _typeof (obj) {
          return typeof obj
        }
      } else {
        _typeof = function _typeof (obj) {
          return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj
        }
      }
      return _typeof(obj)
    }

    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _stimulus = __webpack_require__(/*! stimulus */ './node_modules/stimulus/index.js')

    var _chart = __webpack_require__(/*! chart.js */ './node_modules/chart.js/dist/Chart.js')

    function _classCallCheck (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
      }
    }

    function _defineProperties (target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, descriptor.key, descriptor)
      }
    }

    function _createClass (Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps)
      if (staticProps) _defineProperties(Constructor, staticProps)
      return Constructor
    }

    function _inherits (subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      })
      if (superClass) _setPrototypeOf(subClass, superClass)
    }

    function _setPrototypeOf (o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf (o, p) {
        o.__proto__ = p
        return o
      }
      return _setPrototypeOf(o, p)
    }

    function _createSuper (Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct()
      return function _createSuperInternal () {
        var Super = _getPrototypeOf(Derived), result
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor
          result = Reflect.construct(Super, arguments, NewTarget)
        } else {
          result = Super.apply(this, arguments)
        }
        return _possibleConstructorReturn(this, result)
      }
    }

    function _possibleConstructorReturn (self, call) {
      if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
        return call
      }
      return _assertThisInitialized(self)
    }

    function _assertThisInitialized (self) {
      if (self === void 0) {
        throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called')
      }
      return self
    }

    function _isNativeReflectConstruct () {
      if (typeof Reflect === 'undefined' || !Reflect.construct) return false
      if (Reflect.construct.sham) return false
      if (typeof Proxy === 'function') return true
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {
        }))
        return true
      } catch (e) {
        return false
      }
    }

    function _getPrototypeOf (o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf (o) {
        return o.__proto__ || Object.getPrototypeOf(o)
      }
      return _getPrototypeOf(o)
    }

    var _default = /*#__PURE__*/function (_Controller) {
      _inherits(_default, _Controller)

      var _super = _createSuper(_default)

      function _default () {
        _classCallCheck(this, _default)

        return _super.apply(this, arguments)
      }

      _createClass(_default, [{
        key: 'connect',
        value: function connect () {
          var payload = JSON.parse(this.element.getAttribute('data-view'))

          if (!payload.options.length) {
            payload.options = {}
          }

          var chart = new _chart.Chart(this.element.getContext('2d'), payload)

          this._dispatchEvent('chartjs:connect', {
            chart: chart
          })
        }
      }, {
        key: '_dispatchEvent',
        value: function _dispatchEvent (name) {
          var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null
          var canBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false
          var cancelable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false
          var userEvent = document.createEvent('CustomEvent')
          userEvent.initCustomEvent(name, canBubble, cancelable, payload)
          this.element.dispatchEvent(userEvent)
        }
      }])

      return _default
    }(_stimulus.Controller)

    exports['default'] = _default

    /***/
  }),

  /***/ './node_modules/bootstrap-select/dist/css/bootstrap-select.min.css':
  /*!*************************************************************************!*\
  !*** ./node_modules/bootstrap-select/dist/css/bootstrap-select.min.css ***!
  \*************************************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

    /***/
  }),

  /***/ './node_modules/bootstrap-select/dist/js/bootstrap-select.js':
  /*!*******************************************************************!*\
  !*** ./node_modules/bootstrap-select/dist/js/bootstrap-select.js ***!
  \*******************************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

    var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Bootstrap-select v1.13.18 (https://developer.snapappointments.com/bootstrap-select)
 *
 * Copyright 2012-2020 SnapAppointments, LLC
 * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
 */

    (function (root, factory) {
      if (root === undefined && window !== undefined) root = window
      if (true) {
        // AMD. Register as an anonymous module unless amdModuleId is set
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ './node_modules/jquery/dist/jquery.js')], __WEBPACK_AMD_DEFINE_RESULT__ = (function (a0) {
          return (factory(a0))
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
      } else {
      }
    }(this, function (jQuery) {

      (function ($) {
        'use strict'

        var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn']

        var uriAttrs = [
          'background',
          'cite',
          'href',
          'itemtype',
          'longdesc',
          'poster',
          'src',
          'xlink:href'
        ]

        var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i

        var DefaultWhitelist = {
          // Global attributes allowed on any supplied element below.
          '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN],
          a: ['target', 'href', 'title', 'rel'],
          area: [],
          b: [],
          br: [],
          col: [],
          code: [],
          div: [],
          em: [],
          hr: [],
          h1: [],
          h2: [],
          h3: [],
          h4: [],
          h5: [],
          h6: [],
          i: [],
          img: ['src', 'alt', 'title', 'width', 'height'],
          li: [],
          ol: [],
          p: [],
          pre: [],
          s: [],
          small: [],
          span: [],
          sub: [],
          sup: [],
          strong: [],
          u: [],
          ul: []
        }

        /**
         * A pattern that recognizes a commonly useful subset of URLs that are safe.
         *
         * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
         */
        var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi

        /**
         * A pattern that matches safe data URLs. Only matches image, video and audio types.
         *
         * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
         */
        var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i

        function allowedAttribute (attr, allowedAttributeList) {
          var attrName = attr.nodeName.toLowerCase()

          if ($.inArray(attrName, allowedAttributeList) !== -1) {
            if ($.inArray(attrName, uriAttrs) !== -1) {
              return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
            }

            return true
          }

          var regExp = $(allowedAttributeList).filter(function (index, value) {
            return value instanceof RegExp
          })

          // Check if a regular expression validates the attribute.
          for (var i = 0, l = regExp.length; i < l; i++) {
            if (attrName.match(regExp[i])) {
              return true
            }
          }

          return false
        }

        function sanitizeHtml (unsafeElements, whiteList, sanitizeFn) {
          if (sanitizeFn && typeof sanitizeFn === 'function') {
            return sanitizeFn(unsafeElements)
          }

          var whitelistKeys = Object.keys(whiteList)

          for (var i = 0, len = unsafeElements.length; i < len; i++) {
            var elements = unsafeElements[i].querySelectorAll('*')

            for (var j = 0, len2 = elements.length; j < len2; j++) {
              var el = elements[j]
              var elName = el.nodeName.toLowerCase()

              if (whitelistKeys.indexOf(elName) === -1) {
                el.parentNode.removeChild(el)

                continue
              }

              var attributeList = [].slice.call(el.attributes)
              var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || [])

              for (var k = 0, len3 = attributeList.length; k < len3; k++) {
                var attr = attributeList[k]

                if (!allowedAttribute(attr, whitelistedAttributes)) {
                  el.removeAttribute(attr.nodeName)
                }
              }
            }
          }
        }

        // Polyfill for browsers with no classList support
        // Remove in v2
        if (!('classList' in document.createElement('_'))) {
          (function (view) {
            if (!('Element' in view)) return

            var classListProp = 'classList',
              protoProp = 'prototype',
              elemCtrProto = view.Element[protoProp],
              objCtr = Object,
              classListGetter = function () {
                var $elem = $(this)

                return {
                  add: function (classes) {
                    classes = Array.prototype.slice.call(arguments).join(' ')
                    return $elem.addClass(classes)
                  },
                  remove: function (classes) {
                    classes = Array.prototype.slice.call(arguments).join(' ')
                    return $elem.removeClass(classes)
                  },
                  toggle: function (classes, force) {
                    return $elem.toggleClass(classes, force)
                  },
                  contains: function (classes) {
                    return $elem.hasClass(classes)
                  }
                }
              }

            if (objCtr.defineProperty) {
              var classListPropDesc = {
                get: classListGetter,
                enumerable: true,
                configurable: true
              }
              try {
                objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc)
              } catch (ex) { // IE 8 doesn't support enumerable:true
                // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
                // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
                if (ex.number === undefined || ex.number === -0x7FF5EC54) {
                  classListPropDesc.enumerable = false
                  objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc)
                }
              }
            } else if (objCtr[protoProp].__defineGetter__) {
              elemCtrProto.__defineGetter__(classListProp, classListGetter)
            }
          }(window))
        }

        var testElement = document.createElement('_')

        testElement.classList.add('c1', 'c2')

        if (!testElement.classList.contains('c2')) {
          var _add = DOMTokenList.prototype.add,
            _remove = DOMTokenList.prototype.remove

          DOMTokenList.prototype.add = function () {
            Array.prototype.forEach.call(arguments, _add.bind(this))
          }

          DOMTokenList.prototype.remove = function () {
            Array.prototype.forEach.call(arguments, _remove.bind(this))
          }
        }

        testElement.classList.toggle('c3', false)

        // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
        // support the second argument.
        if (testElement.classList.contains('c3')) {
          var _toggle = DOMTokenList.prototype.toggle

          DOMTokenList.prototype.toggle = function (token, force) {
            if (1 in arguments && !this.contains(token) === !force) {
              return force
            } else {
              return _toggle.call(this, token)
            }
          }
        }

        testElement = null

        // shallow array comparison
        function isEqual (array1, array2) {
          return array1.length === array2.length && array1.every(function (element, index) {
            return element === array2[index]
          })
        }

        // <editor-fold desc="Shims">
        if (!String.prototype.startsWith) {
          (function () {
            'use strict' // needed to support `apply`/`call` with `undefined`/`null`
            var defineProperty = (function () {
              // IE 8 only supports `Object.defineProperty` on DOM elements
              try {
                var object = {}
                var $defineProperty = Object.defineProperty
                var result = $defineProperty(object, object, object) && $defineProperty
              } catch (error) {
              }
              return result
            }())
            var toString = {}.toString
            var startsWith = function (search) {
              if (this == null) {
                throw new TypeError()
              }
              var string = String(this)
              if (search && toString.call(search) == '[object RegExp]') {
                throw new TypeError()
              }
              var stringLength = string.length
              var searchString = String(search)
              var searchLength = searchString.length
              var position = arguments.length > 1 ? arguments[1] : undefined
              // `ToInteger`
              var pos = position ? Number(position) : 0
              if (pos != pos) { // better `isNaN`
                pos = 0
              }
              var start = Math.min(Math.max(pos, 0), stringLength)
              // Avoid the `indexOf` call if no match is possible
              if (searchLength + start > stringLength) {
                return false
              }
              var index = -1
              while (++index < searchLength) {
                if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
                  return false
                }
              }
              return true
            }
            if (defineProperty) {
              defineProperty(String.prototype, 'startsWith', {
                'value': startsWith,
                'configurable': true,
                'writable': true
              })
            } else {
              String.prototype.startsWith = startsWith
            }
          }())
        }

        if (!Object.keys) {
          Object.keys = function (
            o, // object
            k, // key
            r  // result array
          ) {
            // initialize object and result
            r = []
            // iterate over object keys
            for (k in o) {
              // fill result array with non-prototypical keys
              r.hasOwnProperty.call(o, k) && r.push(k)
            }
            // return result
            return r
          }
        }

        if (HTMLSelectElement && !HTMLSelectElement.prototype.hasOwnProperty('selectedOptions')) {
          Object.defineProperty(HTMLSelectElement.prototype, 'selectedOptions', {
            get: function () {
              return this.querySelectorAll(':checked')
            }
          })
        }

        function getSelectedOptions (select, ignoreDisabled) {
          var selectedOptions = select.selectedOptions,
            options = [],
            opt

          if (ignoreDisabled) {
            for (var i = 0, len = selectedOptions.length; i < len; i++) {
              opt = selectedOptions[i]

              if (!(opt.disabled || opt.parentNode.tagName === 'OPTGROUP' && opt.parentNode.disabled)) {
                options.push(opt)
              }
            }

            return options
          }

          return selectedOptions
        }

        // much faster than $.val()
        function getSelectValues (select, selectedOptions) {
          var value = [],
            options = selectedOptions || select.selectedOptions,
            opt

          for (var i = 0, len = options.length; i < len; i++) {
            opt = options[i]

            if (!(opt.disabled || opt.parentNode.tagName === 'OPTGROUP' && opt.parentNode.disabled)) {
              value.push(opt.value)
            }
          }

          if (!select.multiple) {
            return !value.length ? null : value[0]
          }

          return value
        }

        // set data-selected on select element if the value has been programmatically selected
        // prior to initialization of bootstrap-select
        // * consider removing or replacing an alternative method *
        var valHooks = {
          useDefault: false,
          _set: $.valHooks.select.set
        }

        $.valHooks.select.set = function (elem, value) {
          if (value && !valHooks.useDefault) $(elem).data('selected', true)

          return valHooks._set.apply(this, arguments)
        }

        var changedArguments = null

        var EventIsSupported = (function () {
          try {
            new Event('change')
            return true
          } catch (e) {
            return false
          }
        })()

        $.fn.triggerNative = function (eventName) {
          var el = this[0],
            event

          if (el.dispatchEvent) { // for modern browsers & IE9+
            if (EventIsSupported) {
              // For modern browsers
              event = new Event(eventName, {
                bubbles: true
              })
            } else {
              // For IE since it doesn't support Event constructor
              event = document.createEvent('Event')
              event.initEvent(eventName, true, false)
            }

            el.dispatchEvent(event)
          } else if (el.fireEvent) { // for IE8
            event = document.createEventObject()
            event.eventType = eventName
            el.fireEvent('on' + eventName, event)
          } else {
            // fall back to jQuery.trigger
            this.trigger(eventName)
          }
        }

        // </editor-fold>

        function stringSearch (li, searchString, method, normalize) {
          var stringTypes = [
              'display',
              'subtext',
              'tokens'
            ],
            searchSuccess = false

          for (var i = 0; i < stringTypes.length; i++) {
            var stringType = stringTypes[i],
              string = li[stringType]

            if (string) {
              string = string.toString()

              // Strip HTML tags. This isn't perfect, but it's much faster than any other method
              if (stringType === 'display') {
                string = string.replace(/<[^>]+>/g, '')
              }

              if (normalize) string = normalizeToBase(string)
              string = string.toUpperCase()

              if (method === 'contains') {
                searchSuccess = string.indexOf(searchString) >= 0
              } else {
                searchSuccess = string.startsWith(searchString)
              }

              if (searchSuccess) break
            }
          }

          return searchSuccess
        }

        function toInteger (value) {
          return parseInt(value, 10) || 0
        }

        // Borrowed from Lodash (_.deburr)
        /** Used to map Latin Unicode letters to basic Latin letters. */
        var deburredLetters = {
          // Latin-1 Supplement block.
          '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
          '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
          '\xc7': 'C', '\xe7': 'c',
          '\xd0': 'D', '\xf0': 'd',
          '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
          '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
          '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
          '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
          '\xd1': 'N', '\xf1': 'n',
          '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
          '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
          '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
          '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
          '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
          '\xc6': 'Ae', '\xe6': 'ae',
          '\xde': 'Th', '\xfe': 'th',
          '\xdf': 'ss',
          // Latin Extended-A block.
          '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
          '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
          '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
          '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
          '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
          '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
          '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
          '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
          '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
          '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
          '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
          '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
          '\u0134': 'J', '\u0135': 'j',
          '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
          '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
          '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
          '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
          '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
          '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
          '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
          '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
          '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
          '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
          '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
          '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
          '\u0163': 't', '\u0165': 't', '\u0167': 't',
          '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
          '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
          '\u0174': 'W', '\u0175': 'w',
          '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
          '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
          '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
          '\u0132': 'IJ', '\u0133': 'ij',
          '\u0152': 'Oe', '\u0153': 'oe',
          '\u0149': '\'n', '\u017f': 's'
        }

        /** Used to match Latin Unicode letters (excluding mathematical operators). */
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g

        /** Used to compose unicode character classes. */
        var rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboMarksExtendedRange = '\\u1ab0-\\u1aff',
          rsComboMarksSupplementRange = '\\u1dc0-\\u1dff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange

        /** Used to compose unicode capture groups. */
        var rsCombo = '[' + rsComboRange + ']'

        /**
         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
         */
        var reComboMark = RegExp(rsCombo, 'g')

        function deburrLetter (key) {
          return deburredLetters[key]
        }

        function normalizeToBase (string) {
          string = string.toString()
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '')
        }

        // List of HTML entities for escaping.
        var escapeMap = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#x27;',
          '`': '&#x60;'
        }

        // Functions for escaping and unescaping strings to/from HTML interpolation.
        var createEscaper = function (map) {
          var escaper = function (match) {
            return map[match]
          }
          // Regexes for identifying a key that needs to be escaped.
          var source = '(?:' + Object.keys(map).join('|') + ')'
          var testRegexp = RegExp(source)
          var replaceRegexp = RegExp(source, 'g')
          return function (string) {
            string = string == null ? '' : '' + string
            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string
          }
        }

        var htmlEscape = createEscaper(escapeMap)

        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */

        var keyCodeMap = {
          32: ' ',
          48: '0',
          49: '1',
          50: '2',
          51: '3',
          52: '4',
          53: '5',
          54: '6',
          55: '7',
          56: '8',
          57: '9',
          59: ';',
          65: 'A',
          66: 'B',
          67: 'C',
          68: 'D',
          69: 'E',
          70: 'F',
          71: 'G',
          72: 'H',
          73: 'I',
          74: 'J',
          75: 'K',
          76: 'L',
          77: 'M',
          78: 'N',
          79: 'O',
          80: 'P',
          81: 'Q',
          82: 'R',
          83: 'S',
          84: 'T',
          85: 'U',
          86: 'V',
          87: 'W',
          88: 'X',
          89: 'Y',
          90: 'Z',
          96: '0',
          97: '1',
          98: '2',
          99: '3',
          100: '4',
          101: '5',
          102: '6',
          103: '7',
          104: '8',
          105: '9'
        }

        var keyCodes = {
          ESCAPE: 27, // KeyboardEvent.which value for Escape (Esc) key
          ENTER: 13, // KeyboardEvent.which value for Enter key
          SPACE: 32, // KeyboardEvent.which value for space key
          TAB: 9, // KeyboardEvent.which value for tab key
          ARROW_UP: 38, // KeyboardEvent.which value for up arrow key
          ARROW_DOWN: 40 // KeyboardEvent.which value for down arrow key
        }

        var version = {
          success: false,
          major: '3'
        }

        try {
          version.full = ($.fn.dropdown.Constructor.VERSION || '').split(' ')[0].split('.')
          version.major = version.full[0]
          version.success = true
        } catch (err) {
          // do nothing
        }

        var selectId = 0

        var EVENT_KEY = '.bs.select'

        var classNames = {
          DISABLED: 'disabled',
          DIVIDER: 'divider',
          SHOW: 'open',
          DROPUP: 'dropup',
          MENU: 'dropdown-menu',
          MENURIGHT: 'dropdown-menu-right',
          MENULEFT: 'dropdown-menu-left',
          // to-do: replace with more advanced template/customization options
          BUTTONCLASS: 'btn-default',
          POPOVERHEADER: 'popover-title',
          ICONBASE: 'glyphicon',
          TICKICON: 'glyphicon-ok'
        }

        var Selector = {
          MENU: '.' + classNames.MENU
        }

        var elementTemplates = {
          div: document.createElement('div'),
          span: document.createElement('span'),
          i: document.createElement('i'),
          subtext: document.createElement('small'),
          a: document.createElement('a'),
          li: document.createElement('li'),
          whitespace: document.createTextNode('\u00A0'),
          fragment: document.createDocumentFragment()
        }

        elementTemplates.noResults = elementTemplates.li.cloneNode(false)
        elementTemplates.noResults.className = 'no-results'

        elementTemplates.a.setAttribute('role', 'option')
        elementTemplates.a.className = 'dropdown-item'

        elementTemplates.subtext.className = 'text-muted'

        elementTemplates.text = elementTemplates.span.cloneNode(false)
        elementTemplates.text.className = 'text'

        elementTemplates.checkMark = elementTemplates.span.cloneNode(false)

        var REGEXP_ARROW = new RegExp(keyCodes.ARROW_UP + '|' + keyCodes.ARROW_DOWN)
        var REGEXP_TAB_OR_ESCAPE = new RegExp('^' + keyCodes.TAB + '$|' + keyCodes.ESCAPE)

        var generateOption = {
          li: function (content, classes, optgroup) {
            var li = elementTemplates.li.cloneNode(false)

            if (content) {
              if (content.nodeType === 1 || content.nodeType === 11) {
                li.appendChild(content)
              } else {
                li.innerHTML = content
              }
            }

            if (typeof classes !== 'undefined' && classes !== '') li.className = classes
            if (typeof optgroup !== 'undefined' && optgroup !== null) li.classList.add('optgroup-' + optgroup)

            return li
          },

          a: function (text, classes, inline) {
            var a = elementTemplates.a.cloneNode(true)

            if (text) {
              if (text.nodeType === 11) {
                a.appendChild(text)
              } else {
                a.insertAdjacentHTML('beforeend', text)
              }
            }

            if (typeof classes !== 'undefined' && classes !== '') a.classList.add.apply(a.classList, classes.split(/\s+/))
            if (inline) a.setAttribute('style', inline)

            return a
          },

          text: function (options, useFragment) {
            var textElement = elementTemplates.text.cloneNode(false),
              subtextElement,
              iconElement

            if (options.content) {
              textElement.innerHTML = options.content
            } else {
              textElement.textContent = options.text

              if (options.icon) {
                var whitespace = elementTemplates.whitespace.cloneNode(false)

                // need to use <i> for icons in the button to prevent a breaking change
                // note: switch to span in next major release
                iconElement = (useFragment === true ? elementTemplates.i : elementTemplates.span).cloneNode(false)
                iconElement.className = this.options.iconBase + ' ' + options.icon

                elementTemplates.fragment.appendChild(iconElement)
                elementTemplates.fragment.appendChild(whitespace)
              }

              if (options.subtext) {
                subtextElement = elementTemplates.subtext.cloneNode(false)
                subtextElement.textContent = options.subtext
                textElement.appendChild(subtextElement)
              }
            }

            if (useFragment === true) {
              while (textElement.childNodes.length > 0) {
                elementTemplates.fragment.appendChild(textElement.childNodes[0])
              }
            } else {
              elementTemplates.fragment.appendChild(textElement)
            }

            return elementTemplates.fragment
          },

          label: function (options) {
            var textElement = elementTemplates.text.cloneNode(false),
              subtextElement,
              iconElement

            textElement.innerHTML = options.display

            if (options.icon) {
              var whitespace = elementTemplates.whitespace.cloneNode(false)

              iconElement = elementTemplates.span.cloneNode(false)
              iconElement.className = this.options.iconBase + ' ' + options.icon

              elementTemplates.fragment.appendChild(iconElement)
              elementTemplates.fragment.appendChild(whitespace)
            }

            if (options.subtext) {
              subtextElement = elementTemplates.subtext.cloneNode(false)
              subtextElement.textContent = options.subtext
              textElement.appendChild(subtextElement)
            }

            elementTemplates.fragment.appendChild(textElement)

            return elementTemplates.fragment
          }
        }

        function showNoResults (searchMatch, searchValue) {
          if (!searchMatch.length) {
            elementTemplates.noResults.innerHTML = this.options.noneResultsText.replace('{0}', '"' + htmlEscape(searchValue) + '"')
            this.$menuInner[0].firstChild.appendChild(elementTemplates.noResults)
          }
        }

        var Selectpicker = function (element, options) {
          var that = this

          // bootstrap-select has been initialized - revert valHooks.select.set back to its original function
          if (!valHooks.useDefault) {
            $.valHooks.select.set = valHooks._set
            valHooks.useDefault = true
          }

          this.$element = $(element)
          this.$newElement = null
          this.$button = null
          this.$menu = null
          this.options = options
          this.selectpicker = {
            main: {},
            search: {},
            current: {}, // current changes if a search is in progress
            view: {},
            isSearching: false,
            keydown: {
              keyHistory: '',
              resetKeyHistory: {
                start: function () {
                  return setTimeout(function () {
                    that.selectpicker.keydown.keyHistory = ''
                  }, 800)
                }
              }
            }
          }

          this.sizeInfo = {}

          // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a
          // data-attribute)
          if (this.options.title === null) {
            this.options.title = this.$element.attr('title')
          }

          // Format window padding
          var winPad = this.options.windowPadding
          if (typeof winPad === 'number') {
            this.options.windowPadding = [winPad, winPad, winPad, winPad]
          }

          // Expose public methods
          this.val = Selectpicker.prototype.val
          this.render = Selectpicker.prototype.render
          this.refresh = Selectpicker.prototype.refresh
          this.setStyle = Selectpicker.prototype.setStyle
          this.selectAll = Selectpicker.prototype.selectAll
          this.deselectAll = Selectpicker.prototype.deselectAll
          this.destroy = Selectpicker.prototype.destroy
          this.remove = Selectpicker.prototype.remove
          this.show = Selectpicker.prototype.show
          this.hide = Selectpicker.prototype.hide

          this.init()
        }

        Selectpicker.VERSION = '1.13.18'

        // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.
        Selectpicker.DEFAULTS = {
          noneSelectedText: 'Nothing selected',
          noneResultsText: 'No results matched {0}',
          countSelectedText: function (numSelected, numTotal) {
            return (numSelected == 1) ? '{0} item selected' : '{0} items selected'
          },
          maxOptionsText: function (numAll, numGroup) {
            return [
              (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
              (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
            ]
          },
          selectAllText: 'Select All',
          deselectAllText: 'Deselect All',
          doneButton: false,
          doneButtonText: 'Close',
          multipleSeparator: ', ',
          styleBase: 'btn',
          style: classNames.BUTTONCLASS,
          size: 'auto',
          title: null,
          selectedTextFormat: 'values',
          width: false,
          container: false,
          hideDisabled: false,
          showSubtext: false,
          showIcon: true,
          showContent: true,
          dropupAuto: true,
          header: false,
          liveSearch: false,
          liveSearchPlaceholder: null,
          liveSearchNormalize: false,
          liveSearchStyle: 'contains',
          actionsBox: false,
          iconBase: classNames.ICONBASE,
          tickIcon: classNames.TICKICON,
          showTick: false,
          template: {
            caret: '<span class="caret"></span>'
          },
          maxOptions: false,
          mobile: false,
          selectOnTab: false,
          dropdownAlignRight: false,
          windowPadding: 0,
          virtualScroll: 600,
          display: false,
          sanitize: true,
          sanitizeFn: null,
          whiteList: DefaultWhitelist
        }

        Selectpicker.prototype = {

          constructor: Selectpicker,

          init: function () {
            var that = this,
              id = this.$element.attr('id'),
              element = this.$element[0],
              form = element.form

            selectId++
            this.selectId = 'bs-select-' + selectId

            element.classList.add('bs-select-hidden')

            this.multiple = this.$element.prop('multiple')
            this.autofocus = this.$element.prop('autofocus')

            if (element.classList.contains('show-tick')) {
              this.options.showTick = true
            }

            this.$newElement = this.createDropdown()
            this.buildData()
            this.$element
              .after(this.$newElement)
              .prependTo(this.$newElement)

            // ensure select is associated with form element if it got unlinked after moving it inside newElement
            if (form && element.form === null) {
              if (!form.id) form.id = 'form-' + this.selectId
              element.setAttribute('form', form.id)
            }

            this.$button = this.$newElement.children('button')
            this.$menu = this.$newElement.children(Selector.MENU)
            this.$menuInner = this.$menu.children('.inner')
            this.$searchbox = this.$menu.find('input')

            element.classList.remove('bs-select-hidden')

            if (this.options.dropdownAlignRight === true) this.$menu[0].classList.add(classNames.MENURIGHT)

            if (typeof id !== 'undefined') {
              this.$button.attr('data-id', id)
            }

            this.checkDisabled()
            this.clickListener()

            if (this.options.liveSearch) {
              this.liveSearchListener()
              this.focusedParent = this.$searchbox[0]
            } else {
              this.focusedParent = this.$menuInner[0]
            }

            this.setStyle()
            this.render()
            this.setWidth()
            if (this.options.container) {
              this.selectPosition()
            } else {
              this.$element.on('hide' + EVENT_KEY, function () {
                if (that.isVirtual()) {
                  // empty menu on close
                  var menuInner = that.$menuInner[0],
                    emptyMenu = menuInner.firstChild.cloneNode(false)

                  // replace the existing UL with an empty one - this is faster than $.empty() or innerHTML = ''
                  menuInner.replaceChild(emptyMenu, menuInner.firstChild)
                  menuInner.scrollTop = 0
                }
              })
            }
            this.$menu.data('this', this)
            this.$newElement.data('this', this)
            if (this.options.mobile) this.mobile()

            this.$newElement.on({
              'hide.bs.dropdown': function (e) {
                that.$element.trigger('hide' + EVENT_KEY, e)
              },
              'hidden.bs.dropdown': function (e) {
                that.$element.trigger('hidden' + EVENT_KEY, e)
              },
              'show.bs.dropdown': function (e) {
                that.$element.trigger('show' + EVENT_KEY, e)
              },
              'shown.bs.dropdown': function (e) {
                that.$element.trigger('shown' + EVENT_KEY, e)
              }
            })

            if (element.hasAttribute('required')) {
              this.$element.on('invalid' + EVENT_KEY, function () {
                that.$button[0].classList.add('bs-invalid')

                that.$element
                  .on('shown' + EVENT_KEY + '.invalid', function () {
                    that.$element
                      .val(that.$element.val()) // set the value to hide the validation message in Chrome when menu is opened
                      .off('shown' + EVENT_KEY + '.invalid')
                  })
                  .on('rendered' + EVENT_KEY, function () {
                    // if select is no longer invalid, remove the bs-invalid class
                    if (this.validity.valid) that.$button[0].classList.remove('bs-invalid')
                    that.$element.off('rendered' + EVENT_KEY)
                  })

                that.$button.on('blur' + EVENT_KEY, function () {
                  that.$element.trigger('focus').trigger('blur')
                  that.$button.off('blur' + EVENT_KEY)
                })
              })
            }

            setTimeout(function () {
              that.buildList()
              that.$element.trigger('loaded' + EVENT_KEY)
            })
          },

          createDropdown: function () {
            // Options
            // If we are multiple or showTick option is set, then add the show-tick class
            var showTick = (this.multiple || this.options.showTick) ? ' show-tick' : '',
              multiselectable = this.multiple ? ' aria-multiselectable="true"' : '',
              inputGroup = '',
              autofocus = this.autofocus ? ' autofocus' : ''

            if (version.major < 4 && this.$element.parent().hasClass('input-group')) {
              inputGroup = ' input-group-btn'
            }

            // Elements
            var drop,
              header = '',
              searchbox = '',
              actionsbox = '',
              donebutton = ''

            if (this.options.header) {
              header =
                '<div class="' + classNames.POPOVERHEADER + '">' +
                '<button type="button" class="close" aria-hidden="true">&times;</button>' +
                this.options.header +
                '</div>'
            }

            if (this.options.liveSearch) {
              searchbox =
                '<div class="bs-searchbox">' +
                '<input type="search" class="form-control" autocomplete="off"' +
                (
                  this.options.liveSearchPlaceholder === null ? ''
                    :
                    ' placeholder="' + htmlEscape(this.options.liveSearchPlaceholder) + '"'
                ) +
                ' role="combobox" aria-label="Search" aria-controls="' + this.selectId + '" aria-autocomplete="list">' +
                '</div>'
            }

            if (this.multiple && this.options.actionsBox) {
              actionsbox =
                '<div class="bs-actionsbox">' +
                '<div class="btn-group btn-group-sm btn-block">' +
                '<button type="button" class="actions-btn bs-select-all btn ' + classNames.BUTTONCLASS + '">' +
                this.options.selectAllText +
                '</button>' +
                '<button type="button" class="actions-btn bs-deselect-all btn ' + classNames.BUTTONCLASS + '">' +
                this.options.deselectAllText +
                '</button>' +
                '</div>' +
                '</div>'
            }

            if (this.multiple && this.options.doneButton) {
              donebutton =
                '<div class="bs-donebutton">' +
                '<div class="btn-group btn-block">' +
                '<button type="button" class="btn btn-sm ' + classNames.BUTTONCLASS + '">' +
                this.options.doneButtonText +
                '</button>' +
                '</div>' +
                '</div>'
            }

            drop =
              '<div class="dropdown bootstrap-select' + showTick + inputGroup + '">' +
              '<button type="button" tabindex="-1" class="' + this.options.styleBase + ' dropdown-toggle" ' + (this.options.display === 'static' ? 'data-display="static"' : '') + 'data-toggle="dropdown"' + autofocus + ' role="combobox" aria-owns="' + this.selectId + '" aria-haspopup="listbox" aria-expanded="false">' +
              '<div class="filter-option">' +
              '<div class="filter-option-inner">' +
              '<div class="filter-option-inner-inner"></div>' +
              '</div> ' +
              '</div>' +
              (
                version.major === '4' ? ''
                  :
                  '<span class="bs-caret">' +
                  this.options.template.caret +
                  '</span>'
              ) +
              '</button>' +
              '<div class="' + classNames.MENU + ' ' + (version.major === '4' ? '' : classNames.SHOW) + '">' +
              header +
              searchbox +
              actionsbox +
              '<div class="inner ' + classNames.SHOW + '" role="listbox" id="' + this.selectId + '" tabindex="-1" ' + multiselectable + '>' +
              '<ul class="' + classNames.MENU + ' inner ' + (version.major === '4' ? classNames.SHOW : '') + '" role="presentation">' +
              '</ul>' +
              '</div>' +
              donebutton +
              '</div>' +
              '</div>'

            return $(drop)
          },

          setPositionData: function () {
            this.selectpicker.view.canHighlight = []
            this.selectpicker.view.size = 0
            this.selectpicker.view.firstHighlightIndex = false

            for (var i = 0; i < this.selectpicker.current.data.length; i++) {
              var li = this.selectpicker.current.data[i],
                canHighlight = true

              if (li.type === 'divider') {
                canHighlight = false
                li.height = this.sizeInfo.dividerHeight
              } else if (li.type === 'optgroup-label') {
                canHighlight = false
                li.height = this.sizeInfo.dropdownHeaderHeight
              } else {
                li.height = this.sizeInfo.liHeight
              }

              if (li.disabled) canHighlight = false

              this.selectpicker.view.canHighlight.push(canHighlight)

              if (canHighlight) {
                this.selectpicker.view.size++
                li.posinset = this.selectpicker.view.size
                if (this.selectpicker.view.firstHighlightIndex === false) this.selectpicker.view.firstHighlightIndex = i
              }

              li.position = (i === 0 ? 0 : this.selectpicker.current.data[i - 1].position) + li.height
            }
          },

          isVirtual: function () {
            return (this.options.virtualScroll !== false) && (this.selectpicker.main.elements.length >= this.options.virtualScroll) || this.options.virtualScroll === true
          },

          createView: function (isSearching, setSize, refresh) {
            var that = this,
              scrollTop = 0,
              active = [],
              selected,
              prevActive

            this.selectpicker.isSearching = isSearching
            this.selectpicker.current = isSearching ? this.selectpicker.search : this.selectpicker.main

            this.setPositionData()

            if (setSize) {
              if (refresh) {
                scrollTop = this.$menuInner[0].scrollTop
              } else if (!that.multiple) {
                var element = that.$element[0],
                  selectedIndex = (element.options[element.selectedIndex] || {}).liIndex

                if (typeof selectedIndex === 'number' && that.options.size !== false) {
                  var selectedData = that.selectpicker.main.data[selectedIndex],
                    position = selectedData && selectedData.position

                  if (position) {
                    scrollTop = position - ((that.sizeInfo.menuInnerHeight + that.sizeInfo.liHeight) / 2)
                  }
                }
              }
            }

            scroll(scrollTop, true)

            this.$menuInner.off('scroll.createView').on('scroll.createView', function (e, updateValue) {
              if (!that.noScroll) scroll(this.scrollTop, updateValue)
              that.noScroll = false
            })

            function scroll (scrollTop, init) {
              var size = that.selectpicker.current.elements.length,
                chunks = [],
                chunkSize,
                chunkCount,
                firstChunk,
                lastChunk,
                currentChunk,
                prevPositions,
                positionIsDifferent,
                previousElements,
                menuIsDifferent = true,
                isVirtual = that.isVirtual()

              that.selectpicker.view.scrollTop = scrollTop

              chunkSize = Math.ceil(that.sizeInfo.menuInnerHeight / that.sizeInfo.liHeight * 1.5) // number of options in a chunk
              chunkCount = Math.round(size / chunkSize) || 1 // number of chunks

              for (var i = 0; i < chunkCount; i++) {
                var endOfChunk = (i + 1) * chunkSize

                if (i === chunkCount - 1) {
                  endOfChunk = size
                }

                chunks[i] = [
                  (i) * chunkSize + (!i ? 0 : 1),
                  endOfChunk
                ]

                if (!size) break

                if (currentChunk === undefined && scrollTop - 1 <= that.selectpicker.current.data[endOfChunk - 1].position - that.sizeInfo.menuInnerHeight) {
                  currentChunk = i
                }
              }

              if (currentChunk === undefined) currentChunk = 0

              prevPositions = [that.selectpicker.view.position0, that.selectpicker.view.position1]

              // always display previous, current, and next chunks
              firstChunk = Math.max(0, currentChunk - 1)
              lastChunk = Math.min(chunkCount - 1, currentChunk + 1)

              that.selectpicker.view.position0 = isVirtual === false ? 0 : (Math.max(0, chunks[firstChunk][0]) || 0)
              that.selectpicker.view.position1 = isVirtual === false ? size : (Math.min(size, chunks[lastChunk][1]) || 0)

              positionIsDifferent = prevPositions[0] !== that.selectpicker.view.position0 || prevPositions[1] !== that.selectpicker.view.position1

              if (that.activeIndex !== undefined) {
                prevActive = that.selectpicker.main.elements[that.prevActiveIndex]
                active = that.selectpicker.main.elements[that.activeIndex]
                selected = that.selectpicker.main.elements[that.selectedIndex]

                if (init) {
                  if (that.activeIndex !== that.selectedIndex) {
                    that.defocusItem(active)
                  }
                  that.activeIndex = undefined
                }

                if (that.activeIndex && that.activeIndex !== that.selectedIndex) {
                  that.defocusItem(selected)
                }
              }

              if (that.prevActiveIndex !== undefined && that.prevActiveIndex !== that.activeIndex && that.prevActiveIndex !== that.selectedIndex) {
                that.defocusItem(prevActive)
              }

              if (init || positionIsDifferent) {
                previousElements = that.selectpicker.view.visibleElements ? that.selectpicker.view.visibleElements.slice() : []

                if (isVirtual === false) {
                  that.selectpicker.view.visibleElements = that.selectpicker.current.elements
                } else {
                  that.selectpicker.view.visibleElements = that.selectpicker.current.elements.slice(that.selectpicker.view.position0, that.selectpicker.view.position1)
                }

                that.setOptionStatus()

                // if searching, check to make sure the list has actually been updated before updating DOM
                // this prevents unnecessary repaints
                if (isSearching || (isVirtual === false && init)) menuIsDifferent = !isEqual(previousElements, that.selectpicker.view.visibleElements)

                // if virtual scroll is disabled and not searching,
                // menu should never need to be updated more than once
                if ((init || isVirtual === true) && menuIsDifferent) {
                  var menuInner = that.$menuInner[0],
                    menuFragment = document.createDocumentFragment(),
                    emptyMenu = menuInner.firstChild.cloneNode(false),
                    marginTop,
                    marginBottom,
                    elements = that.selectpicker.view.visibleElements,
                    toSanitize = []

                  // replace the existing UL with an empty one - this is faster than $.empty()
                  menuInner.replaceChild(emptyMenu, menuInner.firstChild)

                  for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {
                    var element = elements[i],
                      elText,
                      elementData

                    if (that.options.sanitize) {
                      elText = element.lastChild

                      if (elText) {
                        elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0]

                        if (elementData && elementData.content && !elementData.sanitized) {
                          toSanitize.push(elText)
                          elementData.sanitized = true
                        }
                      }
                    }

                    menuFragment.appendChild(element)
                  }

                  if (that.options.sanitize && toSanitize.length) {
                    sanitizeHtml(toSanitize, that.options.whiteList, that.options.sanitizeFn)
                  }

                  if (isVirtual === true) {
                    marginTop = (that.selectpicker.view.position0 === 0 ? 0 : that.selectpicker.current.data[that.selectpicker.view.position0 - 1].position)
                    marginBottom = (that.selectpicker.view.position1 > size - 1 ? 0 : that.selectpicker.current.data[size - 1].position - that.selectpicker.current.data[that.selectpicker.view.position1 - 1].position)

                    menuInner.firstChild.style.marginTop = marginTop + 'px'
                    menuInner.firstChild.style.marginBottom = marginBottom + 'px'
                  } else {
                    menuInner.firstChild.style.marginTop = 0
                    menuInner.firstChild.style.marginBottom = 0
                  }

                  menuInner.firstChild.appendChild(menuFragment)

                  // if an option is encountered that is wider than the current menu width, update the menu width accordingly
                  // switch to ResizeObserver with increased browser support
                  if (isVirtual === true && that.sizeInfo.hasScrollBar) {
                    var menuInnerInnerWidth = menuInner.firstChild.offsetWidth

                    if (init && menuInnerInnerWidth < that.sizeInfo.menuInnerInnerWidth && that.sizeInfo.totalMenuWidth > that.sizeInfo.selectWidth) {
                      menuInner.firstChild.style.minWidth = that.sizeInfo.menuInnerInnerWidth + 'px'
                    } else if (menuInnerInnerWidth > that.sizeInfo.menuInnerInnerWidth) {
                      // set to 0 to get actual width of menu
                      that.$menu[0].style.minWidth = 0

                      var actualMenuWidth = menuInner.firstChild.offsetWidth

                      if (actualMenuWidth > that.sizeInfo.menuInnerInnerWidth) {
                        that.sizeInfo.menuInnerInnerWidth = actualMenuWidth
                        menuInner.firstChild.style.minWidth = that.sizeInfo.menuInnerInnerWidth + 'px'
                      }

                      // reset to default CSS styling
                      that.$menu[0].style.minWidth = ''
                    }
                  }
                }
              }

              that.prevActiveIndex = that.activeIndex

              if (!that.options.liveSearch) {
                that.$menuInner.trigger('focus')
              } else if (isSearching && init) {
                var index = 0,
                  newActive

                if (!that.selectpicker.view.canHighlight[index]) {
                  index = 1 + that.selectpicker.view.canHighlight.slice(1).indexOf(true)
                }

                newActive = that.selectpicker.view.visibleElements[index]

                that.defocusItem(that.selectpicker.view.currentActive)

                that.activeIndex = (that.selectpicker.current.data[index] || {}).index

                that.focusItem(newActive)
              }
            }

            $(window)
              .off('resize' + EVENT_KEY + '.' + this.selectId + '.createView')
              .on('resize' + EVENT_KEY + '.' + this.selectId + '.createView', function () {
                var isActive = that.$newElement.hasClass(classNames.SHOW)

                if (isActive) scroll(that.$menuInner[0].scrollTop)
              })
          },

          focusItem: function (li, liData, noStyle) {
            if (li) {
              liData = liData || this.selectpicker.main.data[this.activeIndex]
              var a = li.firstChild

              if (a) {
                a.setAttribute('aria-setsize', this.selectpicker.view.size)
                a.setAttribute('aria-posinset', liData.posinset)

                if (noStyle !== true) {
                  this.focusedParent.setAttribute('aria-activedescendant', a.id)
                  li.classList.add('active')
                  a.classList.add('active')
                }
              }
            }
          },

          defocusItem: function (li) {
            if (li) {
              li.classList.remove('active')
              if (li.firstChild) li.firstChild.classList.remove('active')
            }
          },

          setPlaceholder: function () {
            var that = this,
              updateIndex = false

            if (this.options.title && !this.multiple) {
              if (!this.selectpicker.view.titleOption) this.selectpicker.view.titleOption = document.createElement('option')

              // this option doesn't create a new <li> element, but does add a new option at the start,
              // so startIndex should increase to prevent having to check every option for the bs-title-option class
              updateIndex = true

              var element = this.$element[0],
                selectTitleOption = false,
                titleNotAppended = !this.selectpicker.view.titleOption.parentNode,
                selectedIndex = element.selectedIndex,
                selectedOption = element.options[selectedIndex],
                navigation = window.performance && window.performance.getEntriesByType('navigation'),
                // Safari doesn't support getEntriesByType('navigation') - fall back to performance.navigation
                isNotBackForward = (navigation && navigation.length) ? navigation[0].type !== 'back_forward' : window.performance.navigation.type !== 2

              if (titleNotAppended) {
                // Use native JS to prepend option (faster)
                this.selectpicker.view.titleOption.className = 'bs-title-option'
                this.selectpicker.view.titleOption.value = ''

                // Check if selected or data-selected attribute is already set on an option. If not, select the titleOption option.
                // the selected item may have been changed by user or programmatically before the bootstrap select plugin runs,
                // if so, the select will have the data-selected attribute
                selectTitleOption = !selectedOption || (selectedIndex === 0 && selectedOption.defaultSelected === false && this.$element.data('selected') === undefined)
              }

              if (titleNotAppended || this.selectpicker.view.titleOption.index !== 0) {
                element.insertBefore(this.selectpicker.view.titleOption, element.firstChild)
              }

              // Set selected *after* appending to select,
              // otherwise the option doesn't get selected in IE
              // set using selectedIndex, as setting the selected attr to true here doesn't work in IE11
              if (selectTitleOption && isNotBackForward) {
                element.selectedIndex = 0
              } else if (document.readyState !== 'complete') {
                // if navigation type is back_forward, there's a chance the select will have its value set by BFCache
                // wait for that value to be set, then run render again
                window.addEventListener('pageshow', function () {
                  if (that.selectpicker.view.displayedValue !== element.value) that.render()
                })
              }
            }

            return updateIndex
          },

          buildData: function () {
            var optionSelector = ':not([hidden]):not([data-hidden="true"])',
              mainData = [],
              optID = 0,
              startIndex = this.setPlaceholder() ? 1 : 0 // append the titleOption if necessary and skip the first option in the loop

            if (this.options.hideDisabled) optionSelector += ':not(:disabled)'

            var selectOptions = this.$element[0].querySelectorAll('select > *' + optionSelector)

            function addDivider (config) {
              var previousData = mainData[mainData.length - 1]

              // ensure optgroup doesn't create back-to-back dividers
              if (
                previousData &&
                previousData.type === 'divider' &&
                (previousData.optID || config.optID)
              ) {
                return
              }

              config = config || {}
              config.type = 'divider'

              mainData.push(config)
            }

            function addOption (option, config) {
              config = config || {}

              config.divider = option.getAttribute('data-divider') === 'true'

              if (config.divider) {
                addDivider({
                  optID: config.optID
                })
              } else {
                var liIndex = mainData.length,
                  cssText = option.style.cssText,
                  inlineStyle = cssText ? htmlEscape(cssText) : '',
                  optionClass = (option.className || '') + (config.optgroupClass || '')

                if (config.optID) optionClass = 'opt ' + optionClass

                config.optionClass = optionClass.trim()
                config.inlineStyle = inlineStyle
                config.text = option.textContent

                config.content = option.getAttribute('data-content')
                config.tokens = option.getAttribute('data-tokens')
                config.subtext = option.getAttribute('data-subtext')
                config.icon = option.getAttribute('data-icon')

                option.liIndex = liIndex

                config.display = config.content || config.text
                config.type = 'option'
                config.index = liIndex
                config.option = option
                config.selected = !!option.selected
                config.disabled = config.disabled || !!option.disabled

                mainData.push(config)
              }
            }

            function addOptgroup (index, selectOptions) {
              var optgroup = selectOptions[index],
                // skip placeholder option
                previous = index - 1 < startIndex ? false : selectOptions[index - 1],
                next = selectOptions[index + 1],
                options = optgroup.querySelectorAll('option' + optionSelector)

              if (!options.length) return

              var config = {
                  display: htmlEscape(optgroup.label),
                  subtext: optgroup.getAttribute('data-subtext'),
                  icon: optgroup.getAttribute('data-icon'),
                  type: 'optgroup-label',
                  optgroupClass: ' ' + (optgroup.className || '')
                },
                headerIndex,
                lastIndex

              optID++

              if (previous) {
                addDivider({optID: optID})
              }

              config.optID = optID

              mainData.push(config)

              for (var j = 0, len = options.length; j < len; j++) {
                var option = options[j]

                if (j === 0) {
                  headerIndex = mainData.length - 1
                  lastIndex = headerIndex + len
                }

                addOption(option, {
                  headerIndex: headerIndex,
                  lastIndex: lastIndex,
                  optID: config.optID,
                  optgroupClass: config.optgroupClass,
                  disabled: optgroup.disabled
                })
              }

              if (next) {
                addDivider({optID: optID})
              }
            }

            for (var len = selectOptions.length, i = startIndex; i < len; i++) {
              var item = selectOptions[i]

              if (item.tagName !== 'OPTGROUP') {
                addOption(item, {})
              } else {
                addOptgroup(i, selectOptions)
              }
            }

            this.selectpicker.main.data = this.selectpicker.current.data = mainData
          },

          buildList: function () {
            var that = this,
              selectData = this.selectpicker.main.data,
              mainElements = [],
              widestOptionLength = 0

            if ((that.options.showTick || that.multiple) && !elementTemplates.checkMark.parentNode) {
              elementTemplates.checkMark.className = this.options.iconBase + ' ' + that.options.tickIcon + ' check-mark'
              elementTemplates.a.appendChild(elementTemplates.checkMark)
            }

            function buildElement (item) {
              var liElement,
                combinedLength = 0

              switch (item.type) {
                case 'divider':
                  liElement = generateOption.li(
                    false,
                    classNames.DIVIDER,
                    (item.optID ? item.optID + 'div' : undefined)
                  )

                  break

                case 'option':
                  liElement = generateOption.li(
                    generateOption.a(
                      generateOption.text.call(that, item),
                      item.optionClass,
                      item.inlineStyle
                    ),
                    '',
                    item.optID
                  )

                  if (liElement.firstChild) {
                    liElement.firstChild.id = that.selectId + '-' + item.index
                  }

                  break

                case 'optgroup-label':
                  liElement = generateOption.li(
                    generateOption.label.call(that, item),
                    'dropdown-header' + item.optgroupClass,
                    item.optID
                  )

                  break
              }

              item.element = liElement
              mainElements.push(liElement)

              // count the number of characters in the option - not perfect, but should work in most cases
              if (item.display) combinedLength += item.display.length
              if (item.subtext) combinedLength += item.subtext.length
              // if there is an icon, ensure this option's width is checked
              if (item.icon) combinedLength += 1

              if (combinedLength > widestOptionLength) {
                widestOptionLength = combinedLength

                // guess which option is the widest
                // use this when calculating menu width
                // not perfect, but it's fast, and the width will be updating accordingly when scrolling
                that.selectpicker.view.widestOption = mainElements[mainElements.length - 1]
              }
            }

            for (var len = selectData.length, i = 0; i < len; i++) {
              var item = selectData[i]

              buildElement(item)
            }

            this.selectpicker.main.elements = this.selectpicker.current.elements = mainElements
          },

          findLis: function () {
            return this.$menuInner.find('.inner > li')
          },

          render: function () {
            var that = this,
              element = this.$element[0],
              // ensure titleOption is appended and selected (if necessary) before getting selectedOptions
              placeholderSelected = this.setPlaceholder() && element.selectedIndex === 0,
              selectedOptions = getSelectedOptions(element, this.options.hideDisabled),
              selectedCount = selectedOptions.length,
              button = this.$button[0],
              buttonInner = button.querySelector('.filter-option-inner-inner'),
              multipleSeparator = document.createTextNode(this.options.multipleSeparator),
              titleFragment = elementTemplates.fragment.cloneNode(false),
              showCount,
              countMax,
              hasContent = false

            button.classList.toggle('bs-placeholder', that.multiple ? !selectedCount : !getSelectValues(element, selectedOptions))

            if (!that.multiple && selectedOptions.length === 1) {
              that.selectpicker.view.displayedValue = getSelectValues(element, selectedOptions)
            }

            if (this.options.selectedTextFormat === 'static') {
              titleFragment = generateOption.text.call(this, {text: this.options.title}, true)
            } else {
              showCount = this.multiple && this.options.selectedTextFormat.indexOf('count') !== -1 && selectedCount > 1

              // determine if the number of selected options will be shown (showCount === true)
              if (showCount) {
                countMax = this.options.selectedTextFormat.split('>')
                showCount = (countMax.length > 1 && selectedCount > countMax[1]) || (countMax.length === 1 && selectedCount >= 2)
              }

              // only loop through all selected options if the count won't be shown
              if (showCount === false) {
                if (!placeholderSelected) {
                  for (var selectedIndex = 0; selectedIndex < selectedCount; selectedIndex++) {
                    if (selectedIndex < 50) {
                      var option = selectedOptions[selectedIndex],
                        thisData = this.selectpicker.main.data[option.liIndex],
                        titleOptions = {}

                      if (this.multiple && selectedIndex > 0) {
                        titleFragment.appendChild(multipleSeparator.cloneNode(false))
                      }

                      if (option.title) {
                        titleOptions.text = option.title
                      } else if (thisData) {
                        if (thisData.content && that.options.showContent) {
                          titleOptions.content = thisData.content.toString()
                          hasContent = true
                        } else {
                          if (that.options.showIcon) {
                            titleOptions.icon = thisData.icon
                          }
                          if (that.options.showSubtext && !that.multiple && thisData.subtext) titleOptions.subtext = ' ' + thisData.subtext
                          titleOptions.text = option.textContent.trim()
                        }
                      }

                      titleFragment.appendChild(generateOption.text.call(this, titleOptions, true))
                    } else {
                      break
                    }
                  }

                  // add ellipsis
                  if (selectedCount > 49) {
                    titleFragment.appendChild(document.createTextNode('...'))
                  }
                }
              } else {
                var optionSelector = ':not([hidden]):not([data-hidden="true"]):not([data-divider="true"])'
                if (this.options.hideDisabled) optionSelector += ':not(:disabled)'

                // If this is a multiselect, and selectedTextFormat is count, then show 1 of 2 selected, etc.
                var totalCount = this.$element[0].querySelectorAll('select > option' + optionSelector + ', optgroup' + optionSelector + ' option' + optionSelector).length,
                  tr8nText = (typeof this.options.countSelectedText === 'function') ? this.options.countSelectedText(selectedCount, totalCount) : this.options.countSelectedText

                titleFragment = generateOption.text.call(this, {
                  text: tr8nText.replace('{0}', selectedCount.toString()).replace('{1}', totalCount.toString())
                }, true)
              }
            }

            if (this.options.title == undefined) {
              // use .attr to ensure undefined is returned if title attribute is not set
              this.options.title = this.$element.attr('title')
            }

            // If the select doesn't have a title, then use the default, or if nothing is set at all, use noneSelectedText
            if (!titleFragment.childNodes.length) {
              titleFragment = generateOption.text.call(this, {
                text: typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText
              }, true)
            }

            // strip all HTML tags and trim the result, then unescape any escaped tags
            button.title = titleFragment.textContent.replace(/<[^>]*>?/g, '').trim()

            if (this.options.sanitize && hasContent) {
              sanitizeHtml([titleFragment], that.options.whiteList, that.options.sanitizeFn)
            }

            buttonInner.innerHTML = ''
            buttonInner.appendChild(titleFragment)

            if (version.major < 4 && this.$newElement[0].classList.contains('bs3-has-addon')) {
              var filterExpand = button.querySelector('.filter-expand'),
                clone = buttonInner.cloneNode(true)

              clone.className = 'filter-expand'

              if (filterExpand) {
                button.replaceChild(clone, filterExpand)
              } else {
                button.appendChild(clone)
              }
            }

            this.$element.trigger('rendered' + EVENT_KEY)
          },

          /**
           * @param [style]
           * @param [status]
           */
          setStyle: function (newStyle, status) {
            var button = this.$button[0],
              newElement = this.$newElement[0],
              style = this.options.style.trim(),
              buttonClass

            if (this.$element.attr('class')) {
              this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ''))
            }

            if (version.major < 4) {
              newElement.classList.add('bs3')

              if (newElement.parentNode.classList && newElement.parentNode.classList.contains('input-group') &&
                (newElement.previousElementSibling || newElement.nextElementSibling) &&
                (newElement.previousElementSibling || newElement.nextElementSibling).classList.contains('input-group-addon')
              ) {
                newElement.classList.add('bs3-has-addon')
              }
            }

            if (newStyle) {
              buttonClass = newStyle.trim()
            } else {
              buttonClass = style
            }

            if (status == 'add') {
              if (buttonClass) button.classList.add.apply(button.classList, buttonClass.split(' '))
            } else if (status == 'remove') {
              if (buttonClass) button.classList.remove.apply(button.classList, buttonClass.split(' '))
            } else {
              if (style) button.classList.remove.apply(button.classList, style.split(' '))
              if (buttonClass) button.classList.add.apply(button.classList, buttonClass.split(' '))
            }
          },

          liHeight: function (refresh) {
            if (!refresh && (this.options.size === false || Object.keys(this.sizeInfo).length)) return

            var newElement = elementTemplates.div.cloneNode(false),
              menu = elementTemplates.div.cloneNode(false),
              menuInner = elementTemplates.div.cloneNode(false),
              menuInnerInner = document.createElement('ul'),
              divider = elementTemplates.li.cloneNode(false),
              dropdownHeader = elementTemplates.li.cloneNode(false),
              li,
              a = elementTemplates.a.cloneNode(false),
              text = elementTemplates.span.cloneNode(false),
              header = this.options.header && this.$menu.find('.' + classNames.POPOVERHEADER).length > 0 ? this.$menu.find('.' + classNames.POPOVERHEADER)[0].cloneNode(true) : null,
              search = this.options.liveSearch ? elementTemplates.div.cloneNode(false) : null,
              actions = this.options.actionsBox && this.multiple && this.$menu.find('.bs-actionsbox').length > 0 ? this.$menu.find('.bs-actionsbox')[0].cloneNode(true) : null,
              doneButton = this.options.doneButton && this.multiple && this.$menu.find('.bs-donebutton').length > 0 ? this.$menu.find('.bs-donebutton')[0].cloneNode(true) : null,
              firstOption = this.$element.find('option')[0]

            this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth

            text.className = 'text'
            a.className = 'dropdown-item ' + (firstOption ? firstOption.className : '')
            newElement.className = this.$menu[0].parentNode.className + ' ' + classNames.SHOW
            newElement.style.width = 0 // ensure button width doesn't affect natural width of menu when calculating
            if (this.options.width === 'auto') menu.style.minWidth = 0
            menu.className = classNames.MENU + ' ' + classNames.SHOW
            menuInner.className = 'inner ' + classNames.SHOW
            menuInnerInner.className = classNames.MENU + ' inner ' + (version.major === '4' ? classNames.SHOW : '')
            divider.className = classNames.DIVIDER
            dropdownHeader.className = 'dropdown-header'

            text.appendChild(document.createTextNode('\u200b'))

            if (this.selectpicker.current.data.length) {
              for (var i = 0; i < this.selectpicker.current.data.length; i++) {
                var data = this.selectpicker.current.data[i]
                if (data.type === 'option') {
                  li = data.element
                  break
                }
              }
            } else {
              li = elementTemplates.li.cloneNode(false)
              a.appendChild(text)
              li.appendChild(a)
            }

            dropdownHeader.appendChild(text.cloneNode(true))

            if (this.selectpicker.view.widestOption) {
              menuInnerInner.appendChild(this.selectpicker.view.widestOption.cloneNode(true))
            }

            menuInnerInner.appendChild(li)
            menuInnerInner.appendChild(divider)
            menuInnerInner.appendChild(dropdownHeader)
            if (header) menu.appendChild(header)
            if (search) {
              var input = document.createElement('input')
              search.className = 'bs-searchbox'
              input.className = 'form-control'
              search.appendChild(input)
              menu.appendChild(search)
            }
            if (actions) menu.appendChild(actions)
            menuInner.appendChild(menuInnerInner)
            menu.appendChild(menuInner)
            if (doneButton) menu.appendChild(doneButton)
            newElement.appendChild(menu)

            document.body.appendChild(newElement)

            var liHeight = li.offsetHeight,
              dropdownHeaderHeight = dropdownHeader ? dropdownHeader.offsetHeight : 0,
              headerHeight = header ? header.offsetHeight : 0,
              searchHeight = search ? search.offsetHeight : 0,
              actionsHeight = actions ? actions.offsetHeight : 0,
              doneButtonHeight = doneButton ? doneButton.offsetHeight : 0,
              dividerHeight = $(divider).outerHeight(true),
              // fall back to jQuery if getComputedStyle is not supported
              menuStyle = window.getComputedStyle ? window.getComputedStyle(menu) : false,
              menuWidth = menu.offsetWidth,
              $menu = menuStyle ? null : $(menu),
              menuPadding = {
                vert: toInteger(menuStyle ? menuStyle.paddingTop : $menu.css('paddingTop')) +
                  toInteger(menuStyle ? menuStyle.paddingBottom : $menu.css('paddingBottom')) +
                  toInteger(menuStyle ? menuStyle.borderTopWidth : $menu.css('borderTopWidth')) +
                  toInteger(menuStyle ? menuStyle.borderBottomWidth : $menu.css('borderBottomWidth')),
                horiz: toInteger(menuStyle ? menuStyle.paddingLeft : $menu.css('paddingLeft')) +
                  toInteger(menuStyle ? menuStyle.paddingRight : $menu.css('paddingRight')) +
                  toInteger(menuStyle ? menuStyle.borderLeftWidth : $menu.css('borderLeftWidth')) +
                  toInteger(menuStyle ? menuStyle.borderRightWidth : $menu.css('borderRightWidth'))
              },
              menuExtras = {
                vert: menuPadding.vert +
                  toInteger(menuStyle ? menuStyle.marginTop : $menu.css('marginTop')) +
                  toInteger(menuStyle ? menuStyle.marginBottom : $menu.css('marginBottom')) + 2,
                horiz: menuPadding.horiz +
                  toInteger(menuStyle ? menuStyle.marginLeft : $menu.css('marginLeft')) +
                  toInteger(menuStyle ? menuStyle.marginRight : $menu.css('marginRight')) + 2
              },
              scrollBarWidth

            menuInner.style.overflowY = 'scroll'

            scrollBarWidth = menu.offsetWidth - menuWidth

            document.body.removeChild(newElement)

            this.sizeInfo.liHeight = liHeight
            this.sizeInfo.dropdownHeaderHeight = dropdownHeaderHeight
            this.sizeInfo.headerHeight = headerHeight
            this.sizeInfo.searchHeight = searchHeight
            this.sizeInfo.actionsHeight = actionsHeight
            this.sizeInfo.doneButtonHeight = doneButtonHeight
            this.sizeInfo.dividerHeight = dividerHeight
            this.sizeInfo.menuPadding = menuPadding
            this.sizeInfo.menuExtras = menuExtras
            this.sizeInfo.menuWidth = menuWidth
            this.sizeInfo.menuInnerInnerWidth = menuWidth - menuPadding.horiz
            this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth
            this.sizeInfo.scrollBarWidth = scrollBarWidth
            this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight

            this.setPositionData()
          },

          getSelectPosition: function () {
            var that = this,
              $window = $(window),
              pos = that.$newElement.offset(),
              $container = $(that.options.container),
              containerPos

            if (that.options.container && $container.length && !$container.is('body')) {
              containerPos = $container.offset()
              containerPos.top += parseInt($container.css('borderTopWidth'))
              containerPos.left += parseInt($container.css('borderLeftWidth'))
            } else {
              containerPos = {top: 0, left: 0}
            }

            var winPad = that.options.windowPadding

            this.sizeInfo.selectOffsetTop = pos.top - containerPos.top - $window.scrollTop()
            this.sizeInfo.selectOffsetBot = $window.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo.selectHeight - containerPos.top - winPad[2]
            this.sizeInfo.selectOffsetLeft = pos.left - containerPos.left - $window.scrollLeft()
            this.sizeInfo.selectOffsetRight = $window.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo.selectWidth - containerPos.left - winPad[1]
            this.sizeInfo.selectOffsetTop -= winPad[0]
            this.sizeInfo.selectOffsetLeft -= winPad[3]
          },

          setMenuSize: function (isAuto) {
            this.getSelectPosition()

            var selectWidth = this.sizeInfo.selectWidth,
              liHeight = this.sizeInfo.liHeight,
              headerHeight = this.sizeInfo.headerHeight,
              searchHeight = this.sizeInfo.searchHeight,
              actionsHeight = this.sizeInfo.actionsHeight,
              doneButtonHeight = this.sizeInfo.doneButtonHeight,
              divHeight = this.sizeInfo.dividerHeight,
              menuPadding = this.sizeInfo.menuPadding,
              menuInnerHeight,
              menuHeight,
              divLength = 0,
              minHeight,
              _minHeight,
              maxHeight,
              menuInnerMinHeight,
              estimate,
              isDropup

            if (this.options.dropupAuto) {
              // Get the estimated height of the menu without scrollbars.
              // This is useful for smaller menus, where there might be plenty of room
              // below the button without setting dropup, but we can't know
              // the exact height of the menu until createView is called later
              estimate = liHeight * this.selectpicker.current.elements.length + menuPadding.vert

              isDropup = this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && estimate + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot

              // ensure dropup doesn't change while searching (so menu doesn't bounce back and forth)
              if (this.selectpicker.isSearching === true) {
                isDropup = this.selectpicker.dropup
              }

              this.$newElement.toggleClass(classNames.DROPUP, isDropup)
              this.selectpicker.dropup = isDropup
            }

            if (this.options.size === 'auto') {
              _minHeight = this.selectpicker.current.elements.length > 3 ? this.sizeInfo.liHeight * 3 + this.sizeInfo.menuExtras.vert - 2 : 0
              menuHeight = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert
              minHeight = _minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight
              menuInnerMinHeight = Math.max(_minHeight - menuPadding.vert, 0)

              if (this.$newElement.hasClass(classNames.DROPUP)) {
                menuHeight = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert
              }

              maxHeight = menuHeight
              menuInnerHeight = menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding.vert
            } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {
              for (var i = 0; i < this.options.size; i++) {
                if (this.selectpicker.current.data[i].type === 'divider') divLength++
              }

              menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding.vert
              menuInnerHeight = menuHeight - menuPadding.vert
              maxHeight = menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight
              minHeight = menuInnerMinHeight = ''
            }

            this.$menu.css({
              'max-height': maxHeight + 'px',
              'overflow': 'hidden',
              'min-height': minHeight + 'px'
            })

            this.$menuInner.css({
              'max-height': menuInnerHeight + 'px',
              'overflow-y': 'auto',
              'min-height': menuInnerMinHeight + 'px'
            })

            // ensure menuInnerHeight is always a positive number to prevent issues calculating chunkSize in createView
            this.sizeInfo.menuInnerHeight = Math.max(menuInnerHeight, 1)

            if (this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight) {
              this.sizeInfo.hasScrollBar = true
              this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth
            }

            if (this.options.dropdownAlignRight === 'auto') {
              this.$menu.toggleClass(classNames.MENURIGHT, this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < (this.sizeInfo.totalMenuWidth - selectWidth))
            }

            if (this.dropdown && this.dropdown._popper) this.dropdown._popper.update()
          },

          setSize: function (refresh) {
            this.liHeight(refresh)

            if (this.options.header) this.$menu.css('padding-top', 0)

            if (this.options.size !== false) {
              var that = this,
                $window = $(window)

              this.setMenuSize()

              if (this.options.liveSearch) {
                this.$searchbox
                  .off('input.setMenuSize propertychange.setMenuSize')
                  .on('input.setMenuSize propertychange.setMenuSize', function () {
                    return that.setMenuSize()
                  })
              }

              if (this.options.size === 'auto') {
                $window
                  .off('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize')
                  .on('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize', function () {
                    return that.setMenuSize()
                  })
              } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {
                $window.off('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize')
              }
            }

            this.createView(false, true, refresh)
          },

          setWidth: function () {
            var that = this

            if (this.options.width === 'auto') {
              requestAnimationFrame(function () {
                that.$menu.css('min-width', '0')

                that.$element.on('loaded' + EVENT_KEY, function () {
                  that.liHeight()
                  that.setMenuSize()

                  // Get correct width if element is hidden
                  var $selectClone = that.$newElement.clone().appendTo('body'),
                    btnWidth = $selectClone.css('width', 'auto').children('button').outerWidth()

                  $selectClone.remove()

                  // Set width to whatever's larger, button title or longest option
                  that.sizeInfo.selectWidth = Math.max(that.sizeInfo.totalMenuWidth, btnWidth)
                  that.$newElement.css('width', that.sizeInfo.selectWidth + 'px')
                })
              })
            } else if (this.options.width === 'fit') {
              // Remove inline min-width so width can be changed from 'auto'
              this.$menu.css('min-width', '')
              this.$newElement.css('width', '').addClass('fit-width')
            } else if (this.options.width) {
              // Remove inline min-width so width can be changed from 'auto'
              this.$menu.css('min-width', '')
              this.$newElement.css('width', this.options.width)
            } else {
              // Remove inline min-width/width so width can be changed
              this.$menu.css('min-width', '')
              this.$newElement.css('width', '')
            }
            // Remove fit-width class if width is changed programmatically
            if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {
              this.$newElement[0].classList.remove('fit-width')
            }
          },

          selectPosition: function () {
            this.$bsContainer = $('<div class="bs-container" />')

            var that = this,
              $container = $(this.options.container),
              pos,
              containerPos,
              actualHeight,
              getPlacement = function ($element) {
                var containerPosition = {},
                  // fall back to dropdown's default display setting if display is not manually set
                  display = that.options.display || (
                    // Bootstrap 3 doesn't have $.fn.dropdown.Constructor.Default
                    $.fn.dropdown.Constructor.Default ? $.fn.dropdown.Constructor.Default.display
                      : false
                  )

                that.$bsContainer.addClass($element.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass(classNames.DROPUP, $element.hasClass(classNames.DROPUP))
                pos = $element.offset()

                if (!$container.is('body')) {
                  containerPos = $container.offset()
                  containerPos.top += parseInt($container.css('borderTopWidth')) - $container.scrollTop()
                  containerPos.left += parseInt($container.css('borderLeftWidth')) - $container.scrollLeft()
                } else {
                  containerPos = {top: 0, left: 0}
                }

                actualHeight = $element.hasClass(classNames.DROPUP) ? 0 : $element[0].offsetHeight

                // Bootstrap 4+ uses Popper for menu positioning
                if (version.major < 4 || display === 'static') {
                  containerPosition.top = pos.top - containerPos.top + actualHeight
                  containerPosition.left = pos.left - containerPos.left
                }

                containerPosition.width = $element[0].offsetWidth

                that.$bsContainer.css(containerPosition)
              }

            this.$button.on('click.bs.dropdown.data-api', function () {
              if (that.isDisabled()) {
                return
              }

              getPlacement(that.$newElement)

              that.$bsContainer
                .appendTo(that.options.container)
                .toggleClass(classNames.SHOW, !that.$button.hasClass(classNames.SHOW))
                .append(that.$menu)
            })

            $(window)
              .off('resize' + EVENT_KEY + '.' + this.selectId + ' scroll' + EVENT_KEY + '.' + this.selectId)
              .on('resize' + EVENT_KEY + '.' + this.selectId + ' scroll' + EVENT_KEY + '.' + this.selectId, function () {
                var isActive = that.$newElement.hasClass(classNames.SHOW)

                if (isActive) getPlacement(that.$newElement)
              })

            this.$element.on('hide' + EVENT_KEY, function () {
              that.$menu.data('height', that.$menu.height())
              that.$bsContainer.detach()
            })
          },

          setOptionStatus: function (selectedOnly) {
            var that = this

            that.noScroll = false

            if (that.selectpicker.view.visibleElements && that.selectpicker.view.visibleElements.length) {
              for (var i = 0; i < that.selectpicker.view.visibleElements.length; i++) {
                var liData = that.selectpicker.current.data[i + that.selectpicker.view.position0],
                  option = liData.option

                if (option) {
                  if (selectedOnly !== true) {
                    that.setDisabled(
                      liData.index,
                      liData.disabled
                    )
                  }

                  that.setSelected(
                    liData.index,
                    option.selected
                  )
                }
              }
            }
          },

          /**
           * @param {number} index - the index of the option that is being changed
           * @param {boolean} selected - true if the option is being selected, false if being deselected
           */
          setSelected: function (index, selected) {
            var li = this.selectpicker.main.elements[index],
              liData = this.selectpicker.main.data[index],
              activeIndexIsSet = this.activeIndex !== undefined,
              thisIsActive = this.activeIndex === index,
              prevActive,
              a,
              // if current option is already active
              // OR
              // if the current option is being selected, it's NOT multiple, and
              // activeIndex is undefined:
              //  - when the menu is first being opened, OR
              //  - after a search has been performed, OR
              //  - when retainActive is false when selecting a new option (i.e. index of the newly selected option is not the same as the current activeIndex)
              keepActive = thisIsActive || (selected && !this.multiple && !activeIndexIsSet)

            liData.selected = selected

            a = li.firstChild

            if (selected) {
              this.selectedIndex = index
            }

            li.classList.toggle('selected', selected)

            if (keepActive) {
              this.focusItem(li, liData)
              this.selectpicker.view.currentActive = li
              this.activeIndex = index
            } else {
              this.defocusItem(li)
            }

            if (a) {
              a.classList.toggle('selected', selected)

              if (selected) {
                a.setAttribute('aria-selected', true)
              } else {
                if (this.multiple) {
                  a.setAttribute('aria-selected', false)
                } else {
                  a.removeAttribute('aria-selected')
                }
              }
            }

            if (!keepActive && !activeIndexIsSet && selected && this.prevActiveIndex !== undefined) {
              prevActive = this.selectpicker.main.elements[this.prevActiveIndex]

              this.defocusItem(prevActive)
            }
          },

          /**
           * @param {number} index - the index of the option that is being disabled
           * @param {boolean} disabled - true if the option is being disabled, false if being enabled
           */
          setDisabled: function (index, disabled) {
            var li = this.selectpicker.main.elements[index],
              a

            this.selectpicker.main.data[index].disabled = disabled

            a = li.firstChild

            li.classList.toggle(classNames.DISABLED, disabled)

            if (a) {
              if (version.major === '4') a.classList.toggle(classNames.DISABLED, disabled)

              if (disabled) {
                a.setAttribute('aria-disabled', disabled)
                a.setAttribute('tabindex', -1)
              } else {
                a.removeAttribute('aria-disabled')
                a.setAttribute('tabindex', 0)
              }
            }
          },

          isDisabled: function () {
            return this.$element[0].disabled
          },

          checkDisabled: function () {
            if (this.isDisabled()) {
              this.$newElement[0].classList.add(classNames.DISABLED)
              this.$button.addClass(classNames.DISABLED).attr('aria-disabled', true)
            } else {
              if (this.$button[0].classList.contains(classNames.DISABLED)) {
                this.$newElement[0].classList.remove(classNames.DISABLED)
                this.$button.removeClass(classNames.DISABLED).attr('aria-disabled', false)
              }
            }
          },

          clickListener: function () {
            var that = this,
              $document = $(document)

            $document.data('spaceSelect', false)

            this.$button.on('keyup', function (e) {
              if (/(32)/.test(e.keyCode.toString(10)) && $document.data('spaceSelect')) {
                e.preventDefault()
                $document.data('spaceSelect', false)
              }
            })

            this.$newElement.on('show.bs.dropdown', function () {
              if (version.major > 3 && !that.dropdown) {
                that.dropdown = that.$button.data('bs.dropdown')
                that.dropdown._menu = that.$menu[0]
              }
            })

            this.$button.on('click.bs.dropdown.data-api', function () {
              if (!that.$newElement.hasClass(classNames.SHOW)) {
                that.setSize()
              }
            })

            function setFocus () {
              if (that.options.liveSearch) {
                that.$searchbox.trigger('focus')
              } else {
                that.$menuInner.trigger('focus')
              }
            }

            function checkPopperExists () {
              if (that.dropdown && that.dropdown._popper && that.dropdown._popper.state.isCreated) {
                setFocus()
              } else {
                requestAnimationFrame(checkPopperExists)
              }
            }

            this.$element.on('shown' + EVENT_KEY, function () {
              if (that.$menuInner[0].scrollTop !== that.selectpicker.view.scrollTop) {
                that.$menuInner[0].scrollTop = that.selectpicker.view.scrollTop
              }

              if (version.major > 3) {
                requestAnimationFrame(checkPopperExists)
              } else {
                setFocus()
              }
            })

            // ensure posinset and setsize are correct before selecting an option via a click
            this.$menuInner.on('mouseenter', 'li a', function (e) {
              var hoverLi = this.parentElement,
                position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0,
                index = Array.prototype.indexOf.call(hoverLi.parentElement.children, hoverLi),
                hoverData = that.selectpicker.current.data[index + position0]

              that.focusItem(hoverLi, hoverData, true)
            })

            this.$menuInner.on('click', 'li a', function (e, retainActive) {
              var $this = $(this),
                element = that.$element[0],
                position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0,
                clickedData = that.selectpicker.current.data[$this.parent().index() + position0],
                clickedIndex = clickedData.index,
                prevValue = getSelectValues(element),
                prevIndex = element.selectedIndex,
                prevOption = element.options[prevIndex],
                triggerChange = true

              // Don't close on multi choice menu
              if (that.multiple && that.options.maxOptions !== 1) {
                e.stopPropagation()
              }

              e.preventDefault()

              // Don't run if the select is disabled
              if (!that.isDisabled() && !$this.parent().hasClass(classNames.DISABLED)) {
                var option = clickedData.option,
                  $option = $(option),
                  state = option.selected,
                  $optgroup = $option.parent('optgroup'),
                  $optgroupOptions = $optgroup.find('option'),
                  maxOptions = that.options.maxOptions,
                  maxOptionsGrp = $optgroup.data('maxOptions') || false

                if (clickedIndex === that.activeIndex) retainActive = true

                if (!retainActive) {
                  that.prevActiveIndex = that.activeIndex
                  that.activeIndex = undefined
                }

                if (!that.multiple) { // Deselect all others if not multi select box
                  if (prevOption) prevOption.selected = false
                  option.selected = true
                  that.setSelected(clickedIndex, true)
                } else { // Toggle the one we have chosen if we are multi select.
                  option.selected = !state

                  that.setSelected(clickedIndex, !state)
                  that.focusedParent.focus()

                  if (maxOptions !== false || maxOptionsGrp !== false) {
                    var maxReached = maxOptions < getSelectedOptions(element).length,
                      maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length

                    if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {
                      if (maxOptions && maxOptions == 1) {
                        element.selectedIndex = -1
                        option.selected = true
                        that.setOptionStatus(true)
                      } else if (maxOptionsGrp && maxOptionsGrp == 1) {
                        for (var i = 0; i < $optgroupOptions.length; i++) {
                          var _option = $optgroupOptions[i]
                          _option.selected = false
                          that.setSelected(_option.liIndex, false)
                        }

                        option.selected = true
                        that.setSelected(clickedIndex, true)
                      } else {
                        var maxOptionsText = typeof that.options.maxOptionsText === 'string' ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText,
                          maxOptionsArr = typeof maxOptionsText === 'function' ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText,
                          maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),
                          maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),
                          $notify = $('<div class="notify"></div>')
                        // If {var} is set in array, replace it
                        /** @deprecated */
                        if (maxOptionsArr[2]) {
                          maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1])
                          maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1])
                        }

                        option.selected = false

                        that.$menu.append($notify)

                        if (maxOptions && maxReached) {
                          $notify.append($('<div>' + maxTxt + '</div>'))
                          triggerChange = false
                          that.$element.trigger('maxReached' + EVENT_KEY)
                        }

                        if (maxOptionsGrp && maxReachedGrp) {
                          $notify.append($('<div>' + maxTxtGrp + '</div>'))
                          triggerChange = false
                          that.$element.trigger('maxReachedGrp' + EVENT_KEY)
                        }

                        setTimeout(function () {
                          that.setSelected(clickedIndex, false)
                        }, 10)

                        $notify[0].classList.add('fadeOut')

                        setTimeout(function () {
                          $notify.remove()
                        }, 1050)
                      }
                    }
                  }
                }

                if (!that.multiple || (that.multiple && that.options.maxOptions === 1)) {
                  that.$button.trigger('focus')
                } else if (that.options.liveSearch) {
                  that.$searchbox.trigger('focus')
                }

                // Trigger select 'change'
                if (triggerChange) {
                  if (that.multiple || prevIndex !== element.selectedIndex) {
                    // $option.prop('selected') is current option state (selected/unselected). prevValue is the value of the select prior to being changed.
                    changedArguments = [option.index, $option.prop('selected'), prevValue]
                    that.$element
                      .triggerNative('change')
                  }
                }
              }
            })

            this.$menu.on('click', 'li.' + classNames.DISABLED + ' a, .' + classNames.POPOVERHEADER + ', .' + classNames.POPOVERHEADER + ' :not(.close)', function (e) {
              if (e.currentTarget == this) {
                e.preventDefault()
                e.stopPropagation()
                if (that.options.liveSearch && !$(e.target).hasClass('close')) {
                  that.$searchbox.trigger('focus')
                } else {
                  that.$button.trigger('focus')
                }
              }
            })

            this.$menuInner.on('click', '.divider, .dropdown-header', function (e) {
              e.preventDefault()
              e.stopPropagation()
              if (that.options.liveSearch) {
                that.$searchbox.trigger('focus')
              } else {
                that.$button.trigger('focus')
              }
            })

            this.$menu.on('click', '.' + classNames.POPOVERHEADER + ' .close', function () {
              that.$button.trigger('click')
            })

            this.$searchbox.on('click', function (e) {
              e.stopPropagation()
            })

            this.$menu.on('click', '.actions-btn', function (e) {
              if (that.options.liveSearch) {
                that.$searchbox.trigger('focus')
              } else {
                that.$button.trigger('focus')
              }

              e.preventDefault()
              e.stopPropagation()

              if ($(this).hasClass('bs-select-all')) {
                that.selectAll()
              } else {
                that.deselectAll()
              }
            })

            this.$button
              .on('focus' + EVENT_KEY, function (e) {
                var tabindex = that.$element[0].getAttribute('tabindex')

                // only change when button is actually focused
                if (tabindex !== undefined && e.originalEvent && e.originalEvent.isTrusted) {
                  // apply select element's tabindex to ensure correct order is followed when tabbing to the next element
                  this.setAttribute('tabindex', tabindex)
                  // set element's tabindex to -1 to allow for reverse tabbing
                  that.$element[0].setAttribute('tabindex', -1)
                  that.selectpicker.view.tabindex = tabindex
                }
              })
              .on('blur' + EVENT_KEY, function (e) {
                // revert everything to original tabindex
                if (that.selectpicker.view.tabindex !== undefined && e.originalEvent && e.originalEvent.isTrusted) {
                  that.$element[0].setAttribute('tabindex', that.selectpicker.view.tabindex)
                  this.setAttribute('tabindex', -1)
                  that.selectpicker.view.tabindex = undefined
                }
              })

            this.$element
              .on('change' + EVENT_KEY, function () {
                that.render()
                that.$element.trigger('changed' + EVENT_KEY, changedArguments)
                changedArguments = null
              })
              .on('focus' + EVENT_KEY, function () {
                if (!that.options.mobile) that.$button[0].focus()
              })
          },

          liveSearchListener: function () {
            var that = this

            this.$button.on('click.bs.dropdown.data-api', function () {
              if (!!that.$searchbox.val()) {
                that.$searchbox.val('')
                that.selectpicker.search.previousValue = undefined
              }
            })

            this.$searchbox.on('click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api', function (e) {
              e.stopPropagation()
            })

            this.$searchbox.on('input propertychange', function () {
              var searchValue = that.$searchbox[0].value

              that.selectpicker.search.elements = []
              that.selectpicker.search.data = []

              if (searchValue) {
                var i,
                  searchMatch = [],
                  q = searchValue.toUpperCase(),
                  cache = {},
                  cacheArr = [],
                  searchStyle = that._searchStyle(),
                  normalizeSearch = that.options.liveSearchNormalize

                if (normalizeSearch) q = normalizeToBase(q)

                for (var i = 0; i < that.selectpicker.main.data.length; i++) {
                  var li = that.selectpicker.main.data[i]

                  if (!cache[i]) {
                    cache[i] = stringSearch(li, q, searchStyle, normalizeSearch)
                  }

                  if (cache[i] && li.headerIndex !== undefined && cacheArr.indexOf(li.headerIndex) === -1) {
                    if (li.headerIndex > 0) {
                      cache[li.headerIndex - 1] = true
                      cacheArr.push(li.headerIndex - 1)
                    }

                    cache[li.headerIndex] = true
                    cacheArr.push(li.headerIndex)

                    cache[li.lastIndex + 1] = true
                  }

                  if (cache[i] && li.type !== 'optgroup-label') cacheArr.push(i)
                }

                for (var i = 0, cacheLen = cacheArr.length; i < cacheLen; i++) {
                  var index = cacheArr[i],
                    prevIndex = cacheArr[i - 1],
                    li = that.selectpicker.main.data[index],
                    liPrev = that.selectpicker.main.data[prevIndex]

                  if (li.type !== 'divider' || (li.type === 'divider' && liPrev && liPrev.type !== 'divider' && cacheLen - 1 !== i)) {
                    that.selectpicker.search.data.push(li)
                    searchMatch.push(that.selectpicker.main.elements[index])
                  }
                }

                that.activeIndex = undefined
                that.noScroll = true
                that.$menuInner.scrollTop(0)
                that.selectpicker.search.elements = searchMatch
                that.createView(true)
                showNoResults.call(that, searchMatch, searchValue)
              } else if (that.selectpicker.search.previousValue) { // for IE11 (#2402)
                that.$menuInner.scrollTop(0)
                that.createView(false)
              }

              that.selectpicker.search.previousValue = searchValue
            })
          },

          _searchStyle: function () {
            return this.options.liveSearchStyle || 'contains'
          },

          val: function (value) {
            var element = this.$element[0]

            if (typeof value !== 'undefined') {
              var prevValue = getSelectValues(element)

              changedArguments = [null, null, prevValue]

              this.$element
                .val(value)
                .trigger('changed' + EVENT_KEY, changedArguments)

              if (this.$newElement.hasClass(classNames.SHOW)) {
                if (this.multiple) {
                  this.setOptionStatus(true)
                } else {
                  var liSelectedIndex = (element.options[element.selectedIndex] || {}).liIndex

                  if (typeof liSelectedIndex === 'number') {
                    this.setSelected(this.selectedIndex, false)
                    this.setSelected(liSelectedIndex, true)
                  }
                }
              }

              this.render()

              changedArguments = null

              return this.$element
            } else {
              return this.$element.val()
            }
          },

          changeAll: function (status) {
            if (!this.multiple) return
            if (typeof status === 'undefined') status = true

            var element = this.$element[0],
              previousSelected = 0,
              currentSelected = 0,
              prevValue = getSelectValues(element)

            element.classList.add('bs-select-hidden')

            for (var i = 0, data = this.selectpicker.current.data, len = data.length; i < len; i++) {
              var liData = data[i],
                option = liData.option

              if (option && !liData.disabled && liData.type !== 'divider') {
                if (liData.selected) previousSelected++
                option.selected = status
                if (status === true) currentSelected++
              }
            }

            element.classList.remove('bs-select-hidden')

            if (previousSelected === currentSelected) return

            this.setOptionStatus()

            changedArguments = [null, null, prevValue]

            this.$element
              .triggerNative('change')
          },

          selectAll: function () {
            return this.changeAll(true)
          },

          deselectAll: function () {
            return this.changeAll(false)
          },

          toggle: function (e) {
            e = e || window.event

            if (e) e.stopPropagation()

            this.$button.trigger('click.bs.dropdown.data-api')
          },

          keydown: function (e) {
            var $this = $(this),
              isToggle = $this.hasClass('dropdown-toggle'),
              $parent = isToggle ? $this.closest('.dropdown') : $this.closest(Selector.MENU),
              that = $parent.data('this'),
              $items = that.findLis(),
              index,
              isActive,
              liActive,
              activeLi,
              offset,
              updateScroll = false,
              downOnTab = e.which === keyCodes.TAB && !isToggle && !that.options.selectOnTab,
              isArrowKey = REGEXP_ARROW.test(e.which) || downOnTab,
              scrollTop = that.$menuInner[0].scrollTop,
              isVirtual = that.isVirtual(),
              position0 = isVirtual === true ? that.selectpicker.view.position0 : 0

            // do nothing if a function key is pressed
            if (e.which >= 112 && e.which <= 123) return

            isActive = that.$newElement.hasClass(classNames.SHOW)

            if (
              !isActive &&
              (
                isArrowKey ||
                (e.which >= 48 && e.which <= 57) ||
                (e.which >= 96 && e.which <= 105) ||
                (e.which >= 65 && e.which <= 90)
              )
            ) {
              that.$button.trigger('click.bs.dropdown.data-api')

              if (that.options.liveSearch) {
                that.$searchbox.trigger('focus')
                return
              }
            }

            if (e.which === keyCodes.ESCAPE && isActive) {
              e.preventDefault()
              that.$button.trigger('click.bs.dropdown.data-api').trigger('focus')
            }

            if (isArrowKey) { // if up or down
              if (!$items.length) return

              liActive = that.selectpicker.main.elements[that.activeIndex]
              index = liActive ? Array.prototype.indexOf.call(liActive.parentElement.children, liActive) : -1

              if (index !== -1) {
                that.defocusItem(liActive)
              }

              if (e.which === keyCodes.ARROW_UP) { // up
                if (index !== -1) index--
                if (index + position0 < 0) index += $items.length

                if (!that.selectpicker.view.canHighlight[index + position0]) {
                  index = that.selectpicker.view.canHighlight.slice(0, index + position0).lastIndexOf(true) - position0
                  if (index === -1) index = $items.length - 1
                }
              } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) { // down
                index++
                if (index + position0 >= that.selectpicker.view.canHighlight.length) index = that.selectpicker.view.firstHighlightIndex

                if (!that.selectpicker.view.canHighlight[index + position0]) {
                  index = index + 1 + that.selectpicker.view.canHighlight.slice(index + position0 + 1).indexOf(true)
                }
              }

              e.preventDefault()

              var liActiveIndex = position0 + index

              if (e.which === keyCodes.ARROW_UP) { // up
                // scroll to bottom and highlight last option
                if (position0 === 0 && index === $items.length - 1) {
                  that.$menuInner[0].scrollTop = that.$menuInner[0].scrollHeight

                  liActiveIndex = that.selectpicker.current.elements.length - 1
                } else {
                  activeLi = that.selectpicker.current.data[liActiveIndex]
                  offset = activeLi.position - activeLi.height

                  updateScroll = offset < scrollTop
                }
              } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) { // down
                // scroll to top and highlight first option
                if (index === that.selectpicker.view.firstHighlightIndex) {
                  that.$menuInner[0].scrollTop = 0

                  liActiveIndex = that.selectpicker.view.firstHighlightIndex
                } else {
                  activeLi = that.selectpicker.current.data[liActiveIndex]
                  offset = activeLi.position - that.sizeInfo.menuInnerHeight

                  updateScroll = offset > scrollTop
                }
              }

              liActive = that.selectpicker.current.elements[liActiveIndex]

              that.activeIndex = that.selectpicker.current.data[liActiveIndex].index

              that.focusItem(liActive)

              that.selectpicker.view.currentActive = liActive

              if (updateScroll) that.$menuInner[0].scrollTop = offset

              if (that.options.liveSearch) {
                that.$searchbox.trigger('focus')
              } else {
                $this.trigger('focus')
              }
            } else if (
              (!$this.is('input') && !REGEXP_TAB_OR_ESCAPE.test(e.which)) ||
              (e.which === keyCodes.SPACE && that.selectpicker.keydown.keyHistory)
            ) {
              var searchMatch,
                matches = [],
                keyHistory

              e.preventDefault()

              that.selectpicker.keydown.keyHistory += keyCodeMap[e.which]

              if (that.selectpicker.keydown.resetKeyHistory.cancel) clearTimeout(that.selectpicker.keydown.resetKeyHistory.cancel)
              that.selectpicker.keydown.resetKeyHistory.cancel = that.selectpicker.keydown.resetKeyHistory.start()

              keyHistory = that.selectpicker.keydown.keyHistory

              // if all letters are the same, set keyHistory to just the first character when searching
              if (/^(.)\1+$/.test(keyHistory)) {
                keyHistory = keyHistory.charAt(0)
              }

              // find matches
              for (var i = 0; i < that.selectpicker.current.data.length; i++) {
                var li = that.selectpicker.current.data[i],
                  hasMatch

                hasMatch = stringSearch(li, keyHistory, 'startsWith', true)

                if (hasMatch && that.selectpicker.view.canHighlight[i]) {
                  matches.push(li.index)
                }
              }

              if (matches.length) {
                var matchIndex = 0

                $items.removeClass('active').find('a').removeClass('active')

                // either only one key has been pressed or they are all the same key
                if (keyHistory.length === 1) {
                  matchIndex = matches.indexOf(that.activeIndex)

                  if (matchIndex === -1 || matchIndex === matches.length - 1) {
                    matchIndex = 0
                  } else {
                    matchIndex++
                  }
                }

                searchMatch = matches[matchIndex]

                activeLi = that.selectpicker.main.data[searchMatch]

                if (scrollTop - activeLi.position > 0) {
                  offset = activeLi.position - activeLi.height
                  updateScroll = true
                } else {
                  offset = activeLi.position - that.sizeInfo.menuInnerHeight
                  // if the option is already visible at the current scroll position, just keep it the same
                  updateScroll = activeLi.position > scrollTop + that.sizeInfo.menuInnerHeight
                }

                liActive = that.selectpicker.main.elements[searchMatch]

                that.activeIndex = matches[matchIndex]

                that.focusItem(liActive)

                if (liActive) liActive.firstChild.focus()

                if (updateScroll) that.$menuInner[0].scrollTop = offset

                $this.trigger('focus')
              }
            }

            // Select focused option if "Enter", "Spacebar" or "Tab" (when selectOnTab is true) are pressed inside the menu.
            if (
              isActive &&
              (
                (e.which === keyCodes.SPACE && !that.selectpicker.keydown.keyHistory) ||
                e.which === keyCodes.ENTER ||
                (e.which === keyCodes.TAB && that.options.selectOnTab)
              )
            ) {
              if (e.which !== keyCodes.SPACE) e.preventDefault()

              if (!that.options.liveSearch || e.which !== keyCodes.SPACE) {
                that.$menuInner.find('.active a').trigger('click', true) // retain active class
                $this.trigger('focus')

                if (!that.options.liveSearch) {
                  // Prevent screen from scrolling if the user hits the spacebar
                  e.preventDefault()
                  // Fixes spacebar selection of dropdown items in FF & IE
                  $(document).data('spaceSelect', true)
                }
              }
            }
          },

          mobile: function () {
            // ensure mobile is set to true if mobile function is called after init
            this.options.mobile = true
            this.$element[0].classList.add('mobile-device')
          },

          refresh: function () {
            // update options if data attributes have been changed
            var config = $.extend({}, this.options, this.$element.data())
            this.options = config

            this.checkDisabled()
            this.buildData()
            this.setStyle()
            this.render()
            this.buildList()
            this.setWidth()

            this.setSize(true)

            this.$element.trigger('refreshed' + EVENT_KEY)
          },

          hide: function () {
            this.$newElement.hide()
          },

          show: function () {
            this.$newElement.show()
          },

          remove: function () {
            this.$newElement.remove()
            this.$element.remove()
          },

          destroy: function () {
            this.$newElement.before(this.$element).remove()

            if (this.$bsContainer) {
              this.$bsContainer.remove()
            } else {
              this.$menu.remove()
            }

            if (this.selectpicker.view.titleOption && this.selectpicker.view.titleOption.parentNode) {
              this.selectpicker.view.titleOption.parentNode.removeChild(this.selectpicker.view.titleOption)
            }

            this.$element
              .off(EVENT_KEY)
              .removeData('selectpicker')
              .removeClass('bs-select-hidden selectpicker')

            $(window).off(EVENT_KEY + '.' + this.selectId)
          }
        }

        // SELECTPICKER PLUGIN DEFINITION
        // ==============================
        function Plugin (option) {
          // get the args of the outer function..
          var args = arguments
          // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them
          // to get lost/corrupted in android 2.3 and IE9 #715 #775
          var _option = option;

          [].shift.apply(args)

          // if the version was not set successfully
          if (!version.success) {
            // try to retreive it again
            try {
              version.full = ($.fn.dropdown.Constructor.VERSION || '').split(' ')[0].split('.')
            } catch (err) {
              // fall back to use BootstrapVersion if set
              if (Selectpicker.BootstrapVersion) {
                version.full = Selectpicker.BootstrapVersion.split(' ')[0].split('.')
              } else {
                version.full = [version.major, '0', '0']

                console.warn(
                  'There was an issue retrieving Bootstrap\'s version. ' +
                  'Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision. ' +
                  'If loading Bootstrap asynchronously, the version may need to be manually specified via $.fn.selectpicker.Constructor.BootstrapVersion.',
                  err
                )
              }
            }

            version.major = version.full[0]
            version.success = true
          }

          if (version.major === '4') {
            // some defaults need to be changed if using Bootstrap 4
            // check to see if they have already been manually changed before forcing them to update
            var toUpdate = []

            if (Selectpicker.DEFAULTS.style === classNames.BUTTONCLASS) toUpdate.push({
              name: 'style',
              className: 'BUTTONCLASS'
            })
            if (Selectpicker.DEFAULTS.iconBase === classNames.ICONBASE) toUpdate.push({
              name: 'iconBase',
              className: 'ICONBASE'
            })
            if (Selectpicker.DEFAULTS.tickIcon === classNames.TICKICON) toUpdate.push({
              name: 'tickIcon',
              className: 'TICKICON'
            })

            classNames.DIVIDER = 'dropdown-divider'
            classNames.SHOW = 'show'
            classNames.BUTTONCLASS = 'btn-light'
            classNames.POPOVERHEADER = 'popover-header'
            classNames.ICONBASE = ''
            classNames.TICKICON = 'bs-ok-default'

            for (var i = 0; i < toUpdate.length; i++) {
              var option = toUpdate[i]
              Selectpicker.DEFAULTS[option.name] = classNames[option.className]
            }
          }

          var value
          var chain = this.each(function () {
            var $this = $(this)
            if ($this.is('select')) {
              var data = $this.data('selectpicker'),
                options = typeof _option == 'object' && _option

              if (!data) {
                var dataAttributes = $this.data()

                for (var dataAttr in dataAttributes) {
                  if (Object.prototype.hasOwnProperty.call(dataAttributes, dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
                    delete dataAttributes[dataAttr]
                  }
                }

                var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, dataAttributes, options)
                config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template)
                $this.data('selectpicker', (data = new Selectpicker(this, config)))
              } else if (options) {
                for (var i in options) {
                  if (Object.prototype.hasOwnProperty.call(options, i)) {
                    data.options[i] = options[i]
                  }
                }
              }

              if (typeof _option == 'string') {
                if (data[_option] instanceof Function) {
                  value = data[_option].apply(data, args)
                } else {
                  value = data.options[_option]
                }
              }
            }
          })

          if (typeof value !== 'undefined') {
            // noinspection JSUnusedAssignment
            return value
          } else {
            return chain
          }
        }

        var old = $.fn.selectpicker
        $.fn.selectpicker = Plugin
        $.fn.selectpicker.Constructor = Selectpicker

        // SELECTPICKER NO CONFLICT
        // ========================
        $.fn.selectpicker.noConflict = function () {
          $.fn.selectpicker = old
          return this
        }

        // get Bootstrap's keydown event handler for either Bootstrap 4 or Bootstrap 3
        function keydownHandler () {
          if ($.fn.dropdown) {
            // wait to define until function is called in case Bootstrap isn't loaded yet
            var bootstrapKeydown = $.fn.dropdown.Constructor._dataApiKeydownHandler || $.fn.dropdown.Constructor.prototype.keydown
            return bootstrapKeydown.apply(this, arguments)
          }
        }

        $(document)
          .off('keydown.bs.dropdown.data-api')
          .on('keydown.bs.dropdown.data-api', ':not(.bootstrap-select) > [data-toggle="dropdown"]', keydownHandler)
          .on('keydown.bs.dropdown.data-api', ':not(.bootstrap-select) > .dropdown-menu', keydownHandler)
          .on('keydown' + EVENT_KEY, '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', Selectpicker.prototype.keydown)
          .on('focusin.modal', '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', function (e) {
            e.stopPropagation()
          })

        // SELECTPICKER DATA-API
        // =====================
        $(window).on('load' + EVENT_KEY + '.data-api', function () {
          $('.selectpicker').each(function () {
            var $selectpicker = $(this)
            Plugin.call($selectpicker, $selectpicker.data())
          })
        })
      })(jQuery)


    }))
//# sourceMappingURL=bootstrap-select.js.map

    /***/
  }),

  /***/ './node_modules/bootstrap/dist/js/bootstrap.js':
  /*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

    /*!
  * Bootstrap v4.5.0 (https://getbootstrap.com/)
  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
    (function (global, factory) {
      true ? factory(exports, __webpack_require__(/*! jquery */ './node_modules/jquery/dist/jquery.js'), __webpack_require__(/*! popper.js */ './node_modules/popper.js/dist/esm/popper.js')) :
        undefined
    }(this, (function (exports, $, Popper) {
      'use strict'

      $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $
      Popper = Popper && Object.prototype.hasOwnProperty.call(Popper, 'default') ? Popper['default'] : Popper

      function _defineProperties (target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i]
          descriptor.enumerable = descriptor.enumerable || false
          descriptor.configurable = true
          if ('value' in descriptor) descriptor.writable = true
          Object.defineProperty(target, descriptor.key, descriptor)
        }
      }

      function _createClass (Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps)
        if (staticProps) _defineProperties(Constructor, staticProps)
        return Constructor
      }

      function _defineProperty (obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }

        return obj
      }

      function ownKeys (object, enumerableOnly) {
        var keys = Object.keys(object)

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object)
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable
          })
          keys.push.apply(keys, symbols)
        }

        return keys
      }

      function _objectSpread2 (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {}

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key])
            })
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))
            })
          }
        }

        return target
      }

      function _inheritsLoose (subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype)
        subClass.prototype.constructor = subClass
        subClass.__proto__ = superClass
      }

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v4.5.0): util.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
       * --------------------------------------------------------------------------
       */
      /**
       * ------------------------------------------------------------------------
       * Private TransitionEnd Helpers
       * ------------------------------------------------------------------------
       */

      var TRANSITION_END = 'transitionend'
      var MAX_UID = 1000000
      var MILLISECONDS_MULTIPLIER = 1000 // Shoutout AngusCroll (https://goo.gl/pxwQGp)

      function toType (obj) {
        if (obj === null || typeof obj === 'undefined') {
          return '' + obj
        }

        return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase()
      }

      function getSpecialTransitionEndEvent () {
        return {
          bindType: TRANSITION_END,
          delegateType: TRANSITION_END,
          handle: function handle (event) {
            if ($(event.target).is(this)) {
              return event.handleObj.handler.apply(this, arguments) // eslint-disable-line prefer-rest-params
            }

            return undefined
          }
        }
      }

      function transitionEndEmulator (duration) {
        var _this = this

        var called = false
        $(this).one(Util.TRANSITION_END, function () {
          called = true
        })
        setTimeout(function () {
          if (!called) {
            Util.triggerTransitionEnd(_this)
          }
        }, duration)
        return this
      }

      function setTransitionEndSupport () {
        $.fn.emulateTransitionEnd = transitionEndEmulator
        $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent()
      }

      /**
       * --------------------------------------------------------------------------
       * Public Util Api
       * --------------------------------------------------------------------------
       */


      var Util = {
        TRANSITION_END: 'bsTransitionEnd',
        getUID: function getUID (prefix) {
          do {
            // eslint-disable-next-line no-bitwise
            prefix += ~~(Math.random() * MAX_UID) // "~~" acts like a faster Math.floor() here
          } while (document.getElementById(prefix))

          return prefix
        },
        getSelectorFromElement: function getSelectorFromElement (element) {
          var selector = element.getAttribute('data-target')

          if (!selector || selector === '#') {
            var hrefAttr = element.getAttribute('href')
            selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : ''
          }

          try {
            return document.querySelector(selector) ? selector : null
          } catch (err) {
            return null
          }
        },
        getTransitionDurationFromElement: function getTransitionDurationFromElement (element) {
          if (!element) {
            return 0
          } // Get transition-duration of the element


          var transitionDuration = $(element).css('transition-duration')
          var transitionDelay = $(element).css('transition-delay')
          var floatTransitionDuration = parseFloat(transitionDuration)
          var floatTransitionDelay = parseFloat(transitionDelay) // Return 0 if element or transition duration is not found

          if (!floatTransitionDuration && !floatTransitionDelay) {
            return 0
          } // If multiple durations are defined, take the first


          transitionDuration = transitionDuration.split(',')[0]
          transitionDelay = transitionDelay.split(',')[0]
          return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER
        },
        reflow: function reflow (element) {
          return element.offsetHeight
        },
        triggerTransitionEnd: function triggerTransitionEnd (element) {
          $(element).trigger(TRANSITION_END)
        },
        // TODO: Remove in v5
        supportsTransitionEnd: function supportsTransitionEnd () {
          return Boolean(TRANSITION_END)
        },
        isElement: function isElement (obj) {
          return (obj[0] || obj).nodeType
        },
        typeCheckConfig: function typeCheckConfig (componentName, config, configTypes) {
          for (var property in configTypes) {
            if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
              var expectedTypes = configTypes[property]
              var value = config[property]
              var valueType = value && Util.isElement(value) ? 'element' : toType(value)

              if (!new RegExp(expectedTypes).test(valueType)) {
                throw new Error(componentName.toUpperCase() + ': ' + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'))
              }
            }
          }
        },
        findShadowRoot: function findShadowRoot (element) {
          if (!document.documentElement.attachShadow) {
            return null
          } // Can find the shadow root otherwise it'll return the document


          if (typeof element.getRootNode === 'function') {
            var root = element.getRootNode()
            return root instanceof ShadowRoot ? root : null
          }

          if (element instanceof ShadowRoot) {
            return element
          } // when we don't find a shadow root


          if (!element.parentNode) {
            return null
          }

          return Util.findShadowRoot(element.parentNode)
        },
        jQueryDetection: function jQueryDetection () {
          if (typeof $ === 'undefined') {
            throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.')
          }

          var version = $.fn.jquery.split(' ')[0].split('.')
          var minMajor = 1
          var ltMajor = 2
          var minMinor = 9
          var minPatch = 1
          var maxMajor = 4

          if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
            throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0')
          }
        }
      }
      Util.jQueryDetection()
      setTransitionEndSupport()

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME = 'alert'
      var VERSION = '4.5.0'
      var DATA_KEY = 'bs.alert'
      var EVENT_KEY = '.' + DATA_KEY
      var DATA_API_KEY = '.data-api'
      var JQUERY_NO_CONFLICT = $.fn[NAME]
      var SELECTOR_DISMISS = '[data-dismiss="alert"]'
      var EVENT_CLOSE = 'close' + EVENT_KEY
      var EVENT_CLOSED = 'closed' + EVENT_KEY
      var EVENT_CLICK_DATA_API = 'click' + EVENT_KEY + DATA_API_KEY
      var CLASS_NAME_ALERT = 'alert'
      var CLASS_NAME_FADE = 'fade'
      var CLASS_NAME_SHOW = 'show'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Alert = /*#__PURE__*/function () {
        function Alert (element) {
          this._element = element
        } // Getters


        var _proto = Alert.prototype

        // Public
        _proto.close = function close (element) {
          var rootElement = this._element

          if (element) {
            rootElement = this._getRootElement(element)
          }

          var customEvent = this._triggerCloseEvent(rootElement)

          if (customEvent.isDefaultPrevented()) {
            return
          }

          this._removeElement(rootElement)
        }

        _proto.dispose = function dispose () {
          $.removeData(this._element, DATA_KEY)
          this._element = null
        } // Private


        _proto._getRootElement = function _getRootElement (element) {
          var selector = Util.getSelectorFromElement(element)
          var parent = false

          if (selector) {
            parent = document.querySelector(selector)
          }

          if (!parent) {
            parent = $(element).closest('.' + CLASS_NAME_ALERT)[0]
          }

          return parent
        }

        _proto._triggerCloseEvent = function _triggerCloseEvent (element) {
          var closeEvent = $.Event(EVENT_CLOSE)
          $(element).trigger(closeEvent)
          return closeEvent
        }

        _proto._removeElement = function _removeElement (element) {
          var _this = this

          $(element).removeClass(CLASS_NAME_SHOW)

          if (!$(element).hasClass(CLASS_NAME_FADE)) {
            this._destroyElement(element)

            return
          }

          var transitionDuration = Util.getTransitionDurationFromElement(element)
          $(element).one(Util.TRANSITION_END, function (event) {
            return _this._destroyElement(element, event)
          }).emulateTransitionEnd(transitionDuration)
        }

        _proto._destroyElement = function _destroyElement (element) {
          $(element).detach().trigger(EVENT_CLOSED).remove()
        } // Static


        Alert._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var $element = $(this)
            var data = $element.data(DATA_KEY)

            if (!data) {
              data = new Alert(this)
              $element.data(DATA_KEY, data)
            }

            if (config === 'close') {
              data[config](this)
            }
          })
        }

        Alert._handleDismiss = function _handleDismiss (alertInstance) {
          return function (event) {
            if (event) {
              event.preventDefault()
            }

            alertInstance.close(this)
          }
        }

        _createClass(Alert, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION
          }
        }])

        return Alert
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(document).on(EVENT_CLICK_DATA_API, SELECTOR_DISMISS, Alert._handleDismiss(new Alert()))
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME] = Alert._jQueryInterface
      $.fn[NAME].Constructor = Alert

      $.fn[NAME].noConflict = function () {
        $.fn[NAME] = JQUERY_NO_CONFLICT
        return Alert._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$1 = 'button'
      var VERSION$1 = '4.5.0'
      var DATA_KEY$1 = 'bs.button'
      var EVENT_KEY$1 = '.' + DATA_KEY$1
      var DATA_API_KEY$1 = '.data-api'
      var JQUERY_NO_CONFLICT$1 = $.fn[NAME$1]
      var CLASS_NAME_ACTIVE = 'active'
      var CLASS_NAME_BUTTON = 'btn'
      var CLASS_NAME_FOCUS = 'focus'
      var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]'
      var SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]'
      var SELECTOR_DATA_TOGGLE = '[data-toggle="button"]'
      var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn'
      var SELECTOR_INPUT = 'input:not([type="hidden"])'
      var SELECTOR_ACTIVE = '.active'
      var SELECTOR_BUTTON = '.btn'
      var EVENT_CLICK_DATA_API$1 = 'click' + EVENT_KEY$1 + DATA_API_KEY$1
      var EVENT_FOCUS_BLUR_DATA_API = 'focus' + EVENT_KEY$1 + DATA_API_KEY$1 + ' ' + ('blur' + EVENT_KEY$1 + DATA_API_KEY$1)
      var EVENT_LOAD_DATA_API = 'load' + EVENT_KEY$1 + DATA_API_KEY$1
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Button = /*#__PURE__*/function () {
        function Button (element) {
          this._element = element
        } // Getters


        var _proto = Button.prototype

        // Public
        _proto.toggle = function toggle () {
          var triggerChangeEvent = true
          var addAriaPressed = true
          var rootElement = $(this._element).closest(SELECTOR_DATA_TOGGLES)[0]

          if (rootElement) {
            var input = this._element.querySelector(SELECTOR_INPUT)

            if (input) {
              if (input.type === 'radio') {
                if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
                  triggerChangeEvent = false
                } else {
                  var activeElement = rootElement.querySelector(SELECTOR_ACTIVE)

                  if (activeElement) {
                    $(activeElement).removeClass(CLASS_NAME_ACTIVE)
                  }
                }
              }

              if (triggerChangeEvent) {
                // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
                if (input.type === 'checkbox' || input.type === 'radio') {
                  input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE)
                }

                $(input).trigger('change')
              }

              input.focus()
              addAriaPressed = false
            }
          }

          if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
            if (addAriaPressed) {
              this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE))
            }

            if (triggerChangeEvent) {
              $(this._element).toggleClass(CLASS_NAME_ACTIVE)
            }
          }
        }

        _proto.dispose = function dispose () {
          $.removeData(this._element, DATA_KEY$1)
          this._element = null
        } // Static


        Button._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY$1)

            if (!data) {
              data = new Button(this)
              $(this).data(DATA_KEY$1, data)
            }

            if (config === 'toggle') {
              data[config]()
            }
          })
        }

        _createClass(Button, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$1
          }
        }])

        return Button
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(document).on(EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
        var button = event.target
        var initialButton = button

        if (!$(button).hasClass(CLASS_NAME_BUTTON)) {
          button = $(button).closest(SELECTOR_BUTTON)[0]
        }

        if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
          event.preventDefault() // work around Firefox bug #1540995
        } else {
          var inputBtn = button.querySelector(SELECTOR_INPUT)

          if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
            event.preventDefault() // work around Firefox bug #1540995

            return
          }

          if (initialButton.tagName === 'LABEL' && inputBtn && inputBtn.type === 'checkbox') {
            event.preventDefault() // work around event sent to label and input
          }

          Button._jQueryInterface.call($(button), 'toggle')
        }
      }).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
        var button = $(event.target).closest(SELECTOR_BUTTON)[0]
        $(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type))
      })
      $(window).on(EVENT_LOAD_DATA_API, function () {
        // ensure correct active class is set to match the controls' actual values/states
        // find all checkboxes/readio buttons inside data-toggle groups
        var buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS))

        for (var i = 0, len = buttons.length; i < len; i++) {
          var button = buttons[i]
          var input = button.querySelector(SELECTOR_INPUT)

          if (input.checked || input.hasAttribute('checked')) {
            button.classList.add(CLASS_NAME_ACTIVE)
          } else {
            button.classList.remove(CLASS_NAME_ACTIVE)
          }
        } // find all button toggles


        buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE))

        for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
          var _button = buttons[_i]

          if (_button.getAttribute('aria-pressed') === 'true') {
            _button.classList.add(CLASS_NAME_ACTIVE)
          } else {
            _button.classList.remove(CLASS_NAME_ACTIVE)
          }
        }
      })
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME$1] = Button._jQueryInterface
      $.fn[NAME$1].Constructor = Button

      $.fn[NAME$1].noConflict = function () {
        $.fn[NAME$1] = JQUERY_NO_CONFLICT$1
        return Button._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$2 = 'carousel'
      var VERSION$2 = '4.5.0'
      var DATA_KEY$2 = 'bs.carousel'
      var EVENT_KEY$2 = '.' + DATA_KEY$2
      var DATA_API_KEY$2 = '.data-api'
      var JQUERY_NO_CONFLICT$2 = $.fn[NAME$2]
      var ARROW_LEFT_KEYCODE = 37 // KeyboardEvent.which value for left arrow key

      var ARROW_RIGHT_KEYCODE = 39 // KeyboardEvent.which value for right arrow key

      var TOUCHEVENT_COMPAT_WAIT = 500 // Time for mouse compat events to fire after touch

      var SWIPE_THRESHOLD = 40
      var Default = {
        interval: 5000,
        keyboard: true,
        slide: false,
        pause: 'hover',
        wrap: true,
        touch: true
      }
      var DefaultType = {
        interval: '(number|boolean)',
        keyboard: 'boolean',
        slide: '(boolean|string)',
        pause: '(string|boolean)',
        wrap: 'boolean',
        touch: 'boolean'
      }
      var DIRECTION_NEXT = 'next'
      var DIRECTION_PREV = 'prev'
      var DIRECTION_LEFT = 'left'
      var DIRECTION_RIGHT = 'right'
      var EVENT_SLIDE = 'slide' + EVENT_KEY$2
      var EVENT_SLID = 'slid' + EVENT_KEY$2
      var EVENT_KEYDOWN = 'keydown' + EVENT_KEY$2
      var EVENT_MOUSEENTER = 'mouseenter' + EVENT_KEY$2
      var EVENT_MOUSELEAVE = 'mouseleave' + EVENT_KEY$2
      var EVENT_TOUCHSTART = 'touchstart' + EVENT_KEY$2
      var EVENT_TOUCHMOVE = 'touchmove' + EVENT_KEY$2
      var EVENT_TOUCHEND = 'touchend' + EVENT_KEY$2
      var EVENT_POINTERDOWN = 'pointerdown' + EVENT_KEY$2
      var EVENT_POINTERUP = 'pointerup' + EVENT_KEY$2
      var EVENT_DRAG_START = 'dragstart' + EVENT_KEY$2
      var EVENT_LOAD_DATA_API$1 = 'load' + EVENT_KEY$2 + DATA_API_KEY$2
      var EVENT_CLICK_DATA_API$2 = 'click' + EVENT_KEY$2 + DATA_API_KEY$2
      var CLASS_NAME_CAROUSEL = 'carousel'
      var CLASS_NAME_ACTIVE$1 = 'active'
      var CLASS_NAME_SLIDE = 'slide'
      var CLASS_NAME_RIGHT = 'carousel-item-right'
      var CLASS_NAME_LEFT = 'carousel-item-left'
      var CLASS_NAME_NEXT = 'carousel-item-next'
      var CLASS_NAME_PREV = 'carousel-item-prev'
      var CLASS_NAME_POINTER_EVENT = 'pointer-event'
      var SELECTOR_ACTIVE$1 = '.active'
      var SELECTOR_ACTIVE_ITEM = '.active.carousel-item'
      var SELECTOR_ITEM = '.carousel-item'
      var SELECTOR_ITEM_IMG = '.carousel-item img'
      var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev'
      var SELECTOR_INDICATORS = '.carousel-indicators'
      var SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]'
      var SELECTOR_DATA_RIDE = '[data-ride="carousel"]'
      var PointerType = {
        TOUCH: 'touch',
        PEN: 'pen'
      }
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Carousel = /*#__PURE__*/function () {
        function Carousel (element, config) {
          this._items = null
          this._interval = null
          this._activeElement = null
          this._isPaused = false
          this._isSliding = false
          this.touchTimeout = null
          this.touchStartX = 0
          this.touchDeltaX = 0
          this._config = this._getConfig(config)
          this._element = element
          this._indicatorsElement = this._element.querySelector(SELECTOR_INDICATORS)
          this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0
          this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent)

          this._addEventListeners()
        } // Getters


        var _proto = Carousel.prototype

        // Public
        _proto.next = function next () {
          if (!this._isSliding) {
            this._slide(DIRECTION_NEXT)
          }
        }

        _proto.nextWhenVisible = function nextWhenVisible () {
          // Don't call next when the page isn't visible
          // or the carousel or its parent isn't visible
          if (!document.hidden && $(this._element).is(':visible') && $(this._element).css('visibility') !== 'hidden') {
            this.next()
          }
        }

        _proto.prev = function prev () {
          if (!this._isSliding) {
            this._slide(DIRECTION_PREV)
          }
        }

        _proto.pause = function pause (event) {
          if (!event) {
            this._isPaused = true
          }

          if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
            Util.triggerTransitionEnd(this._element)
            this.cycle(true)
          }

          clearInterval(this._interval)
          this._interval = null
        }

        _proto.cycle = function cycle (event) {
          if (!event) {
            this._isPaused = false
          }

          if (this._interval) {
            clearInterval(this._interval)
            this._interval = null
          }

          if (this._config.interval && !this._isPaused) {
            this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval)
          }
        }

        _proto.to = function to (index) {
          var _this = this

          this._activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM)

          var activeIndex = this._getItemIndex(this._activeElement)

          if (index > this._items.length - 1 || index < 0) {
            return
          }

          if (this._isSliding) {
            $(this._element).one(EVENT_SLID, function () {
              return _this.to(index)
            })
            return
          }

          if (activeIndex === index) {
            this.pause()
            this.cycle()
            return
          }

          var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV

          this._slide(direction, this._items[index])
        }

        _proto.dispose = function dispose () {
          $(this._element).off(EVENT_KEY$2)
          $.removeData(this._element, DATA_KEY$2)
          this._items = null
          this._config = null
          this._element = null
          this._interval = null
          this._isPaused = null
          this._isSliding = null
          this._activeElement = null
          this._indicatorsElement = null
        } // Private


        _proto._getConfig = function _getConfig (config) {
          config = _objectSpread2(_objectSpread2({}, Default), config)
          Util.typeCheckConfig(NAME$2, config, DefaultType)
          return config
        }

        _proto._handleSwipe = function _handleSwipe () {
          var absDeltax = Math.abs(this.touchDeltaX)

          if (absDeltax <= SWIPE_THRESHOLD) {
            return
          }

          var direction = absDeltax / this.touchDeltaX
          this.touchDeltaX = 0 // swipe left

          if (direction > 0) {
            this.prev()
          } // swipe right


          if (direction < 0) {
            this.next()
          }
        }

        _proto._addEventListeners = function _addEventListeners () {
          var _this2 = this

          if (this._config.keyboard) {
            $(this._element).on(EVENT_KEYDOWN, function (event) {
              return _this2._keydown(event)
            })
          }

          if (this._config.pause === 'hover') {
            $(this._element).on(EVENT_MOUSEENTER, function (event) {
              return _this2.pause(event)
            }).on(EVENT_MOUSELEAVE, function (event) {
              return _this2.cycle(event)
            })
          }

          if (this._config.touch) {
            this._addTouchEventListeners()
          }
        }

        _proto._addTouchEventListeners = function _addTouchEventListeners () {
          var _this3 = this

          if (!this._touchSupported) {
            return
          }

          var start = function start (event) {
            if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
              _this3.touchStartX = event.originalEvent.clientX
            } else if (!_this3._pointerEvent) {
              _this3.touchStartX = event.originalEvent.touches[0].clientX
            }
          }

          var move = function move (event) {
            // ensure swiping with one touch and not pinching
            if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
              _this3.touchDeltaX = 0
            } else {
              _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX
            }
          }

          var end = function end (event) {
            if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
              _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX
            }

            _this3._handleSwipe()

            if (_this3._config.pause === 'hover') {
              // If it's a touch-enabled device, mouseenter/leave are fired as
              // part of the mouse compatibility events on first tap - the carousel
              // would stop cycling until user tapped out of it;
              // here, we listen for touchend, explicitly pause the carousel
              // (as if it's the second time we tap on it, mouseenter compat event
              // is NOT fired) and after a timeout (to allow for mouse compatibility
              // events to fire) we explicitly restart cycling
              _this3.pause()

              if (_this3.touchTimeout) {
                clearTimeout(_this3.touchTimeout)
              }

              _this3.touchTimeout = setTimeout(function (event) {
                return _this3.cycle(event)
              }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval)
            }
          }

          $(this._element.querySelectorAll(SELECTOR_ITEM_IMG)).on(EVENT_DRAG_START, function (e) {
            return e.preventDefault()
          })

          if (this._pointerEvent) {
            $(this._element).on(EVENT_POINTERDOWN, function (event) {
              return start(event)
            })
            $(this._element).on(EVENT_POINTERUP, function (event) {
              return end(event)
            })

            this._element.classList.add(CLASS_NAME_POINTER_EVENT)
          } else {
            $(this._element).on(EVENT_TOUCHSTART, function (event) {
              return start(event)
            })
            $(this._element).on(EVENT_TOUCHMOVE, function (event) {
              return move(event)
            })
            $(this._element).on(EVENT_TOUCHEND, function (event) {
              return end(event)
            })
          }
        }

        _proto._keydown = function _keydown (event) {
          if (/input|textarea/i.test(event.target.tagName)) {
            return
          }

          switch (event.which) {
            case ARROW_LEFT_KEYCODE:
              event.preventDefault()
              this.prev()
              break

            case ARROW_RIGHT_KEYCODE:
              event.preventDefault()
              this.next()
              break
          }
        }

        _proto._getItemIndex = function _getItemIndex (element) {
          this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(SELECTOR_ITEM)) : []
          return this._items.indexOf(element)
        }

        _proto._getItemByDirection = function _getItemByDirection (direction, activeElement) {
          var isNextDirection = direction === DIRECTION_NEXT
          var isPrevDirection = direction === DIRECTION_PREV

          var activeIndex = this._getItemIndex(activeElement)

          var lastItemIndex = this._items.length - 1
          var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex

          if (isGoingToWrap && !this._config.wrap) {
            return activeElement
          }

          var delta = direction === DIRECTION_PREV ? -1 : 1
          var itemIndex = (activeIndex + delta) % this._items.length
          return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex]
        }

        _proto._triggerSlideEvent = function _triggerSlideEvent (relatedTarget, eventDirectionName) {
          var targetIndex = this._getItemIndex(relatedTarget)

          var fromIndex = this._getItemIndex(this._element.querySelector(SELECTOR_ACTIVE_ITEM))

          var slideEvent = $.Event(EVENT_SLIDE, {
            relatedTarget: relatedTarget,
            direction: eventDirectionName,
            from: fromIndex,
            to: targetIndex
          })
          $(this._element).trigger(slideEvent)
          return slideEvent
        }

        _proto._setActiveIndicatorElement = function _setActiveIndicatorElement (element) {
          if (this._indicatorsElement) {
            var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1))
            $(indicators).removeClass(CLASS_NAME_ACTIVE$1)

            var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)]

            if (nextIndicator) {
              $(nextIndicator).addClass(CLASS_NAME_ACTIVE$1)
            }
          }
        }

        _proto._slide = function _slide (direction, element) {
          var _this4 = this

          var activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM)

          var activeElementIndex = this._getItemIndex(activeElement)

          var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement)

          var nextElementIndex = this._getItemIndex(nextElement)

          var isCycling = Boolean(this._interval)
          var directionalClassName
          var orderClassName
          var eventDirectionName

          if (direction === DIRECTION_NEXT) {
            directionalClassName = CLASS_NAME_LEFT
            orderClassName = CLASS_NAME_NEXT
            eventDirectionName = DIRECTION_LEFT
          } else {
            directionalClassName = CLASS_NAME_RIGHT
            orderClassName = CLASS_NAME_PREV
            eventDirectionName = DIRECTION_RIGHT
          }

          if (nextElement && $(nextElement).hasClass(CLASS_NAME_ACTIVE$1)) {
            this._isSliding = false
            return
          }

          var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName)

          if (slideEvent.isDefaultPrevented()) {
            return
          }

          if (!activeElement || !nextElement) {
            // Some weirdness is happening, so we bail
            return
          }

          this._isSliding = true

          if (isCycling) {
            this.pause()
          }

          this._setActiveIndicatorElement(nextElement)

          var slidEvent = $.Event(EVENT_SLID, {
            relatedTarget: nextElement,
            direction: eventDirectionName,
            from: activeElementIndex,
            to: nextElementIndex
          })

          if ($(this._element).hasClass(CLASS_NAME_SLIDE)) {
            $(nextElement).addClass(orderClassName)
            Util.reflow(nextElement)
            $(activeElement).addClass(directionalClassName)
            $(nextElement).addClass(directionalClassName)
            var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10)

            if (nextElementInterval) {
              this._config.defaultInterval = this._config.defaultInterval || this._config.interval
              this._config.interval = nextElementInterval
            } else {
              this._config.interval = this._config.defaultInterval || this._config.interval
            }

            var transitionDuration = Util.getTransitionDurationFromElement(activeElement)
            $(activeElement).one(Util.TRANSITION_END, function () {
              $(nextElement).removeClass(directionalClassName + ' ' + orderClassName).addClass(CLASS_NAME_ACTIVE$1)
              $(activeElement).removeClass(CLASS_NAME_ACTIVE$1 + ' ' + orderClassName + ' ' + directionalClassName)
              _this4._isSliding = false
              setTimeout(function () {
                return $(_this4._element).trigger(slidEvent)
              }, 0)
            }).emulateTransitionEnd(transitionDuration)
          } else {
            $(activeElement).removeClass(CLASS_NAME_ACTIVE$1)
            $(nextElement).addClass(CLASS_NAME_ACTIVE$1)
            this._isSliding = false
            $(this._element).trigger(slidEvent)
          }

          if (isCycling) {
            this.cycle()
          }
        } // Static


        Carousel._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY$2)

            var _config = _objectSpread2(_objectSpread2({}, Default), $(this).data())

            if (typeof config === 'object') {
              _config = _objectSpread2(_objectSpread2({}, _config), config)
            }

            var action = typeof config === 'string' ? config : _config.slide

            if (!data) {
              data = new Carousel(this, _config)
              $(this).data(DATA_KEY$2, data)
            }

            if (typeof config === 'number') {
              data.to(config)
            } else if (typeof action === 'string') {
              if (typeof data[action] === 'undefined') {
                throw new TypeError('No method named "' + action + '"')
              }

              data[action]()
            } else if (_config.interval && _config.ride) {
              data.pause()
              data.cycle()
            }
          })
        }

        Carousel._dataApiClickHandler = function _dataApiClickHandler (event) {
          var selector = Util.getSelectorFromElement(this)

          if (!selector) {
            return
          }

          var target = $(selector)[0]

          if (!target || !$(target).hasClass(CLASS_NAME_CAROUSEL)) {
            return
          }

          var config = _objectSpread2(_objectSpread2({}, $(target).data()), $(this).data())

          var slideIndex = this.getAttribute('data-slide-to')

          if (slideIndex) {
            config.interval = false
          }

          Carousel._jQueryInterface.call($(target), config)

          if (slideIndex) {
            $(target).data(DATA_KEY$2).to(slideIndex)
          }

          event.preventDefault()
        }

        _createClass(Carousel, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$2
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default
          }
        }])

        return Carousel
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(document).on(EVENT_CLICK_DATA_API$2, SELECTOR_DATA_SLIDE, Carousel._dataApiClickHandler)
      $(window).on(EVENT_LOAD_DATA_API$1, function () {
        var carousels = [].slice.call(document.querySelectorAll(SELECTOR_DATA_RIDE))

        for (var i = 0, len = carousels.length; i < len; i++) {
          var $carousel = $(carousels[i])

          Carousel._jQueryInterface.call($carousel, $carousel.data())
        }
      })
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME$2] = Carousel._jQueryInterface
      $.fn[NAME$2].Constructor = Carousel

      $.fn[NAME$2].noConflict = function () {
        $.fn[NAME$2] = JQUERY_NO_CONFLICT$2
        return Carousel._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$3 = 'collapse'
      var VERSION$3 = '4.5.0'
      var DATA_KEY$3 = 'bs.collapse'
      var EVENT_KEY$3 = '.' + DATA_KEY$3
      var DATA_API_KEY$3 = '.data-api'
      var JQUERY_NO_CONFLICT$3 = $.fn[NAME$3]
      var Default$1 = {
        toggle: true,
        parent: ''
      }
      var DefaultType$1 = {
        toggle: 'boolean',
        parent: '(string|element)'
      }
      var EVENT_SHOW = 'show' + EVENT_KEY$3
      var EVENT_SHOWN = 'shown' + EVENT_KEY$3
      var EVENT_HIDE = 'hide' + EVENT_KEY$3
      var EVENT_HIDDEN = 'hidden' + EVENT_KEY$3
      var EVENT_CLICK_DATA_API$3 = 'click' + EVENT_KEY$3 + DATA_API_KEY$3
      var CLASS_NAME_SHOW$1 = 'show'
      var CLASS_NAME_COLLAPSE = 'collapse'
      var CLASS_NAME_COLLAPSING = 'collapsing'
      var CLASS_NAME_COLLAPSED = 'collapsed'
      var DIMENSION_WIDTH = 'width'
      var DIMENSION_HEIGHT = 'height'
      var SELECTOR_ACTIVES = '.show, .collapsing'
      var SELECTOR_DATA_TOGGLE$1 = '[data-toggle="collapse"]'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Collapse = /*#__PURE__*/function () {
        function Collapse (element, config) {
          this._isTransitioning = false
          this._element = element
          this._config = this._getConfig(config)
          this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]')))
          var toggleList = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$1))

          for (var i = 0, len = toggleList.length; i < len; i++) {
            var elem = toggleList[i]
            var selector = Util.getSelectorFromElement(elem)
            var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
              return foundElem === element
            })

            if (selector !== null && filterElement.length > 0) {
              this._selector = selector

              this._triggerArray.push(elem)
            }
          }

          this._parent = this._config.parent ? this._getParent() : null

          if (!this._config.parent) {
            this._addAriaAndCollapsedClass(this._element, this._triggerArray)
          }

          if (this._config.toggle) {
            this.toggle()
          }
        } // Getters


        var _proto = Collapse.prototype

        // Public
        _proto.toggle = function toggle () {
          if ($(this._element).hasClass(CLASS_NAME_SHOW$1)) {
            this.hide()
          } else {
            this.show()
          }
        }

        _proto.show = function show () {
          var _this = this

          if (this._isTransitioning || $(this._element).hasClass(CLASS_NAME_SHOW$1)) {
            return
          }

          var actives
          var activesData

          if (this._parent) {
            actives = [].slice.call(this._parent.querySelectorAll(SELECTOR_ACTIVES)).filter(function (elem) {
              if (typeof _this._config.parent === 'string') {
                return elem.getAttribute('data-parent') === _this._config.parent
              }

              return elem.classList.contains(CLASS_NAME_COLLAPSE)
            })

            if (actives.length === 0) {
              actives = null
            }
          }

          if (actives) {
            activesData = $(actives).not(this._selector).data(DATA_KEY$3)

            if (activesData && activesData._isTransitioning) {
              return
            }
          }

          var startEvent = $.Event(EVENT_SHOW)
          $(this._element).trigger(startEvent)

          if (startEvent.isDefaultPrevented()) {
            return
          }

          if (actives) {
            Collapse._jQueryInterface.call($(actives).not(this._selector), 'hide')

            if (!activesData) {
              $(actives).data(DATA_KEY$3, null)
            }
          }

          var dimension = this._getDimension()

          $(this._element).removeClass(CLASS_NAME_COLLAPSE).addClass(CLASS_NAME_COLLAPSING)
          this._element.style[dimension] = 0

          if (this._triggerArray.length) {
            $(this._triggerArray).removeClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', true)
          }

          this.setTransitioning(true)

          var complete = function complete () {
            $(_this._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE + ' ' + CLASS_NAME_SHOW$1)
            _this._element.style[dimension] = ''

            _this.setTransitioning(false)

            $(_this._element).trigger(EVENT_SHOWN)
          }

          var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1)
          var scrollSize = 'scroll' + capitalizedDimension
          var transitionDuration = Util.getTransitionDurationFromElement(this._element)
          $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration)
          this._element.style[dimension] = this._element[scrollSize] + 'px'
        }

        _proto.hide = function hide () {
          var _this2 = this

          if (this._isTransitioning || !$(this._element).hasClass(CLASS_NAME_SHOW$1)) {
            return
          }

          var startEvent = $.Event(EVENT_HIDE)
          $(this._element).trigger(startEvent)

          if (startEvent.isDefaultPrevented()) {
            return
          }

          var dimension = this._getDimension()

          this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + 'px'
          Util.reflow(this._element)
          $(this._element).addClass(CLASS_NAME_COLLAPSING).removeClass(CLASS_NAME_COLLAPSE + ' ' + CLASS_NAME_SHOW$1)
          var triggerArrayLength = this._triggerArray.length

          if (triggerArrayLength > 0) {
            for (var i = 0; i < triggerArrayLength; i++) {
              var trigger = this._triggerArray[i]
              var selector = Util.getSelectorFromElement(trigger)

              if (selector !== null) {
                var $elem = $([].slice.call(document.querySelectorAll(selector)))

                if (!$elem.hasClass(CLASS_NAME_SHOW$1)) {
                  $(trigger).addClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', false)
                }
              }
            }
          }

          this.setTransitioning(true)

          var complete = function complete () {
            _this2.setTransitioning(false)

            $(_this2._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE).trigger(EVENT_HIDDEN)
          }

          this._element.style[dimension] = ''
          var transitionDuration = Util.getTransitionDurationFromElement(this._element)
          $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration)
        }

        _proto.setTransitioning = function setTransitioning (isTransitioning) {
          this._isTransitioning = isTransitioning
        }

        _proto.dispose = function dispose () {
          $.removeData(this._element, DATA_KEY$3)
          this._config = null
          this._parent = null
          this._element = null
          this._triggerArray = null
          this._isTransitioning = null
        } // Private


        _proto._getConfig = function _getConfig (config) {
          config = _objectSpread2(_objectSpread2({}, Default$1), config)
          config.toggle = Boolean(config.toggle) // Coerce string values

          Util.typeCheckConfig(NAME$3, config, DefaultType$1)
          return config
        }

        _proto._getDimension = function _getDimension () {
          var hasWidth = $(this._element).hasClass(DIMENSION_WIDTH)
          return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT
        }

        _proto._getParent = function _getParent () {
          var _this3 = this

          var parent

          if (Util.isElement(this._config.parent)) {
            parent = this._config.parent // It's a jQuery object

            if (typeof this._config.parent.jquery !== 'undefined') {
              parent = this._config.parent[0]
            }
          } else {
            parent = document.querySelector(this._config.parent)
          }

          var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]'
          var children = [].slice.call(parent.querySelectorAll(selector))
          $(children).each(function (i, element) {
            _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element])
          })
          return parent
        }

        _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass (element, triggerArray) {
          var isOpen = $(element).hasClass(CLASS_NAME_SHOW$1)

          if (triggerArray.length) {
            $(triggerArray).toggleClass(CLASS_NAME_COLLAPSED, !isOpen).attr('aria-expanded', isOpen)
          }
        } // Static


        Collapse._getTargetFromElement = function _getTargetFromElement (element) {
          var selector = Util.getSelectorFromElement(element)
          return selector ? document.querySelector(selector) : null
        }

        Collapse._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var $this = $(this)
            var data = $this.data(DATA_KEY$3)

            var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$1), $this.data()), typeof config === 'object' && config ? config : {})

            if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {
              _config.toggle = false
            }

            if (!data) {
              data = new Collapse(this, _config)
              $this.data(DATA_KEY$3, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config]()
            }
          })
        }

        _createClass(Collapse, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$3
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default$1
          }
        }])

        return Collapse
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(document).on(EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$1, function (event) {
        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
        if (event.currentTarget.tagName === 'A') {
          event.preventDefault()
        }

        var $trigger = $(this)
        var selector = Util.getSelectorFromElement(this)
        var selectors = [].slice.call(document.querySelectorAll(selector))
        $(selectors).each(function () {
          var $target = $(this)
          var data = $target.data(DATA_KEY$3)
          var config = data ? 'toggle' : $trigger.data()

          Collapse._jQueryInterface.call($target, config)
        })
      })
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME$3] = Collapse._jQueryInterface
      $.fn[NAME$3].Constructor = Collapse

      $.fn[NAME$3].noConflict = function () {
        $.fn[NAME$3] = JQUERY_NO_CONFLICT$3
        return Collapse._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$4 = 'dropdown'
      var VERSION$4 = '4.5.0'
      var DATA_KEY$4 = 'bs.dropdown'
      var EVENT_KEY$4 = '.' + DATA_KEY$4
      var DATA_API_KEY$4 = '.data-api'
      var JQUERY_NO_CONFLICT$4 = $.fn[NAME$4]
      var ESCAPE_KEYCODE = 27 // KeyboardEvent.which value for Escape (Esc) key

      var SPACE_KEYCODE = 32 // KeyboardEvent.which value for space key

      var TAB_KEYCODE = 9 // KeyboardEvent.which value for tab key

      var ARROW_UP_KEYCODE = 38 // KeyboardEvent.which value for up arrow key

      var ARROW_DOWN_KEYCODE = 40 // KeyboardEvent.which value for down arrow key

      var RIGHT_MOUSE_BUTTON_WHICH = 3 // MouseEvent.which value for the right button (assuming a right-handed mouse)

      var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + '|' + ARROW_DOWN_KEYCODE + '|' + ESCAPE_KEYCODE)
      var EVENT_HIDE$1 = 'hide' + EVENT_KEY$4
      var EVENT_HIDDEN$1 = 'hidden' + EVENT_KEY$4
      var EVENT_SHOW$1 = 'show' + EVENT_KEY$4
      var EVENT_SHOWN$1 = 'shown' + EVENT_KEY$4
      var EVENT_CLICK = 'click' + EVENT_KEY$4
      var EVENT_CLICK_DATA_API$4 = 'click' + EVENT_KEY$4 + DATA_API_KEY$4
      var EVENT_KEYDOWN_DATA_API = 'keydown' + EVENT_KEY$4 + DATA_API_KEY$4
      var EVENT_KEYUP_DATA_API = 'keyup' + EVENT_KEY$4 + DATA_API_KEY$4
      var CLASS_NAME_DISABLED = 'disabled'
      var CLASS_NAME_SHOW$2 = 'show'
      var CLASS_NAME_DROPUP = 'dropup'
      var CLASS_NAME_DROPRIGHT = 'dropright'
      var CLASS_NAME_DROPLEFT = 'dropleft'
      var CLASS_NAME_MENURIGHT = 'dropdown-menu-right'
      var CLASS_NAME_POSITION_STATIC = 'position-static'
      var SELECTOR_DATA_TOGGLE$2 = '[data-toggle="dropdown"]'
      var SELECTOR_FORM_CHILD = '.dropdown form'
      var SELECTOR_MENU = '.dropdown-menu'
      var SELECTOR_NAVBAR_NAV = '.navbar-nav'
      var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
      var PLACEMENT_TOP = 'top-start'
      var PLACEMENT_TOPEND = 'top-end'
      var PLACEMENT_BOTTOM = 'bottom-start'
      var PLACEMENT_BOTTOMEND = 'bottom-end'
      var PLACEMENT_RIGHT = 'right-start'
      var PLACEMENT_LEFT = 'left-start'
      var Default$2 = {
        offset: 0,
        flip: true,
        boundary: 'scrollParent',
        reference: 'toggle',
        display: 'dynamic',
        popperConfig: null
      }
      var DefaultType$2 = {
        offset: '(number|string|function)',
        flip: 'boolean',
        boundary: '(string|element)',
        reference: '(string|element)',
        display: 'string',
        popperConfig: '(null|object)'
      }
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Dropdown = /*#__PURE__*/function () {
        function Dropdown (element, config) {
          this._element = element
          this._popper = null
          this._config = this._getConfig(config)
          this._menu = this._getMenuElement()
          this._inNavbar = this._detectNavbar()

          this._addEventListeners()
        } // Getters


        var _proto = Dropdown.prototype

        // Public
        _proto.toggle = function toggle () {
          if (this._element.disabled || $(this._element).hasClass(CLASS_NAME_DISABLED)) {
            return
          }

          var isActive = $(this._menu).hasClass(CLASS_NAME_SHOW$2)

          Dropdown._clearMenus()

          if (isActive) {
            return
          }

          this.show(true)
        }

        _proto.show = function show (usePopper) {
          if (usePopper === void 0) {
            usePopper = false
          }

          if (this._element.disabled || $(this._element).hasClass(CLASS_NAME_DISABLED) || $(this._menu).hasClass(CLASS_NAME_SHOW$2)) {
            return
          }

          var relatedTarget = {
            relatedTarget: this._element
          }
          var showEvent = $.Event(EVENT_SHOW$1, relatedTarget)

          var parent = Dropdown._getParentFromElement(this._element)

          $(parent).trigger(showEvent)

          if (showEvent.isDefaultPrevented()) {
            return
          } // Disable totally Popper.js for Dropdown in Navbar


          if (!this._inNavbar && usePopper) {
            /**
             * Check for Popper dependency
             * Popper - https://popper.js.org
             */
            if (typeof Popper === 'undefined') {
              throw new TypeError('Bootstrap\'s dropdowns require Popper.js (https://popper.js.org/)')
            }

            var referenceElement = this._element

            if (this._config.reference === 'parent') {
              referenceElement = parent
            } else if (Util.isElement(this._config.reference)) {
              referenceElement = this._config.reference // Check if it's jQuery element

              if (typeof this._config.reference.jquery !== 'undefined') {
                referenceElement = this._config.reference[0]
              }
            } // If boundary is not `scrollParent`, then set position to `static`
            // to allow the menu to "escape" the scroll parent's boundaries
            // https://github.com/twbs/bootstrap/issues/24251


            if (this._config.boundary !== 'scrollParent') {
              $(parent).addClass(CLASS_NAME_POSITION_STATIC)
            }

            this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig())
          } // If this is a touch-enabled device we add extra
          // empty mouseover listeners to the body's immediate children;
          // only needed because of broken event delegation on iOS
          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


          if ('ontouchstart' in document.documentElement && $(parent).closest(SELECTOR_NAVBAR_NAV).length === 0) {
            $(document.body).children().on('mouseover', null, $.noop)
          }

          this._element.focus()

          this._element.setAttribute('aria-expanded', true)

          $(this._menu).toggleClass(CLASS_NAME_SHOW$2)
          $(parent).toggleClass(CLASS_NAME_SHOW$2).trigger($.Event(EVENT_SHOWN$1, relatedTarget))
        }

        _proto.hide = function hide () {
          if (this._element.disabled || $(this._element).hasClass(CLASS_NAME_DISABLED) || !$(this._menu).hasClass(CLASS_NAME_SHOW$2)) {
            return
          }

          var relatedTarget = {
            relatedTarget: this._element
          }
          var hideEvent = $.Event(EVENT_HIDE$1, relatedTarget)

          var parent = Dropdown._getParentFromElement(this._element)

          $(parent).trigger(hideEvent)

          if (hideEvent.isDefaultPrevented()) {
            return
          }

          if (this._popper) {
            this._popper.destroy()
          }

          $(this._menu).toggleClass(CLASS_NAME_SHOW$2)
          $(parent).toggleClass(CLASS_NAME_SHOW$2).trigger($.Event(EVENT_HIDDEN$1, relatedTarget))
        }

        _proto.dispose = function dispose () {
          $.removeData(this._element, DATA_KEY$4)
          $(this._element).off(EVENT_KEY$4)
          this._element = null
          this._menu = null

          if (this._popper !== null) {
            this._popper.destroy()

            this._popper = null
          }
        }

        _proto.update = function update () {
          this._inNavbar = this._detectNavbar()

          if (this._popper !== null) {
            this._popper.scheduleUpdate()
          }
        } // Private


        _proto._addEventListeners = function _addEventListeners () {
          var _this = this

          $(this._element).on(EVENT_CLICK, function (event) {
            event.preventDefault()
            event.stopPropagation()

            _this.toggle()
          })
        }

        _proto._getConfig = function _getConfig (config) {
          config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), $(this._element).data()), config)
          Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType)
          return config
        }

        _proto._getMenuElement = function _getMenuElement () {
          if (!this._menu) {
            var parent = Dropdown._getParentFromElement(this._element)

            if (parent) {
              this._menu = parent.querySelector(SELECTOR_MENU)
            }
          }

          return this._menu
        }

        _proto._getPlacement = function _getPlacement () {
          var $parentDropdown = $(this._element.parentNode)
          var placement = PLACEMENT_BOTTOM // Handle dropup

          if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {
            placement = $(this._menu).hasClass(CLASS_NAME_MENURIGHT) ? PLACEMENT_TOPEND : PLACEMENT_TOP
          } else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {
            placement = PLACEMENT_RIGHT
          } else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {
            placement = PLACEMENT_LEFT
          } else if ($(this._menu).hasClass(CLASS_NAME_MENURIGHT)) {
            placement = PLACEMENT_BOTTOMEND
          }

          return placement
        }

        _proto._detectNavbar = function _detectNavbar () {
          return $(this._element).closest('.navbar').length > 0
        }

        _proto._getOffset = function _getOffset () {
          var _this2 = this

          var offset = {}

          if (typeof this._config.offset === 'function') {
            offset.fn = function (data) {
              data.offsets = _objectSpread2(_objectSpread2({}, data.offsets), _this2._config.offset(data.offsets, _this2._element) || {})
              return data
            }
          } else {
            offset.offset = this._config.offset
          }

          return offset
        }

        _proto._getPopperConfig = function _getPopperConfig () {
          var popperConfig = {
            placement: this._getPlacement(),
            modifiers: {
              offset: this._getOffset(),
              flip: {
                enabled: this._config.flip
              },
              preventOverflow: {
                boundariesElement: this._config.boundary
              }
            }
          } // Disable Popper.js if we have a static display

          if (this._config.display === 'static') {
            popperConfig.modifiers.applyStyle = {
              enabled: false
            }
          }

          return _objectSpread2(_objectSpread2({}, popperConfig), this._config.popperConfig)
        } // Static


        Dropdown._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY$4)

            var _config = typeof config === 'object' ? config : null

            if (!data) {
              data = new Dropdown(this, _config)
              $(this).data(DATA_KEY$4, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config]()
            }
          })
        }

        Dropdown._clearMenus = function _clearMenus (event) {
          if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
            return
          }

          var toggles = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$2))

          for (var i = 0, len = toggles.length; i < len; i++) {
            var parent = Dropdown._getParentFromElement(toggles[i])

            var context = $(toggles[i]).data(DATA_KEY$4)
            var relatedTarget = {
              relatedTarget: toggles[i]
            }

            if (event && event.type === 'click') {
              relatedTarget.clickEvent = event
            }

            if (!context) {
              continue
            }

            var dropdownMenu = context._menu

            if (!$(parent).hasClass(CLASS_NAME_SHOW$2)) {
              continue
            }

            if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {
              continue
            }

            var hideEvent = $.Event(EVENT_HIDE$1, relatedTarget)
            $(parent).trigger(hideEvent)

            if (hideEvent.isDefaultPrevented()) {
              continue
            } // If this is a touch-enabled device we remove the extra
            // empty mouseover listeners we added for iOS support


            if ('ontouchstart' in document.documentElement) {
              $(document.body).children().off('mouseover', null, $.noop)
            }

            toggles[i].setAttribute('aria-expanded', 'false')

            if (context._popper) {
              context._popper.destroy()
            }

            $(dropdownMenu).removeClass(CLASS_NAME_SHOW$2)
            $(parent).removeClass(CLASS_NAME_SHOW$2).trigger($.Event(EVENT_HIDDEN$1, relatedTarget))
          }
        }

        Dropdown._getParentFromElement = function _getParentFromElement (element) {
          var parent
          var selector = Util.getSelectorFromElement(element)

          if (selector) {
            parent = document.querySelector(selector)
          }

          return parent || element.parentNode
        } // eslint-disable-next-line complexity


        Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler (event) {
          // If not input/textarea:
          //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
          // If input/textarea:
          //  - If space key => not a dropdown command
          //  - If key is other than escape
          //    - If key is not up or down => not a dropdown command
          //    - If trigger inside the menu => not a dropdown command
          if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $(event.target).closest(SELECTOR_MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
            return
          }

          if (this.disabled || $(this).hasClass(CLASS_NAME_DISABLED)) {
            return
          }

          var parent = Dropdown._getParentFromElement(this)

          var isActive = $(parent).hasClass(CLASS_NAME_SHOW$2)

          if (!isActive && event.which === ESCAPE_KEYCODE) {
            return
          }

          event.preventDefault()
          event.stopPropagation()

          if (!isActive || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
            if (event.which === ESCAPE_KEYCODE) {
              $(parent.querySelector(SELECTOR_DATA_TOGGLE$2)).trigger('focus')
            }

            $(this).trigger('click')
            return
          }

          var items = [].slice.call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS)).filter(function (item) {
            return $(item).is(':visible')
          })

          if (items.length === 0) {
            return
          }

          var index = items.indexOf(event.target)

          if (event.which === ARROW_UP_KEYCODE && index > 0) {
            // Up
            index--
          }

          if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
            // Down
            index++
          }

          if (index < 0) {
            index = 0
          }

          items[index].focus()
        }

        _createClass(Dropdown, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$4
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default$2
          }
        }, {
          key: 'DefaultType',
          get: function get () {
            return DefaultType$2
          }
        }])

        return Dropdown
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(document).on(EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$2, Dropdown._dataApiKeydownHandler).on(EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown._dataApiKeydownHandler).on(EVENT_CLICK_DATA_API$4 + ' ' + EVENT_KEYUP_DATA_API, Dropdown._clearMenus).on(EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$2, function (event) {
        event.preventDefault()
        event.stopPropagation()

        Dropdown._jQueryInterface.call($(this), 'toggle')
      }).on(EVENT_CLICK_DATA_API$4, SELECTOR_FORM_CHILD, function (e) {
        e.stopPropagation()
      })
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME$4] = Dropdown._jQueryInterface
      $.fn[NAME$4].Constructor = Dropdown

      $.fn[NAME$4].noConflict = function () {
        $.fn[NAME$4] = JQUERY_NO_CONFLICT$4
        return Dropdown._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$5 = 'modal'
      var VERSION$5 = '4.5.0'
      var DATA_KEY$5 = 'bs.modal'
      var EVENT_KEY$5 = '.' + DATA_KEY$5
      var DATA_API_KEY$5 = '.data-api'
      var JQUERY_NO_CONFLICT$5 = $.fn[NAME$5]
      var ESCAPE_KEYCODE$1 = 27 // KeyboardEvent.which value for Escape (Esc) key

      var Default$3 = {
        backdrop: true,
        keyboard: true,
        focus: true,
        show: true
      }
      var DefaultType$3 = {
        backdrop: '(boolean|string)',
        keyboard: 'boolean',
        focus: 'boolean',
        show: 'boolean'
      }
      var EVENT_HIDE$2 = 'hide' + EVENT_KEY$5
      var EVENT_HIDE_PREVENTED = 'hidePrevented' + EVENT_KEY$5
      var EVENT_HIDDEN$2 = 'hidden' + EVENT_KEY$5
      var EVENT_SHOW$2 = 'show' + EVENT_KEY$5
      var EVENT_SHOWN$2 = 'shown' + EVENT_KEY$5
      var EVENT_FOCUSIN = 'focusin' + EVENT_KEY$5
      var EVENT_RESIZE = 'resize' + EVENT_KEY$5
      var EVENT_CLICK_DISMISS = 'click.dismiss' + EVENT_KEY$5
      var EVENT_KEYDOWN_DISMISS = 'keydown.dismiss' + EVENT_KEY$5
      var EVENT_MOUSEUP_DISMISS = 'mouseup.dismiss' + EVENT_KEY$5
      var EVENT_MOUSEDOWN_DISMISS = 'mousedown.dismiss' + EVENT_KEY$5
      var EVENT_CLICK_DATA_API$5 = 'click' + EVENT_KEY$5 + DATA_API_KEY$5
      var CLASS_NAME_SCROLLABLE = 'modal-dialog-scrollable'
      var CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure'
      var CLASS_NAME_BACKDROP = 'modal-backdrop'
      var CLASS_NAME_OPEN = 'modal-open'
      var CLASS_NAME_FADE$1 = 'fade'
      var CLASS_NAME_SHOW$3 = 'show'
      var CLASS_NAME_STATIC = 'modal-static'
      var SELECTOR_DIALOG = '.modal-dialog'
      var SELECTOR_MODAL_BODY = '.modal-body'
      var SELECTOR_DATA_TOGGLE$3 = '[data-toggle="modal"]'
      var SELECTOR_DATA_DISMISS = '[data-dismiss="modal"]'
      var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'
      var SELECTOR_STICKY_CONTENT = '.sticky-top'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Modal = /*#__PURE__*/function () {
        function Modal (element, config) {
          this._config = this._getConfig(config)
          this._element = element
          this._dialog = element.querySelector(SELECTOR_DIALOG)
          this._backdrop = null
          this._isShown = false
          this._isBodyOverflowing = false
          this._ignoreBackdropClick = false
          this._isTransitioning = false
          this._scrollbarWidth = 0
        } // Getters


        var _proto = Modal.prototype

        // Public
        _proto.toggle = function toggle (relatedTarget) {
          return this._isShown ? this.hide() : this.show(relatedTarget)
        }

        _proto.show = function show (relatedTarget) {
          var _this = this

          if (this._isShown || this._isTransitioning) {
            return
          }

          if ($(this._element).hasClass(CLASS_NAME_FADE$1)) {
            this._isTransitioning = true
          }

          var showEvent = $.Event(EVENT_SHOW$2, {
            relatedTarget: relatedTarget
          })
          $(this._element).trigger(showEvent)

          if (this._isShown || showEvent.isDefaultPrevented()) {
            return
          }

          this._isShown = true

          this._checkScrollbar()

          this._setScrollbar()

          this._adjustDialog()

          this._setEscapeEvent()

          this._setResizeEvent()

          $(this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function (event) {
            return _this.hide(event)
          })
          $(this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function () {
            $(_this._element).one(EVENT_MOUSEUP_DISMISS, function (event) {
              if ($(event.target).is(_this._element)) {
                _this._ignoreBackdropClick = true
              }
            })
          })

          this._showBackdrop(function () {
            return _this._showElement(relatedTarget)
          })
        }

        _proto.hide = function hide (event) {
          var _this2 = this

          if (event) {
            event.preventDefault()
          }

          if (!this._isShown || this._isTransitioning) {
            return
          }

          var hideEvent = $.Event(EVENT_HIDE$2)
          $(this._element).trigger(hideEvent)

          if (!this._isShown || hideEvent.isDefaultPrevented()) {
            return
          }

          this._isShown = false
          var transition = $(this._element).hasClass(CLASS_NAME_FADE$1)

          if (transition) {
            this._isTransitioning = true
          }

          this._setEscapeEvent()

          this._setResizeEvent()

          $(document).off(EVENT_FOCUSIN)
          $(this._element).removeClass(CLASS_NAME_SHOW$3)
          $(this._element).off(EVENT_CLICK_DISMISS)
          $(this._dialog).off(EVENT_MOUSEDOWN_DISMISS)

          if (transition) {
            var transitionDuration = Util.getTransitionDurationFromElement(this._element)
            $(this._element).one(Util.TRANSITION_END, function (event) {
              return _this2._hideModal(event)
            }).emulateTransitionEnd(transitionDuration)
          } else {
            this._hideModal()
          }
        }

        _proto.dispose = function dispose () {
          [window, this._element, this._dialog].forEach(function (htmlElement) {
            return $(htmlElement).off(EVENT_KEY$5)
          })
          /**
           * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
           * Do not move `document` in `htmlElements` array
           * It will remove `EVENT_CLICK_DATA_API` event that should remain
           */

          $(document).off(EVENT_FOCUSIN)
          $.removeData(this._element, DATA_KEY$5)
          this._config = null
          this._element = null
          this._dialog = null
          this._backdrop = null
          this._isShown = null
          this._isBodyOverflowing = null
          this._ignoreBackdropClick = null
          this._isTransitioning = null
          this._scrollbarWidth = null
        }

        _proto.handleUpdate = function handleUpdate () {
          this._adjustDialog()
        } // Private


        _proto._getConfig = function _getConfig (config) {
          config = _objectSpread2(_objectSpread2({}, Default$3), config)
          Util.typeCheckConfig(NAME$5, config, DefaultType$3)
          return config
        }

        _proto._triggerBackdropTransition = function _triggerBackdropTransition () {
          var _this3 = this

          if (this._config.backdrop === 'static') {
            var hideEventPrevented = $.Event(EVENT_HIDE_PREVENTED)
            $(this._element).trigger(hideEventPrevented)

            if (hideEventPrevented.defaultPrevented) {
              return
            }

            this._element.classList.add(CLASS_NAME_STATIC)

            var modalTransitionDuration = Util.getTransitionDurationFromElement(this._element)
            $(this._element).one(Util.TRANSITION_END, function () {
              _this3._element.classList.remove(CLASS_NAME_STATIC)
            }).emulateTransitionEnd(modalTransitionDuration)

            this._element.focus()
          } else {
            this.hide()
          }
        }

        _proto._showElement = function _showElement (relatedTarget) {
          var _this4 = this

          var transition = $(this._element).hasClass(CLASS_NAME_FADE$1)
          var modalBody = this._dialog ? this._dialog.querySelector(SELECTOR_MODAL_BODY) : null

          if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
            // Don't move modal's DOM position
            document.body.appendChild(this._element)
          }

          this._element.style.display = 'block'

          this._element.removeAttribute('aria-hidden')

          this._element.setAttribute('aria-modal', true)

          if ($(this._dialog).hasClass(CLASS_NAME_SCROLLABLE) && modalBody) {
            modalBody.scrollTop = 0
          } else {
            this._element.scrollTop = 0
          }

          if (transition) {
            Util.reflow(this._element)
          }

          $(this._element).addClass(CLASS_NAME_SHOW$3)

          if (this._config.focus) {
            this._enforceFocus()
          }

          var shownEvent = $.Event(EVENT_SHOWN$2, {
            relatedTarget: relatedTarget
          })

          var transitionComplete = function transitionComplete () {
            if (_this4._config.focus) {
              _this4._element.focus()
            }

            _this4._isTransitioning = false
            $(_this4._element).trigger(shownEvent)
          }

          if (transition) {
            var transitionDuration = Util.getTransitionDurationFromElement(this._dialog)
            $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration)
          } else {
            transitionComplete()
          }
        }

        _proto._enforceFocus = function _enforceFocus () {
          var _this5 = this

          $(document).off(EVENT_FOCUSIN) // Guard against infinite focus loop
            .on(EVENT_FOCUSIN, function (event) {
              if (document !== event.target && _this5._element !== event.target && $(_this5._element).has(event.target).length === 0) {
                _this5._element.focus()
              }
            })
        }

        _proto._setEscapeEvent = function _setEscapeEvent () {
          var _this6 = this

          if (this._isShown) {
            $(this._element).on(EVENT_KEYDOWN_DISMISS, function (event) {
              if (_this6._config.keyboard && event.which === ESCAPE_KEYCODE$1) {
                event.preventDefault()

                _this6.hide()
              } else if (!_this6._config.keyboard && event.which === ESCAPE_KEYCODE$1) {
                _this6._triggerBackdropTransition()
              }
            })
          } else if (!this._isShown) {
            $(this._element).off(EVENT_KEYDOWN_DISMISS)
          }
        }

        _proto._setResizeEvent = function _setResizeEvent () {
          var _this7 = this

          if (this._isShown) {
            $(window).on(EVENT_RESIZE, function (event) {
              return _this7.handleUpdate(event)
            })
          } else {
            $(window).off(EVENT_RESIZE)
          }
        }

        _proto._hideModal = function _hideModal () {
          var _this8 = this

          this._element.style.display = 'none'

          this._element.setAttribute('aria-hidden', true)

          this._element.removeAttribute('aria-modal')

          this._isTransitioning = false

          this._showBackdrop(function () {
            $(document.body).removeClass(CLASS_NAME_OPEN)

            _this8._resetAdjustments()

            _this8._resetScrollbar()

            $(_this8._element).trigger(EVENT_HIDDEN$2)
          })
        }

        _proto._removeBackdrop = function _removeBackdrop () {
          if (this._backdrop) {
            $(this._backdrop).remove()
            this._backdrop = null
          }
        }

        _proto._showBackdrop = function _showBackdrop (callback) {
          var _this9 = this

          var animate = $(this._element).hasClass(CLASS_NAME_FADE$1) ? CLASS_NAME_FADE$1 : ''

          if (this._isShown && this._config.backdrop) {
            this._backdrop = document.createElement('div')
            this._backdrop.className = CLASS_NAME_BACKDROP

            if (animate) {
              this._backdrop.classList.add(animate)
            }

            $(this._backdrop).appendTo(document.body)
            $(this._element).on(EVENT_CLICK_DISMISS, function (event) {
              if (_this9._ignoreBackdropClick) {
                _this9._ignoreBackdropClick = false
                return
              }

              if (event.target !== event.currentTarget) {
                return
              }

              _this9._triggerBackdropTransition()
            })

            if (animate) {
              Util.reflow(this._backdrop)
            }

            $(this._backdrop).addClass(CLASS_NAME_SHOW$3)

            if (!callback) {
              return
            }

            if (!animate) {
              callback()
              return
            }

            var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop)
            $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration)
          } else if (!this._isShown && this._backdrop) {
            $(this._backdrop).removeClass(CLASS_NAME_SHOW$3)

            var callbackRemove = function callbackRemove () {
              _this9._removeBackdrop()

              if (callback) {
                callback()
              }
            }

            if ($(this._element).hasClass(CLASS_NAME_FADE$1)) {
              var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop)

              $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration)
            } else {
              callbackRemove()
            }
          } else if (callback) {
            callback()
          }
        } // ----------------------------------------------------------------------
        // the following methods are used to handle overflowing modals
        // todo (fat): these should probably be refactored out of modal.js
        // ----------------------------------------------------------------------


        _proto._adjustDialog = function _adjustDialog () {
          var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight

          if (!this._isBodyOverflowing && isModalOverflowing) {
            this._element.style.paddingLeft = this._scrollbarWidth + 'px'
          }

          if (this._isBodyOverflowing && !isModalOverflowing) {
            this._element.style.paddingRight = this._scrollbarWidth + 'px'
          }
        }

        _proto._resetAdjustments = function _resetAdjustments () {
          this._element.style.paddingLeft = ''
          this._element.style.paddingRight = ''
        }

        _proto._checkScrollbar = function _checkScrollbar () {
          var rect = document.body.getBoundingClientRect()
          this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth
          this._scrollbarWidth = this._getScrollbarWidth()
        }

        _proto._setScrollbar = function _setScrollbar () {
          var _this10 = this

          if (this._isBodyOverflowing) {
            // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
            //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
            var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT))
            var stickyContent = [].slice.call(document.querySelectorAll(SELECTOR_STICKY_CONTENT)) // Adjust fixed content padding

            $(fixedContent).each(function (index, element) {
              var actualPadding = element.style.paddingRight
              var calculatedPadding = $(element).css('padding-right')
              $(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this10._scrollbarWidth + 'px')
            }) // Adjust sticky content margin

            $(stickyContent).each(function (index, element) {
              var actualMargin = element.style.marginRight
              var calculatedMargin = $(element).css('margin-right')
              $(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this10._scrollbarWidth + 'px')
            }) // Adjust body padding

            var actualPadding = document.body.style.paddingRight
            var calculatedPadding = $(document.body).css('padding-right')
            $(document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + 'px')
          }

          $(document.body).addClass(CLASS_NAME_OPEN)
        }

        _proto._resetScrollbar = function _resetScrollbar () {
          // Restore fixed content padding
          var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT))
          $(fixedContent).each(function (index, element) {
            var padding = $(element).data('padding-right')
            $(element).removeData('padding-right')
            element.style.paddingRight = padding ? padding : ''
          }) // Restore sticky content

          var elements = [].slice.call(document.querySelectorAll('' + SELECTOR_STICKY_CONTENT))
          $(elements).each(function (index, element) {
            var margin = $(element).data('margin-right')

            if (typeof margin !== 'undefined') {
              $(element).css('margin-right', margin).removeData('margin-right')
            }
          }) // Restore body padding

          var padding = $(document.body).data('padding-right')
          $(document.body).removeData('padding-right')
          document.body.style.paddingRight = padding ? padding : ''
        }

        _proto._getScrollbarWidth = function _getScrollbarWidth () {
          // thx d.walsh
          var scrollDiv = document.createElement('div')
          scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER
          document.body.appendChild(scrollDiv)
          var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth
          document.body.removeChild(scrollDiv)
          return scrollbarWidth
        } // Static


        Modal._jQueryInterface = function _jQueryInterface (config, relatedTarget) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY$5)

            var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$3), $(this).data()), typeof config === 'object' && config ? config : {})

            if (!data) {
              data = new Modal(this, _config)
              $(this).data(DATA_KEY$5, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config](relatedTarget)
            } else if (_config.show) {
              data.show(relatedTarget)
            }
          })
        }

        _createClass(Modal, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$5
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default$3
          }
        }])

        return Modal
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(document).on(EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE$3, function (event) {
        var _this11 = this

        var target
        var selector = Util.getSelectorFromElement(this)

        if (selector) {
          target = document.querySelector(selector)
        }

        var config = $(target).data(DATA_KEY$5) ? 'toggle' : _objectSpread2(_objectSpread2({}, $(target).data()), $(this).data())

        if (this.tagName === 'A' || this.tagName === 'AREA') {
          event.preventDefault()
        }

        var $target = $(target).one(EVENT_SHOW$2, function (showEvent) {
          if (showEvent.isDefaultPrevented()) {
            // Only register focus restorer if modal will actually get shown
            return
          }

          $target.one(EVENT_HIDDEN$2, function () {
            if ($(_this11).is(':visible')) {
              _this11.focus()
            }
          })
        })

        Modal._jQueryInterface.call($(target), config, this)
      })
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME$5] = Modal._jQueryInterface
      $.fn[NAME$5].Constructor = Modal

      $.fn[NAME$5].noConflict = function () {
        $.fn[NAME$5] = JQUERY_NO_CONFLICT$5
        return Modal._jQueryInterface
      }

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v4.5.0): tools/sanitizer.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
       * --------------------------------------------------------------------------
       */
      var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']
      var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i
      var DefaultWhitelist = {
        // Global attributes allowed on any supplied element below.
        '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
        a: ['target', 'href', 'title', 'rel'],
        area: [],
        b: [],
        br: [],
        col: [],
        code: [],
        div: [],
        em: [],
        hr: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        i: [],
        img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
        li: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        u: [],
        ul: []
      }
      /**
       * A pattern that recognizes a commonly useful subset of URLs that are safe.
       *
       * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
       */

      var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi
      /**
       * A pattern that matches safe data URLs. Only matches image, video and audio types.
       *
       * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
       */

      var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i

      function allowedAttribute (attr, allowedAttributeList) {
        var attrName = attr.nodeName.toLowerCase()

        if (allowedAttributeList.indexOf(attrName) !== -1) {
          if (uriAttrs.indexOf(attrName) !== -1) {
            return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
          }

          return true
        }

        var regExp = allowedAttributeList.filter(function (attrRegex) {
          return attrRegex instanceof RegExp
        }) // Check if a regular expression validates the attribute.

        for (var i = 0, len = regExp.length; i < len; i++) {
          if (attrName.match(regExp[i])) {
            return true
          }
        }

        return false
      }

      function sanitizeHtml (unsafeHtml, whiteList, sanitizeFn) {
        if (unsafeHtml.length === 0) {
          return unsafeHtml
        }

        if (sanitizeFn && typeof sanitizeFn === 'function') {
          return sanitizeFn(unsafeHtml)
        }

        var domParser = new window.DOMParser()
        var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html')
        var whitelistKeys = Object.keys(whiteList)
        var elements = [].slice.call(createdDocument.body.querySelectorAll('*'))

        var _loop = function _loop (i, len) {
          var el = elements[i]
          var elName = el.nodeName.toLowerCase()

          if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
            el.parentNode.removeChild(el)
            return 'continue'
          }

          var attributeList = [].slice.call(el.attributes)
          var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || [])
          attributeList.forEach(function (attr) {
            if (!allowedAttribute(attr, whitelistedAttributes)) {
              el.removeAttribute(attr.nodeName)
            }
          })
        }

        for (var i = 0, len = elements.length; i < len; i++) {
          var _ret = _loop(i)

          if (_ret === 'continue') continue
        }

        return createdDocument.body.innerHTML
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$6 = 'tooltip'
      var VERSION$6 = '4.5.0'
      var DATA_KEY$6 = 'bs.tooltip'
      var EVENT_KEY$6 = '.' + DATA_KEY$6
      var JQUERY_NO_CONFLICT$6 = $.fn[NAME$6]
      var CLASS_PREFIX = 'bs-tooltip'
      var BSCLS_PREFIX_REGEX = new RegExp('(^|\\s)' + CLASS_PREFIX + '\\S+', 'g')
      var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn']
      var DefaultType$4 = {
        animation: 'boolean',
        template: 'string',
        title: '(string|element|function)',
        trigger: 'string',
        delay: '(number|object)',
        html: 'boolean',
        selector: '(string|boolean)',
        placement: '(string|function)',
        offset: '(number|string|function)',
        container: '(string|element|boolean)',
        fallbackPlacement: '(string|array)',
        boundary: '(string|element)',
        sanitize: 'boolean',
        sanitizeFn: '(null|function)',
        whiteList: 'object',
        popperConfig: '(null|object)'
      }
      var AttachmentMap = {
        AUTO: 'auto',
        TOP: 'top',
        RIGHT: 'right',
        BOTTOM: 'bottom',
        LEFT: 'left'
      }
      var Default$4 = {
        animation: true,
        template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
        trigger: 'hover focus',
        title: '',
        delay: 0,
        html: false,
        selector: false,
        placement: 'top',
        offset: 0,
        container: false,
        fallbackPlacement: 'flip',
        boundary: 'scrollParent',
        sanitize: true,
        sanitizeFn: null,
        whiteList: DefaultWhitelist,
        popperConfig: null
      }
      var HOVER_STATE_SHOW = 'show'
      var HOVER_STATE_OUT = 'out'
      var Event = {
        HIDE: 'hide' + EVENT_KEY$6,
        HIDDEN: 'hidden' + EVENT_KEY$6,
        SHOW: 'show' + EVENT_KEY$6,
        SHOWN: 'shown' + EVENT_KEY$6,
        INSERTED: 'inserted' + EVENT_KEY$6,
        CLICK: 'click' + EVENT_KEY$6,
        FOCUSIN: 'focusin' + EVENT_KEY$6,
        FOCUSOUT: 'focusout' + EVENT_KEY$6,
        MOUSEENTER: 'mouseenter' + EVENT_KEY$6,
        MOUSELEAVE: 'mouseleave' + EVENT_KEY$6
      }
      var CLASS_NAME_FADE$2 = 'fade'
      var CLASS_NAME_SHOW$4 = 'show'
      var SELECTOR_TOOLTIP_INNER = '.tooltip-inner'
      var SELECTOR_ARROW = '.arrow'
      var TRIGGER_HOVER = 'hover'
      var TRIGGER_FOCUS = 'focus'
      var TRIGGER_CLICK = 'click'
      var TRIGGER_MANUAL = 'manual'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Tooltip = /*#__PURE__*/function () {
        function Tooltip (element, config) {
          if (typeof Popper === 'undefined') {
            throw new TypeError('Bootstrap\'s tooltips require Popper.js (https://popper.js.org/)')
          } // private


          this._isEnabled = true
          this._timeout = 0
          this._hoverState = ''
          this._activeTrigger = {}
          this._popper = null // Protected

          this.element = element
          this.config = this._getConfig(config)
          this.tip = null

          this._setListeners()
        } // Getters


        var _proto = Tooltip.prototype

        // Public
        _proto.enable = function enable () {
          this._isEnabled = true
        }

        _proto.disable = function disable () {
          this._isEnabled = false
        }

        _proto.toggleEnabled = function toggleEnabled () {
          this._isEnabled = !this._isEnabled
        }

        _proto.toggle = function toggle (event) {
          if (!this._isEnabled) {
            return
          }

          if (event) {
            var dataKey = this.constructor.DATA_KEY
            var context = $(event.currentTarget).data(dataKey)

            if (!context) {
              context = new this.constructor(event.currentTarget, this._getDelegateConfig())
              $(event.currentTarget).data(dataKey, context)
            }

            context._activeTrigger.click = !context._activeTrigger.click

            if (context._isWithActiveTrigger()) {
              context._enter(null, context)
            } else {
              context._leave(null, context)
            }
          } else {
            if ($(this.getTipElement()).hasClass(CLASS_NAME_SHOW$4)) {
              this._leave(null, this)

              return
            }

            this._enter(null, this)
          }
        }

        _proto.dispose = function dispose () {
          clearTimeout(this._timeout)
          $.removeData(this.element, this.constructor.DATA_KEY)
          $(this.element).off(this.constructor.EVENT_KEY)
          $(this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler)

          if (this.tip) {
            $(this.tip).remove()
          }

          this._isEnabled = null
          this._timeout = null
          this._hoverState = null
          this._activeTrigger = null

          if (this._popper) {
            this._popper.destroy()
          }

          this._popper = null
          this.element = null
          this.config = null
          this.tip = null
        }

        _proto.show = function show () {
          var _this = this

          if ($(this.element).css('display') === 'none') {
            throw new Error('Please use show on visible elements')
          }

          var showEvent = $.Event(this.constructor.Event.SHOW)

          if (this.isWithContent() && this._isEnabled) {
            $(this.element).trigger(showEvent)
            var shadowRoot = Util.findShadowRoot(this.element)
            var isInTheDom = $.contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element)

            if (showEvent.isDefaultPrevented() || !isInTheDom) {
              return
            }

            var tip = this.getTipElement()
            var tipId = Util.getUID(this.constructor.NAME)
            tip.setAttribute('id', tipId)
            this.element.setAttribute('aria-describedby', tipId)
            this.setContent()

            if (this.config.animation) {
              $(tip).addClass(CLASS_NAME_FADE$2)
            }

            var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement

            var attachment = this._getAttachment(placement)

            this.addAttachmentClass(attachment)

            var container = this._getContainer()

            $(tip).data(this.constructor.DATA_KEY, this)

            if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {
              $(tip).appendTo(container)
            }

            $(this.element).trigger(this.constructor.Event.INSERTED)
            this._popper = new Popper(this.element, tip, this._getPopperConfig(attachment))
            $(tip).addClass(CLASS_NAME_SHOW$4) // If this is a touch-enabled device we add extra
            // empty mouseover listeners to the body's immediate children;
            // only needed because of broken event delegation on iOS
            // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

            if ('ontouchstart' in document.documentElement) {
              $(document.body).children().on('mouseover', null, $.noop)
            }

            var complete = function complete () {
              if (_this.config.animation) {
                _this._fixTransition()
              }

              var prevHoverState = _this._hoverState
              _this._hoverState = null
              $(_this.element).trigger(_this.constructor.Event.SHOWN)

              if (prevHoverState === HOVER_STATE_OUT) {
                _this._leave(null, _this)
              }
            }

            if ($(this.tip).hasClass(CLASS_NAME_FADE$2)) {
              var transitionDuration = Util.getTransitionDurationFromElement(this.tip)
              $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration)
            } else {
              complete()
            }
          }
        }

        _proto.hide = function hide (callback) {
          var _this2 = this

          var tip = this.getTipElement()
          var hideEvent = $.Event(this.constructor.Event.HIDE)

          var complete = function complete () {
            if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
              tip.parentNode.removeChild(tip)
            }

            _this2._cleanTipClass()

            _this2.element.removeAttribute('aria-describedby')

            $(_this2.element).trigger(_this2.constructor.Event.HIDDEN)

            if (_this2._popper !== null) {
              _this2._popper.destroy()
            }

            if (callback) {
              callback()
            }
          }

          $(this.element).trigger(hideEvent)

          if (hideEvent.isDefaultPrevented()) {
            return
          }

          $(tip).removeClass(CLASS_NAME_SHOW$4) // If this is a touch-enabled device we remove the extra
          // empty mouseover listeners we added for iOS support

          if ('ontouchstart' in document.documentElement) {
            $(document.body).children().off('mouseover', null, $.noop)
          }

          this._activeTrigger[TRIGGER_CLICK] = false
          this._activeTrigger[TRIGGER_FOCUS] = false
          this._activeTrigger[TRIGGER_HOVER] = false

          if ($(this.tip).hasClass(CLASS_NAME_FADE$2)) {
            var transitionDuration = Util.getTransitionDurationFromElement(tip)
            $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration)
          } else {
            complete()
          }

          this._hoverState = ''
        }

        _proto.update = function update () {
          if (this._popper !== null) {
            this._popper.scheduleUpdate()
          }
        } // Protected


        _proto.isWithContent = function isWithContent () {
          return Boolean(this.getTitle())
        }

        _proto.addAttachmentClass = function addAttachmentClass (attachment) {
          $(this.getTipElement()).addClass(CLASS_PREFIX + '-' + attachment)
        }

        _proto.getTipElement = function getTipElement () {
          this.tip = this.tip || $(this.config.template)[0]
          return this.tip
        }

        _proto.setContent = function setContent () {
          var tip = this.getTipElement()
          this.setElementContent($(tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)), this.getTitle())
          $(tip).removeClass(CLASS_NAME_FADE$2 + ' ' + CLASS_NAME_SHOW$4)
        }

        _proto.setElementContent = function setElementContent ($element, content) {
          if (typeof content === 'object' && (content.nodeType || content.jquery)) {
            // Content is a DOM node or a jQuery
            if (this.config.html) {
              if (!$(content).parent().is($element)) {
                $element.empty().append(content)
              }
            } else {
              $element.text($(content).text())
            }

            return
          }

          if (this.config.html) {
            if (this.config.sanitize) {
              content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn)
            }

            $element.html(content)
          } else {
            $element.text(content)
          }
        }

        _proto.getTitle = function getTitle () {
          var title = this.element.getAttribute('data-original-title')

          if (!title) {
            title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title
          }

          return title
        } // Private


        _proto._getPopperConfig = function _getPopperConfig (attachment) {
          var _this3 = this

          var defaultBsConfig = {
            placement: attachment,
            modifiers: {
              offset: this._getOffset(),
              flip: {
                behavior: this.config.fallbackPlacement
              },
              arrow: {
                element: SELECTOR_ARROW
              },
              preventOverflow: {
                boundariesElement: this.config.boundary
              }
            },
            onCreate: function onCreate (data) {
              if (data.originalPlacement !== data.placement) {
                _this3._handlePopperPlacementChange(data)
              }
            },
            onUpdate: function onUpdate (data) {
              return _this3._handlePopperPlacementChange(data)
            }
          }
          return _objectSpread2(_objectSpread2({}, defaultBsConfig), this.config.popperConfig)
        }

        _proto._getOffset = function _getOffset () {
          var _this4 = this

          var offset = {}

          if (typeof this.config.offset === 'function') {
            offset.fn = function (data) {
              data.offsets = _objectSpread2(_objectSpread2({}, data.offsets), _this4.config.offset(data.offsets, _this4.element) || {})
              return data
            }
          } else {
            offset.offset = this.config.offset
          }

          return offset
        }

        _proto._getContainer = function _getContainer () {
          if (this.config.container === false) {
            return document.body
          }

          if (Util.isElement(this.config.container)) {
            return $(this.config.container)
          }

          return $(document).find(this.config.container)
        }

        _proto._getAttachment = function _getAttachment (placement) {
          return AttachmentMap[placement.toUpperCase()]
        }

        _proto._setListeners = function _setListeners () {
          var _this5 = this

          var triggers = this.config.trigger.split(' ')
          triggers.forEach(function (trigger) {
            if (trigger === 'click') {
              $(_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function (event) {
                return _this5.toggle(event)
              })
            } else if (trigger !== TRIGGER_MANUAL) {
              var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN
              var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT
              $(_this5.element).on(eventIn, _this5.config.selector, function (event) {
                return _this5._enter(event)
              }).on(eventOut, _this5.config.selector, function (event) {
                return _this5._leave(event)
              })
            }
          })

          this._hideModalHandler = function () {
            if (_this5.element) {
              _this5.hide()
            }
          }

          $(this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler)

          if (this.config.selector) {
            this.config = _objectSpread2(_objectSpread2({}, this.config), {}, {
              trigger: 'manual',
              selector: ''
            })
          } else {
            this._fixTitle()
          }
        }

        _proto._fixTitle = function _fixTitle () {
          var titleType = typeof this.element.getAttribute('data-original-title')

          if (this.element.getAttribute('title') || titleType !== 'string') {
            this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '')
            this.element.setAttribute('title', '')
          }
        }

        _proto._enter = function _enter (event, context) {
          var dataKey = this.constructor.DATA_KEY
          context = context || $(event.currentTarget).data(dataKey)

          if (!context) {
            context = new this.constructor(event.currentTarget, this._getDelegateConfig())
            $(event.currentTarget).data(dataKey, context)
          }

          if (event) {
            context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true
          }

          if ($(context.getTipElement()).hasClass(CLASS_NAME_SHOW$4) || context._hoverState === HOVER_STATE_SHOW) {
            context._hoverState = HOVER_STATE_SHOW
            return
          }

          clearTimeout(context._timeout)
          context._hoverState = HOVER_STATE_SHOW

          if (!context.config.delay || !context.config.delay.show) {
            context.show()
            return
          }

          context._timeout = setTimeout(function () {
            if (context._hoverState === HOVER_STATE_SHOW) {
              context.show()
            }
          }, context.config.delay.show)
        }

        _proto._leave = function _leave (event, context) {
          var dataKey = this.constructor.DATA_KEY
          context = context || $(event.currentTarget).data(dataKey)

          if (!context) {
            context = new this.constructor(event.currentTarget, this._getDelegateConfig())
            $(event.currentTarget).data(dataKey, context)
          }

          if (event) {
            context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false
          }

          if (context._isWithActiveTrigger()) {
            return
          }

          clearTimeout(context._timeout)
          context._hoverState = HOVER_STATE_OUT

          if (!context.config.delay || !context.config.delay.hide) {
            context.hide()
            return
          }

          context._timeout = setTimeout(function () {
            if (context._hoverState === HOVER_STATE_OUT) {
              context.hide()
            }
          }, context.config.delay.hide)
        }

        _proto._isWithActiveTrigger = function _isWithActiveTrigger () {
          for (var trigger in this._activeTrigger) {
            if (this._activeTrigger[trigger]) {
              return true
            }
          }

          return false
        }

        _proto._getConfig = function _getConfig (config) {
          var dataAttributes = $(this.element).data()
          Object.keys(dataAttributes).forEach(function (dataAttr) {
            if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
              delete dataAttributes[dataAttr]
            }
          })
          config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), dataAttributes), typeof config === 'object' && config ? config : {})

          if (typeof config.delay === 'number') {
            config.delay = {
              show: config.delay,
              hide: config.delay
            }
          }

          if (typeof config.title === 'number') {
            config.title = config.title.toString()
          }

          if (typeof config.content === 'number') {
            config.content = config.content.toString()
          }

          Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType)

          if (config.sanitize) {
            config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn)
          }

          return config
        }

        _proto._getDelegateConfig = function _getDelegateConfig () {
          var config = {}

          if (this.config) {
            for (var key in this.config) {
              if (this.constructor.Default[key] !== this.config[key]) {
                config[key] = this.config[key]
              }
            }
          }

          return config
        }

        _proto._cleanTipClass = function _cleanTipClass () {
          var $tip = $(this.getTipElement())
          var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX)

          if (tabClass !== null && tabClass.length) {
            $tip.removeClass(tabClass.join(''))
          }
        }

        _proto._handlePopperPlacementChange = function _handlePopperPlacementChange (popperData) {
          this.tip = popperData.instance.popper

          this._cleanTipClass()

          this.addAttachmentClass(this._getAttachment(popperData.placement))
        }

        _proto._fixTransition = function _fixTransition () {
          var tip = this.getTipElement()
          var initConfigAnimation = this.config.animation

          if (tip.getAttribute('x-placement') !== null) {
            return
          }

          $(tip).removeClass(CLASS_NAME_FADE$2)
          this.config.animation = false
          this.hide()
          this.show()
          this.config.animation = initConfigAnimation
        } // Static


        Tooltip._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY$6)

            var _config = typeof config === 'object' && config

            if (!data && /dispose|hide/.test(config)) {
              return
            }

            if (!data) {
              data = new Tooltip(this, _config)
              $(this).data(DATA_KEY$6, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config]()
            }
          })
        }

        _createClass(Tooltip, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$6
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default$4
          }
        }, {
          key: 'NAME',
          get: function get () {
            return NAME$6
          }
        }, {
          key: 'DATA_KEY',
          get: function get () {
            return DATA_KEY$6
          }
        }, {
          key: 'Event',
          get: function get () {
            return Event
          }
        }, {
          key: 'EVENT_KEY',
          get: function get () {
            return EVENT_KEY$6
          }
        }, {
          key: 'DefaultType',
          get: function get () {
            return DefaultType$4
          }
        }])

        return Tooltip
      }()
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */


      $.fn[NAME$6] = Tooltip._jQueryInterface
      $.fn[NAME$6].Constructor = Tooltip

      $.fn[NAME$6].noConflict = function () {
        $.fn[NAME$6] = JQUERY_NO_CONFLICT$6
        return Tooltip._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$7 = 'popover'
      var VERSION$7 = '4.5.0'
      var DATA_KEY$7 = 'bs.popover'
      var EVENT_KEY$7 = '.' + DATA_KEY$7
      var JQUERY_NO_CONFLICT$7 = $.fn[NAME$7]
      var CLASS_PREFIX$1 = 'bs-popover'
      var BSCLS_PREFIX_REGEX$1 = new RegExp('(^|\\s)' + CLASS_PREFIX$1 + '\\S+', 'g')

      var Default$5 = _objectSpread2(_objectSpread2({}, Tooltip.Default), {}, {
        placement: 'right',
        trigger: 'click',
        content: '',
        template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
      })

      var DefaultType$5 = _objectSpread2(_objectSpread2({}, Tooltip.DefaultType), {}, {
        content: '(string|element|function)'
      })

      var CLASS_NAME_FADE$3 = 'fade'
      var CLASS_NAME_SHOW$5 = 'show'
      var SELECTOR_TITLE = '.popover-header'
      var SELECTOR_CONTENT = '.popover-body'
      var Event$1 = {
        HIDE: 'hide' + EVENT_KEY$7,
        HIDDEN: 'hidden' + EVENT_KEY$7,
        SHOW: 'show' + EVENT_KEY$7,
        SHOWN: 'shown' + EVENT_KEY$7,
        INSERTED: 'inserted' + EVENT_KEY$7,
        CLICK: 'click' + EVENT_KEY$7,
        FOCUSIN: 'focusin' + EVENT_KEY$7,
        FOCUSOUT: 'focusout' + EVENT_KEY$7,
        MOUSEENTER: 'mouseenter' + EVENT_KEY$7,
        MOUSELEAVE: 'mouseleave' + EVENT_KEY$7
      }
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Popover = /*#__PURE__*/function (_Tooltip) {
        _inheritsLoose(Popover, _Tooltip)

        function Popover () {
          return _Tooltip.apply(this, arguments) || this
        }

        var _proto = Popover.prototype

        // Overrides
        _proto.isWithContent = function isWithContent () {
          return this.getTitle() || this._getContent()
        }

        _proto.addAttachmentClass = function addAttachmentClass (attachment) {
          $(this.getTipElement()).addClass(CLASS_PREFIX$1 + '-' + attachment)
        }

        _proto.getTipElement = function getTipElement () {
          this.tip = this.tip || $(this.config.template)[0]
          return this.tip
        }

        _proto.setContent = function setContent () {
          var $tip = $(this.getTipElement()) // We use append for html objects to maintain js events

          this.setElementContent($tip.find(SELECTOR_TITLE), this.getTitle())

          var content = this._getContent()

          if (typeof content === 'function') {
            content = content.call(this.element)
          }

          this.setElementContent($tip.find(SELECTOR_CONTENT), content)
          $tip.removeClass(CLASS_NAME_FADE$3 + ' ' + CLASS_NAME_SHOW$5)
        } // Private


        _proto._getContent = function _getContent () {
          return this.element.getAttribute('data-content') || this.config.content
        }

        _proto._cleanTipClass = function _cleanTipClass () {
          var $tip = $(this.getTipElement())
          var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1)

          if (tabClass !== null && tabClass.length > 0) {
            $tip.removeClass(tabClass.join(''))
          }
        } // Static


        Popover._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY$7)

            var _config = typeof config === 'object' ? config : null

            if (!data && /dispose|hide/.test(config)) {
              return
            }

            if (!data) {
              data = new Popover(this, _config)
              $(this).data(DATA_KEY$7, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config]()
            }
          })
        }

        _createClass(Popover, null, [{
          key: 'VERSION',
          // Getters
          get: function get () {
            return VERSION$7
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default$5
          }
        }, {
          key: 'NAME',
          get: function get () {
            return NAME$7
          }
        }, {
          key: 'DATA_KEY',
          get: function get () {
            return DATA_KEY$7
          }
        }, {
          key: 'Event',
          get: function get () {
            return Event$1
          }
        }, {
          key: 'EVENT_KEY',
          get: function get () {
            return EVENT_KEY$7
          }
        }, {
          key: 'DefaultType',
          get: function get () {
            return DefaultType$5
          }
        }])

        return Popover
      }(Tooltip)
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */


      $.fn[NAME$7] = Popover._jQueryInterface
      $.fn[NAME$7].Constructor = Popover

      $.fn[NAME$7].noConflict = function () {
        $.fn[NAME$7] = JQUERY_NO_CONFLICT$7
        return Popover._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$8 = 'scrollspy'
      var VERSION$8 = '4.5.0'
      var DATA_KEY$8 = 'bs.scrollspy'
      var EVENT_KEY$8 = '.' + DATA_KEY$8
      var DATA_API_KEY$6 = '.data-api'
      var JQUERY_NO_CONFLICT$8 = $.fn[NAME$8]
      var Default$6 = {
        offset: 10,
        method: 'auto',
        target: ''
      }
      var DefaultType$6 = {
        offset: 'number',
        method: 'string',
        target: '(string|element)'
      }
      var EVENT_ACTIVATE = 'activate' + EVENT_KEY$8
      var EVENT_SCROLL = 'scroll' + EVENT_KEY$8
      var EVENT_LOAD_DATA_API$2 = 'load' + EVENT_KEY$8 + DATA_API_KEY$6
      var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item'
      var CLASS_NAME_ACTIVE$2 = 'active'
      var SELECTOR_DATA_SPY = '[data-spy="scroll"]'
      var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group'
      var SELECTOR_NAV_LINKS = '.nav-link'
      var SELECTOR_NAV_ITEMS = '.nav-item'
      var SELECTOR_LIST_ITEMS = '.list-group-item'
      var SELECTOR_DROPDOWN = '.dropdown'
      var SELECTOR_DROPDOWN_ITEMS = '.dropdown-item'
      var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle'
      var METHOD_OFFSET = 'offset'
      var METHOD_POSITION = 'position'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var ScrollSpy = /*#__PURE__*/function () {
        function ScrollSpy (element, config) {
          var _this = this

          this._element = element
          this._scrollElement = element.tagName === 'BODY' ? window : element
          this._config = this._getConfig(config)
          this._selector = this._config.target + ' ' + SELECTOR_NAV_LINKS + ',' + (this._config.target + ' ' + SELECTOR_LIST_ITEMS + ',') + (this._config.target + ' ' + SELECTOR_DROPDOWN_ITEMS)
          this._offsets = []
          this._targets = []
          this._activeTarget = null
          this._scrollHeight = 0
          $(this._scrollElement).on(EVENT_SCROLL, function (event) {
            return _this._process(event)
          })
          this.refresh()

          this._process()
        } // Getters


        var _proto = ScrollSpy.prototype

        // Public
        _proto.refresh = function refresh () {
          var _this2 = this

          var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION
          var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method
          var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0
          this._offsets = []
          this._targets = []
          this._scrollHeight = this._getScrollHeight()
          var targets = [].slice.call(document.querySelectorAll(this._selector))
          targets.map(function (element) {
            var target
            var targetSelector = Util.getSelectorFromElement(element)

            if (targetSelector) {
              target = document.querySelector(targetSelector)
            }

            if (target) {
              var targetBCR = target.getBoundingClientRect()

              if (targetBCR.width || targetBCR.height) {
                // TODO (fat): remove sketch reliance on jQuery position/offset
                return [$(target)[offsetMethod]().top + offsetBase, targetSelector]
              }
            }

            return null
          }).filter(function (item) {
            return item
          }).sort(function (a, b) {
            return a[0] - b[0]
          }).forEach(function (item) {
            _this2._offsets.push(item[0])

            _this2._targets.push(item[1])
          })
        }

        _proto.dispose = function dispose () {
          $.removeData(this._element, DATA_KEY$8)
          $(this._scrollElement).off(EVENT_KEY$8)
          this._element = null
          this._scrollElement = null
          this._config = null
          this._selector = null
          this._offsets = null
          this._targets = null
          this._activeTarget = null
          this._scrollHeight = null
        } // Private


        _proto._getConfig = function _getConfig (config) {
          config = _objectSpread2(_objectSpread2({}, Default$6), typeof config === 'object' && config ? config : {})

          if (typeof config.target !== 'string' && Util.isElement(config.target)) {
            var id = $(config.target).attr('id')

            if (!id) {
              id = Util.getUID(NAME$8)
              $(config.target).attr('id', id)
            }

            config.target = '#' + id
          }

          Util.typeCheckConfig(NAME$8, config, DefaultType$6)
          return config
        }

        _proto._getScrollTop = function _getScrollTop () {
          return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop
        }

        _proto._getScrollHeight = function _getScrollHeight () {
          return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
        }

        _proto._getOffsetHeight = function _getOffsetHeight () {
          return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height
        }

        _proto._process = function _process () {
          var scrollTop = this._getScrollTop() + this._config.offset

          var scrollHeight = this._getScrollHeight()

          var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight()

          if (this._scrollHeight !== scrollHeight) {
            this.refresh()
          }

          if (scrollTop >= maxScroll) {
            var target = this._targets[this._targets.length - 1]

            if (this._activeTarget !== target) {
              this._activate(target)
            }

            return
          }

          if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
            this._activeTarget = null

            this._clear()

            return
          }

          for (var i = this._offsets.length; i--;) {
            var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1])

            if (isActiveTarget) {
              this._activate(this._targets[i])
            }
          }
        }

        _proto._activate = function _activate (target) {
          this._activeTarget = target

          this._clear()

          var queries = this._selector.split(',').map(function (selector) {
            return selector + '[data-target="' + target + '"],' + selector + '[href="' + target + '"]'
          })

          var $link = $([].slice.call(document.querySelectorAll(queries.join(','))))

          if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
            $link.closest(SELECTOR_DROPDOWN).find(SELECTOR_DROPDOWN_TOGGLE).addClass(CLASS_NAME_ACTIVE$2)
            $link.addClass(CLASS_NAME_ACTIVE$2)
          } else {
            // Set triggered link as active
            $link.addClass(CLASS_NAME_ACTIVE$2) // Set triggered links parents as active
            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

            $link.parents(SELECTOR_NAV_LIST_GROUP).prev(SELECTOR_NAV_LINKS + ', ' + SELECTOR_LIST_ITEMS).addClass(CLASS_NAME_ACTIVE$2) // Handle special case when .nav-link is inside .nav-item

            $link.parents(SELECTOR_NAV_LIST_GROUP).prev(SELECTOR_NAV_ITEMS).children(SELECTOR_NAV_LINKS).addClass(CLASS_NAME_ACTIVE$2)
          }

          $(this._scrollElement).trigger(EVENT_ACTIVATE, {
            relatedTarget: target
          })
        }

        _proto._clear = function _clear () {
          [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
            return node.classList.contains(CLASS_NAME_ACTIVE$2)
          }).forEach(function (node) {
            return node.classList.remove(CLASS_NAME_ACTIVE$2)
          })
        } // Static


        ScrollSpy._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var data = $(this).data(DATA_KEY$8)

            var _config = typeof config === 'object' && config

            if (!data) {
              data = new ScrollSpy(this, _config)
              $(this).data(DATA_KEY$8, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config]()
            }
          })
        }

        _createClass(ScrollSpy, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$8
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default$6
          }
        }])

        return ScrollSpy
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(window).on(EVENT_LOAD_DATA_API$2, function () {
        var scrollSpys = [].slice.call(document.querySelectorAll(SELECTOR_DATA_SPY))
        var scrollSpysLength = scrollSpys.length

        for (var i = scrollSpysLength; i--;) {
          var $spy = $(scrollSpys[i])

          ScrollSpy._jQueryInterface.call($spy, $spy.data())
        }
      })
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME$8] = ScrollSpy._jQueryInterface
      $.fn[NAME$8].Constructor = ScrollSpy

      $.fn[NAME$8].noConflict = function () {
        $.fn[NAME$8] = JQUERY_NO_CONFLICT$8
        return ScrollSpy._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$9 = 'tab'
      var VERSION$9 = '4.5.0'
      var DATA_KEY$9 = 'bs.tab'
      var EVENT_KEY$9 = '.' + DATA_KEY$9
      var DATA_API_KEY$7 = '.data-api'
      var JQUERY_NO_CONFLICT$9 = $.fn[NAME$9]
      var EVENT_HIDE$3 = 'hide' + EVENT_KEY$9
      var EVENT_HIDDEN$3 = 'hidden' + EVENT_KEY$9
      var EVENT_SHOW$3 = 'show' + EVENT_KEY$9
      var EVENT_SHOWN$3 = 'shown' + EVENT_KEY$9
      var EVENT_CLICK_DATA_API$6 = 'click' + EVENT_KEY$9 + DATA_API_KEY$7
      var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu'
      var CLASS_NAME_ACTIVE$3 = 'active'
      var CLASS_NAME_DISABLED$1 = 'disabled'
      var CLASS_NAME_FADE$4 = 'fade'
      var CLASS_NAME_SHOW$6 = 'show'
      var SELECTOR_DROPDOWN$1 = '.dropdown'
      var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group'
      var SELECTOR_ACTIVE$2 = '.active'
      var SELECTOR_ACTIVE_UL = '> li > .active'
      var SELECTOR_DATA_TOGGLE$4 = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]'
      var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle'
      var SELECTOR_DROPDOWN_ACTIVE_CHILD = '> .dropdown-menu .active'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Tab = /*#__PURE__*/function () {
        function Tab (element) {
          this._element = element
        } // Getters


        var _proto = Tab.prototype

        // Public
        _proto.show = function show () {
          var _this = this

          if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(CLASS_NAME_ACTIVE$3) || $(this._element).hasClass(CLASS_NAME_DISABLED$1)) {
            return
          }

          var target
          var previous
          var listElement = $(this._element).closest(SELECTOR_NAV_LIST_GROUP$1)[0]
          var selector = Util.getSelectorFromElement(this._element)

          if (listElement) {
            var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE$2
            previous = $.makeArray($(listElement).find(itemSelector))
            previous = previous[previous.length - 1]
          }

          var hideEvent = $.Event(EVENT_HIDE$3, {
            relatedTarget: this._element
          })
          var showEvent = $.Event(EVENT_SHOW$3, {
            relatedTarget: previous
          })

          if (previous) {
            $(previous).trigger(hideEvent)
          }

          $(this._element).trigger(showEvent)

          if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
            return
          }

          if (selector) {
            target = document.querySelector(selector)
          }

          this._activate(this._element, listElement)

          var complete = function complete () {
            var hiddenEvent = $.Event(EVENT_HIDDEN$3, {
              relatedTarget: _this._element
            })
            var shownEvent = $.Event(EVENT_SHOWN$3, {
              relatedTarget: previous
            })
            $(previous).trigger(hiddenEvent)
            $(_this._element).trigger(shownEvent)
          }

          if (target) {
            this._activate(target, target.parentNode, complete)
          } else {
            complete()
          }
        }

        _proto.dispose = function dispose () {
          $.removeData(this._element, DATA_KEY$9)
          this._element = null
        } // Private


        _proto._activate = function _activate (element, container, callback) {
          var _this2 = this

          var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $(container).find(SELECTOR_ACTIVE_UL) : $(container).children(SELECTOR_ACTIVE$2)
          var active = activeElements[0]
          var isTransitioning = callback && active && $(active).hasClass(CLASS_NAME_FADE$4)

          var complete = function complete () {
            return _this2._transitionComplete(element, active, callback)
          }

          if (active && isTransitioning) {
            var transitionDuration = Util.getTransitionDurationFromElement(active)
            $(active).removeClass(CLASS_NAME_SHOW$6).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration)
          } else {
            complete()
          }
        }

        _proto._transitionComplete = function _transitionComplete (element, active, callback) {
          if (active) {
            $(active).removeClass(CLASS_NAME_ACTIVE$3)
            var dropdownChild = $(active.parentNode).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0]

            if (dropdownChild) {
              $(dropdownChild).removeClass(CLASS_NAME_ACTIVE$3)
            }

            if (active.getAttribute('role') === 'tab') {
              active.setAttribute('aria-selected', false)
            }
          }

          $(element).addClass(CLASS_NAME_ACTIVE$3)

          if (element.getAttribute('role') === 'tab') {
            element.setAttribute('aria-selected', true)
          }

          Util.reflow(element)

          if (element.classList.contains(CLASS_NAME_FADE$4)) {
            element.classList.add(CLASS_NAME_SHOW$6)
          }

          if (element.parentNode && $(element.parentNode).hasClass(CLASS_NAME_DROPDOWN_MENU)) {
            var dropdownElement = $(element).closest(SELECTOR_DROPDOWN$1)[0]

            if (dropdownElement) {
              var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE$1))
              $(dropdownToggleList).addClass(CLASS_NAME_ACTIVE$3)
            }

            element.setAttribute('aria-expanded', true)
          }

          if (callback) {
            callback()
          }
        } // Static


        Tab._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var $this = $(this)
            var data = $this.data(DATA_KEY$9)

            if (!data) {
              data = new Tab(this)
              $this.data(DATA_KEY$9, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config]()
            }
          })
        }

        _createClass(Tab, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$9
          }
        }])

        return Tab
      }()
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      $(document).on(EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$4, function (event) {
        event.preventDefault()

        Tab._jQueryInterface.call($(this), 'show')
      })
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */

      $.fn[NAME$9] = Tab._jQueryInterface
      $.fn[NAME$9].Constructor = Tab

      $.fn[NAME$9].noConflict = function () {
        $.fn[NAME$9] = JQUERY_NO_CONFLICT$9
        return Tab._jQueryInterface
      }

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      var NAME$a = 'toast'
      var VERSION$a = '4.5.0'
      var DATA_KEY$a = 'bs.toast'
      var EVENT_KEY$a = '.' + DATA_KEY$a
      var JQUERY_NO_CONFLICT$a = $.fn[NAME$a]
      var EVENT_CLICK_DISMISS$1 = 'click.dismiss' + EVENT_KEY$a
      var EVENT_HIDE$4 = 'hide' + EVENT_KEY$a
      var EVENT_HIDDEN$4 = 'hidden' + EVENT_KEY$a
      var EVENT_SHOW$4 = 'show' + EVENT_KEY$a
      var EVENT_SHOWN$4 = 'shown' + EVENT_KEY$a
      var CLASS_NAME_FADE$5 = 'fade'
      var CLASS_NAME_HIDE = 'hide'
      var CLASS_NAME_SHOW$7 = 'show'
      var CLASS_NAME_SHOWING = 'showing'
      var DefaultType$7 = {
        animation: 'boolean',
        autohide: 'boolean',
        delay: 'number'
      }
      var Default$7 = {
        animation: true,
        autohide: true,
        delay: 500
      }
      var SELECTOR_DATA_DISMISS$1 = '[data-dismiss="toast"]'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      var Toast = /*#__PURE__*/function () {
        function Toast (element, config) {
          this._element = element
          this._config = this._getConfig(config)
          this._timeout = null

          this._setListeners()
        } // Getters


        var _proto = Toast.prototype

        // Public
        _proto.show = function show () {
          var _this = this

          var showEvent = $.Event(EVENT_SHOW$4)
          $(this._element).trigger(showEvent)

          if (showEvent.isDefaultPrevented()) {
            return
          }

          if (this._config.animation) {
            this._element.classList.add(CLASS_NAME_FADE$5)
          }

          var complete = function complete () {
            _this._element.classList.remove(CLASS_NAME_SHOWING)

            _this._element.classList.add(CLASS_NAME_SHOW$7)

            $(_this._element).trigger(EVENT_SHOWN$4)

            if (_this._config.autohide) {
              _this._timeout = setTimeout(function () {
                _this.hide()
              }, _this._config.delay)
            }
          }

          this._element.classList.remove(CLASS_NAME_HIDE)

          Util.reflow(this._element)

          this._element.classList.add(CLASS_NAME_SHOWING)

          if (this._config.animation) {
            var transitionDuration = Util.getTransitionDurationFromElement(this._element)
            $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration)
          } else {
            complete()
          }
        }

        _proto.hide = function hide () {
          if (!this._element.classList.contains(CLASS_NAME_SHOW$7)) {
            return
          }

          var hideEvent = $.Event(EVENT_HIDE$4)
          $(this._element).trigger(hideEvent)

          if (hideEvent.isDefaultPrevented()) {
            return
          }

          this._close()
        }

        _proto.dispose = function dispose () {
          clearTimeout(this._timeout)
          this._timeout = null

          if (this._element.classList.contains(CLASS_NAME_SHOW$7)) {
            this._element.classList.remove(CLASS_NAME_SHOW$7)
          }

          $(this._element).off(EVENT_CLICK_DISMISS$1)
          $.removeData(this._element, DATA_KEY$a)
          this._element = null
          this._config = null
        } // Private


        _proto._getConfig = function _getConfig (config) {
          config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$7), $(this._element).data()), typeof config === 'object' && config ? config : {})
          Util.typeCheckConfig(NAME$a, config, this.constructor.DefaultType)
          return config
        }

        _proto._setListeners = function _setListeners () {
          var _this2 = this

          $(this._element).on(EVENT_CLICK_DISMISS$1, SELECTOR_DATA_DISMISS$1, function () {
            return _this2.hide()
          })
        }

        _proto._close = function _close () {
          var _this3 = this

          var complete = function complete () {
            _this3._element.classList.add(CLASS_NAME_HIDE)

            $(_this3._element).trigger(EVENT_HIDDEN$4)
          }

          this._element.classList.remove(CLASS_NAME_SHOW$7)

          if (this._config.animation) {
            var transitionDuration = Util.getTransitionDurationFromElement(this._element)
            $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration)
          } else {
            complete()
          }
        } // Static


        Toast._jQueryInterface = function _jQueryInterface (config) {
          return this.each(function () {
            var $element = $(this)
            var data = $element.data(DATA_KEY$a)

            var _config = typeof config === 'object' && config

            if (!data) {
              data = new Toast(this, _config)
              $element.data(DATA_KEY$a, data)
            }

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError('No method named "' + config + '"')
              }

              data[config](this)
            }
          })
        }

        _createClass(Toast, null, [{
          key: 'VERSION',
          get: function get () {
            return VERSION$a
          }
        }, {
          key: 'DefaultType',
          get: function get () {
            return DefaultType$7
          }
        }, {
          key: 'Default',
          get: function get () {
            return Default$7
          }
        }])

        return Toast
      }()
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       */


      $.fn[NAME$a] = Toast._jQueryInterface
      $.fn[NAME$a].Constructor = Toast

      $.fn[NAME$a].noConflict = function () {
        $.fn[NAME$a] = JQUERY_NO_CONFLICT$a
        return Toast._jQueryInterface
      }

      exports.Alert = Alert
      exports.Button = Button
      exports.Carousel = Carousel
      exports.Collapse = Collapse
      exports.Dropdown = Dropdown
      exports.Modal = Modal
      exports.Popover = Popover
      exports.Scrollspy = ScrollSpy
      exports.Tab = Tab
      exports.Toast = Toast
      exports.Tooltip = Tooltip
      exports.Util = Util

      Object.defineProperty(exports, '__esModule', {value: true})

    })))
//# sourceMappingURL=bootstrap.js.map


    /***/
  }),

  /***/ './node_modules/core-js/internals/array-fill.js':
  /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-fill.js ***!
  \******************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

    'use strict'

    var toObject = __webpack_require__(/*! ../internals/to-object */ './node_modules/core-js/internals/to-object.js')
    var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ './node_modules/core-js/internals/to-absolute-index.js')
    var toLength = __webpack_require__(/*! ../internals/to-length */ './node_modules/core-js/internals/to-length.js')

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
    module.exports = function fill (value /* , start = 0, end = @length */) {
      var O = toObject(this)
      var length = toLength(O.length)
      var argumentsLength = arguments.length
      var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length)
      var end = argumentsLength > 2 ? arguments[2] : undefined
      var endPos = end === undefined ? length : toAbsoluteIndex(end, length)
      while (endPos > index) O[index++] = value
      return O
    }


    /***/
  }),

  /***/ './node_modules/core-js/modules/es.array.fill.js':
  /*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.fill.js ***!
  \*******************************************************/
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {

    var $ = __webpack_require__(/*! ../internals/export */ './node_modules/core-js/internals/export.js')
    var fill = __webpack_require__(/*! ../internals/array-fill */ './node_modules/core-js/internals/array-fill.js')
    var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ './node_modules/core-js/internals/add-to-unscopables.js')

// `Array.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
    $({target: 'Array', proto: true}, {
      fill: fill
    })

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
    addToUnscopables('fill')


    /***/
  }),

  /***/ './node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js':
  /*!**********************************************************************!*\
  !*** ./node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js ***!
  \**********************************************************************/
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)

    /*!
 * perfect-scrollbar v1.5.0
 * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors
 * Licensed under MIT
 */

    function get (element) {
      return getComputedStyle(element)
    }

    function set (element, obj) {
      for (var key in obj) {
        var val = obj[key]
        if (typeof val === 'number') {
          val = val + 'px'
        }
        element.style[key] = val
      }
      return element
    }

    function div (className) {
      var div = document.createElement('div')
      div.className = className
      return div
    }

    var elMatches =
      typeof Element !== 'undefined' &&
      (Element.prototype.matches ||
        Element.prototype.webkitMatchesSelector ||
        Element.prototype.mozMatchesSelector ||
        Element.prototype.msMatchesSelector)

    function matches (element, query) {
      if (!elMatches) {
        throw new Error('No element matching method supported')
      }

      return elMatches.call(element, query)
    }

    function remove (element) {
      if (element.remove) {
        element.remove()
      } else {
        if (element.parentNode) {
          element.parentNode.removeChild(element)
        }
      }
    }

    function queryChildren (element, selector) {
      return Array.prototype.filter.call(element.children, function (child) {
          return matches(child, selector)
        }
      )
    }

    var cls = {
      main: 'ps',
      rtl: 'ps__rtl',
      element: {
        thumb: function (x) {
          return ('ps__thumb-' + x)
        },
        rail: function (x) {
          return ('ps__rail-' + x)
        },
        consuming: 'ps__child--consume'
      },
      state: {
        focus: 'ps--focus',
        clicking: 'ps--clicking',
        active: function (x) {
          return ('ps--active-' + x)
        },
        scrolling: function (x) {
          return ('ps--scrolling-' + x)
        }
      }
    }

    /*
 * Helper methods
 */
    var scrollingClassTimeout = {x: null, y: null}

    function addScrollingClass (i, x) {
      var classList = i.element.classList
      var className = cls.state.scrolling(x)

      if (classList.contains(className)) {
        clearTimeout(scrollingClassTimeout[x])
      } else {
        classList.add(className)
      }
    }

    function removeScrollingClass (i, x) {
      scrollingClassTimeout[x] = setTimeout(
        function () {
          return i.isAlive && i.element.classList.remove(cls.state.scrolling(x))
        },
        i.settings.scrollingThreshold
      )
    }

    function setScrollingClassInstantly (i, x) {
      addScrollingClass(i, x)
      removeScrollingClass(i, x)
    }

    var EventElement = function EventElement (element) {
      this.element = element
      this.handlers = {}
    }

    var prototypeAccessors = {isEmpty: {configurable: true}}

    EventElement.prototype.bind = function bind (eventName, handler) {
      if (typeof this.handlers[eventName] === 'undefined') {
        this.handlers[eventName] = []
      }
      this.handlers[eventName].push(handler)
      this.element.addEventListener(eventName, handler, false)
    }

    EventElement.prototype.unbind = function unbind (eventName, target) {
      var this$1 = this

      this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {
        if (target && handler !== target) {
          return true
        }
        this$1.element.removeEventListener(eventName, handler, false)
        return false
      })
    }

    EventElement.prototype.unbindAll = function unbindAll () {
      for (var name in this.handlers) {
        this.unbind(name)
      }
    }

    prototypeAccessors.isEmpty.get = function () {
      var this$1 = this

      return Object.keys(this.handlers).every(
        function (key) {
          return this$1.handlers[key].length === 0
        }
      )
    }

    Object.defineProperties(EventElement.prototype, prototypeAccessors)

    var EventManager = function EventManager () {
      this.eventElements = []
    }

    EventManager.prototype.eventElement = function eventElement (element) {
      var ee = this.eventElements.filter(function (ee) {
        return ee.element === element
      })[0]
      if (!ee) {
        ee = new EventElement(element)
        this.eventElements.push(ee)
      }
      return ee
    }

    EventManager.prototype.bind = function bind (element, eventName, handler) {
      this.eventElement(element).bind(eventName, handler)
    }

    EventManager.prototype.unbind = function unbind (element, eventName, handler) {
      var ee = this.eventElement(element)
      ee.unbind(eventName, handler)

      if (ee.isEmpty) {
        // remove
        this.eventElements.splice(this.eventElements.indexOf(ee), 1)
      }
    }

    EventManager.prototype.unbindAll = function unbindAll () {
      this.eventElements.forEach(function (e) {
        return e.unbindAll()
      })
      this.eventElements = []
    }

    EventManager.prototype.once = function once (element, eventName, handler) {
      var ee = this.eventElement(element)
      var onceHandler = function (evt) {
        ee.unbind(eventName, onceHandler)
        handler(evt)
      }
      ee.bind(eventName, onceHandler)
    }

    function createEvent (name) {
      if (typeof window.CustomEvent === 'function') {
        return new CustomEvent(name)
      } else {
        var evt = document.createEvent('CustomEvent')
        evt.initCustomEvent(name, false, false, undefined)
        return evt
      }
    }

    function processScrollDiff (
      i,
      axis,
      diff,
      useScrollingClass,
      forceFireReachEvent
    ) {
      if (useScrollingClass === void 0) useScrollingClass = true
      if (forceFireReachEvent === void 0) forceFireReachEvent = false

      var fields
      if (axis === 'top') {
        fields = [
          'contentHeight',
          'containerHeight',
          'scrollTop',
          'y',
          'up',
          'down']
      } else if (axis === 'left') {
        fields = [
          'contentWidth',
          'containerWidth',
          'scrollLeft',
          'x',
          'left',
          'right']
      } else {
        throw new Error('A proper axis should be provided')
      }

      processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent)
    }

    function processScrollDiff$1 (
      i,
      diff,
      ref,
      useScrollingClass,
      forceFireReachEvent
    ) {
      var contentHeight = ref[0]
      var containerHeight = ref[1]
      var scrollTop = ref[2]
      var y = ref[3]
      var up = ref[4]
      var down = ref[5]
      if (useScrollingClass === void 0) useScrollingClass = true
      if (forceFireReachEvent === void 0) forceFireReachEvent = false

      var element = i.element

      // reset reach
      i.reach[y] = null

      // 1 for subpixel rounding
      if (element[scrollTop] < 1) {
        i.reach[y] = 'start'
      }

      // 1 for subpixel rounding
      if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {
        i.reach[y] = 'end'
      }

      if (diff) {
        element.dispatchEvent(createEvent(('ps-scroll-' + y)))

        if (diff < 0) {
          element.dispatchEvent(createEvent(('ps-scroll-' + up)))
        } else if (diff > 0) {
          element.dispatchEvent(createEvent(('ps-scroll-' + down)))
        }

        if (useScrollingClass) {
          setScrollingClassInstantly(i, y)
        }
      }

      if (i.reach[y] && (diff || forceFireReachEvent)) {
        element.dispatchEvent(createEvent(('ps-' + y + '-reach-' + (i.reach[y]))))
      }
    }

    function toInt (x) {
      return parseInt(x, 10) || 0
    }

    function isEditable (el) {
      return (
        matches(el, 'input,[contenteditable]') ||
        matches(el, 'select,[contenteditable]') ||
        matches(el, 'textarea,[contenteditable]') ||
        matches(el, 'button,[contenteditable]')
      )
    }

    function outerWidth (element) {
      var styles = get(element)
      return (
        toInt(styles.width) +
        toInt(styles.paddingLeft) +
        toInt(styles.paddingRight) +
        toInt(styles.borderLeftWidth) +
        toInt(styles.borderRightWidth)
      )
    }

    var env = {
      isWebKit:
        typeof document !== 'undefined' &&
        'WebkitAppearance' in document.documentElement.style,
      supportsTouch:
        typeof window !== 'undefined' &&
        ('ontouchstart' in window ||
          ('maxTouchPoints' in window.navigator &&
            window.navigator.maxTouchPoints > 0) ||
          (window.DocumentTouch && document instanceof window.DocumentTouch)),
      supportsIePointer:
        typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,
      isChrome:
        typeof navigator !== 'undefined' &&
        /Chrome/i.test(navigator && navigator.userAgent)
    }

    function updateGeometry (i) {
      var element = i.element
      var roundedScrollTop = Math.floor(element.scrollTop)
      var rect = element.getBoundingClientRect()

      i.containerWidth = Math.ceil(rect.width)
      i.containerHeight = Math.ceil(rect.height)
      i.contentWidth = element.scrollWidth
      i.contentHeight = element.scrollHeight

      if (!element.contains(i.scrollbarXRail)) {
        // clean up and append
        queryChildren(element, cls.element.rail('x')).forEach(function (el) {
            return remove(el)
          }
        )
        element.appendChild(i.scrollbarXRail)
      }
      if (!element.contains(i.scrollbarYRail)) {
        // clean up and append
        queryChildren(element, cls.element.rail('y')).forEach(function (el) {
            return remove(el)
          }
        )
        element.appendChild(i.scrollbarYRail)
      }

      if (
        !i.settings.suppressScrollX &&
        i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth
      ) {
        i.scrollbarXActive = true
        i.railXWidth = i.containerWidth - i.railXMarginWidth
        i.railXRatio = i.containerWidth / i.railXWidth
        i.scrollbarXWidth = getThumbSize(
          i,
          toInt((i.railXWidth * i.containerWidth) / i.contentWidth)
        )
        i.scrollbarXLeft = toInt(
          ((i.negativeScrollAdjustment + element.scrollLeft) *
            (i.railXWidth - i.scrollbarXWidth)) /
          (i.contentWidth - i.containerWidth)
        )
      } else {
        i.scrollbarXActive = false
      }

      if (
        !i.settings.suppressScrollY &&
        i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight
      ) {
        i.scrollbarYActive = true
        i.railYHeight = i.containerHeight - i.railYMarginHeight
        i.railYRatio = i.containerHeight / i.railYHeight
        i.scrollbarYHeight = getThumbSize(
          i,
          toInt((i.railYHeight * i.containerHeight) / i.contentHeight)
        )
        i.scrollbarYTop = toInt(
          (roundedScrollTop * (i.railYHeight - i.scrollbarYHeight)) /
          (i.contentHeight - i.containerHeight)
        )
      } else {
        i.scrollbarYActive = false
      }

      if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
        i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth
      }
      if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
        i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight
      }

      updateCss(element, i)

      if (i.scrollbarXActive) {
        element.classList.add(cls.state.active('x'))
      } else {
        element.classList.remove(cls.state.active('x'))
        i.scrollbarXWidth = 0
        i.scrollbarXLeft = 0
        element.scrollLeft = i.isRtl === true ? i.contentWidth : 0
      }
      if (i.scrollbarYActive) {
        element.classList.add(cls.state.active('y'))
      } else {
        element.classList.remove(cls.state.active('y'))
        i.scrollbarYHeight = 0
        i.scrollbarYTop = 0
        element.scrollTop = 0
      }
    }

    function getThumbSize (i, thumbSize) {
      if (i.settings.minScrollbarLength) {
        thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength)
      }
      if (i.settings.maxScrollbarLength) {
        thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength)
      }
      return thumbSize
    }

    function updateCss (element, i) {
      var xRailOffset = {width: i.railXWidth}
      var roundedScrollTop = Math.floor(element.scrollTop)

      if (i.isRtl) {
        xRailOffset.left =
          i.negativeScrollAdjustment +
          element.scrollLeft +
          i.containerWidth -
          i.contentWidth
      } else {
        xRailOffset.left = element.scrollLeft
      }
      if (i.isScrollbarXUsingBottom) {
        xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop
      } else {
        xRailOffset.top = i.scrollbarXTop + roundedScrollTop
      }
      set(i.scrollbarXRail, xRailOffset)

      var yRailOffset = {top: roundedScrollTop, height: i.railYHeight}
      if (i.isScrollbarYUsingRight) {
        if (i.isRtl) {
          yRailOffset.right =
            i.contentWidth -
            (i.negativeScrollAdjustment + element.scrollLeft) -
            i.scrollbarYRight -
            i.scrollbarYOuterWidth -
            9
        } else {
          yRailOffset.right = i.scrollbarYRight - element.scrollLeft
        }
      } else {
        if (i.isRtl) {
          yRailOffset.left =
            i.negativeScrollAdjustment +
            element.scrollLeft +
            i.containerWidth * 2 -
            i.contentWidth -
            i.scrollbarYLeft -
            i.scrollbarYOuterWidth
        } else {
          yRailOffset.left = i.scrollbarYLeft + element.scrollLeft
        }
      }
      set(i.scrollbarYRail, yRailOffset)

      set(i.scrollbarX, {
        left: i.scrollbarXLeft,
        width: i.scrollbarXWidth - i.railBorderXWidth
      })
      set(i.scrollbarY, {
        top: i.scrollbarYTop,
        height: i.scrollbarYHeight - i.railBorderYWidth
      })
    }

    function clickRail (i) {
      var element = i.element

      i.event.bind(i.scrollbarY, 'mousedown', function (e) {
        return e.stopPropagation()
      })
      i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {
        var positionTop =
          e.pageY -
          window.pageYOffset -
          i.scrollbarYRail.getBoundingClientRect().top
        var direction = positionTop > i.scrollbarYTop ? 1 : -1

        i.element.scrollTop += direction * i.containerHeight
        updateGeometry(i)

        e.stopPropagation()
      })

      i.event.bind(i.scrollbarX, 'mousedown', function (e) {
        return e.stopPropagation()
      })
      i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {
        var positionLeft =
          e.pageX -
          window.pageXOffset -
          i.scrollbarXRail.getBoundingClientRect().left
        var direction = positionLeft > i.scrollbarXLeft ? 1 : -1

        i.element.scrollLeft += direction * i.containerWidth
        updateGeometry(i)

        e.stopPropagation()
      })
    }

    function dragThumb (i) {
      bindMouseScrollHandler(i, [
        'containerWidth',
        'contentWidth',
        'pageX',
        'railXWidth',
        'scrollbarX',
        'scrollbarXWidth',
        'scrollLeft',
        'x',
        'scrollbarXRail'])
      bindMouseScrollHandler(i, [
        'containerHeight',
        'contentHeight',
        'pageY',
        'railYHeight',
        'scrollbarY',
        'scrollbarYHeight',
        'scrollTop',
        'y',
        'scrollbarYRail'])
    }

    function bindMouseScrollHandler (
      i,
      ref
    ) {
      var containerHeight = ref[0]
      var contentHeight = ref[1]
      var pageY = ref[2]
      var railYHeight = ref[3]
      var scrollbarY = ref[4]
      var scrollbarYHeight = ref[5]
      var scrollTop = ref[6]
      var y = ref[7]
      var scrollbarYRail = ref[8]

      var element = i.element

      var startingScrollTop = null
      var startingMousePageY = null
      var scrollBy = null

      function mouseMoveHandler (e) {
        if (e.touches && e.touches[0]) {
          e[pageY] = e.touches[0].pageY
        }
        element[scrollTop] =
          startingScrollTop + scrollBy * (e[pageY] - startingMousePageY)
        addScrollingClass(i, y)
        updateGeometry(i)

        e.stopPropagation()
        e.preventDefault()
      }

      function mouseUpHandler () {
        removeScrollingClass(i, y)
        i[scrollbarYRail].classList.remove(cls.state.clicking)
        i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler)
      }

      function bindMoves (e, touchMode) {
        startingScrollTop = element[scrollTop]
        if (touchMode && e.touches) {
          e[pageY] = e.touches[0].pageY
        }
        startingMousePageY = e[pageY]
        scrollBy =
          (i[contentHeight] - i[containerHeight]) /
          (i[railYHeight] - i[scrollbarYHeight])
        if (!touchMode) {
          i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler)
          i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler)
          e.preventDefault()
        } else {
          i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler)
        }

        i[scrollbarYRail].classList.add(cls.state.clicking)

        e.stopPropagation()
      }

      i.event.bind(i[scrollbarY], 'mousedown', function (e) {
        bindMoves(e)
      })
      i.event.bind(i[scrollbarY], 'touchstart', function (e) {
        bindMoves(e, true)
      })
    }

    function keyboard (i) {
      var element = i.element

      var elementHovered = function () {
        return matches(element, ':hover')
      }
      var scrollbarFocused = function () {
        return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus')
      }

      function shouldPreventDefault (deltaX, deltaY) {
        var scrollTop = Math.floor(element.scrollTop)
        if (deltaX === 0) {
          if (!i.scrollbarYActive) {
            return false
          }
          if (
            (scrollTop === 0 && deltaY > 0) ||
            (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)
          ) {
            return !i.settings.wheelPropagation
          }
        }

        var scrollLeft = element.scrollLeft
        if (deltaY === 0) {
          if (!i.scrollbarXActive) {
            return false
          }
          if (
            (scrollLeft === 0 && deltaX < 0) ||
            (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)
          ) {
            return !i.settings.wheelPropagation
          }
        }
        return true
      }

      i.event.bind(i.ownerDocument, 'keydown', function (e) {
        if (
          (e.isDefaultPrevented && e.isDefaultPrevented()) ||
          e.defaultPrevented
        ) {
          return
        }

        if (!elementHovered() && !scrollbarFocused()) {
          return
        }

        var activeElement = document.activeElement
          ? document.activeElement
          : i.ownerDocument.activeElement
        if (activeElement) {
          if (activeElement.tagName === 'IFRAME') {
            activeElement = activeElement.contentDocument.activeElement
          } else {
            // go deeper if element is a webcomponent
            while (activeElement.shadowRoot) {
              activeElement = activeElement.shadowRoot.activeElement
            }
          }
          if (isEditable(activeElement)) {
            return
          }
        }

        var deltaX = 0
        var deltaY = 0

        switch (e.which) {
          case 37: // left
            if (e.metaKey) {
              deltaX = -i.contentWidth
            } else if (e.altKey) {
              deltaX = -i.containerWidth
            } else {
              deltaX = -30
            }
            break
          case 38: // up
            if (e.metaKey) {
              deltaY = i.contentHeight
            } else if (e.altKey) {
              deltaY = i.containerHeight
            } else {
              deltaY = 30
            }
            break
          case 39: // right
            if (e.metaKey) {
              deltaX = i.contentWidth
            } else if (e.altKey) {
              deltaX = i.containerWidth
            } else {
              deltaX = 30
            }
            break
          case 40: // down
            if (e.metaKey) {
              deltaY = -i.contentHeight
            } else if (e.altKey) {
              deltaY = -i.containerHeight
            } else {
              deltaY = -30
            }
            break
          case 32: // space bar
            if (e.shiftKey) {
              deltaY = i.containerHeight
            } else {
              deltaY = -i.containerHeight
            }
            break
          case 33: // page up
            deltaY = i.containerHeight
            break
          case 34: // page down
            deltaY = -i.containerHeight
            break
          case 36: // home
            deltaY = i.contentHeight
            break
          case 35: // end
            deltaY = -i.contentHeight
            break
          default:
            return
        }

        if (i.settings.suppressScrollX && deltaX !== 0) {
          return
        }
        if (i.settings.suppressScrollY && deltaY !== 0) {
          return
        }

        element.scrollTop -= deltaY
        element.scrollLeft += deltaX
        updateGeometry(i)

        if (shouldPreventDefault(deltaX, deltaY)) {
          e.preventDefault()
        }
      })
    }

    function wheel (i) {
      var element = i.element

      function shouldPreventDefault (deltaX, deltaY) {
        var roundedScrollTop = Math.floor(element.scrollTop)
        var isTop = element.scrollTop === 0
        var isBottom =
          roundedScrollTop + element.offsetHeight === element.scrollHeight
        var isLeft = element.scrollLeft === 0
        var isRight =
          element.scrollLeft + element.offsetWidth === element.scrollWidth

        var hitsBound

        // pick axis with primary direction
        if (Math.abs(deltaY) > Math.abs(deltaX)) {
          hitsBound = isTop || isBottom
        } else {
          hitsBound = isLeft || isRight
        }

        return hitsBound ? !i.settings.wheelPropagation : true
      }

      function getDeltaFromEvent (e) {
        var deltaX = e.deltaX
        var deltaY = -1 * e.deltaY

        if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
          // OS X Safari
          deltaX = (-1 * e.wheelDeltaX) / 6
          deltaY = e.wheelDeltaY / 6
        }

        if (e.deltaMode && e.deltaMode === 1) {
          // Firefox in deltaMode 1: Line scrolling
          deltaX *= 10
          deltaY *= 10
        }

        if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {
          // IE in some mouse drivers
          deltaX = 0
          deltaY = e.wheelDelta
        }

        if (e.shiftKey) {
          // reverse axis with shift key
          return [-deltaY, -deltaX]
        }
        return [deltaX, deltaY]
      }

      function shouldBeConsumedByChild (target, deltaX, deltaY) {
        // FIXME: this is a workaround for <select> issue in FF and IE #571
        if (!env.isWebKit && element.querySelector('select:focus')) {
          return true
        }

        if (!element.contains(target)) {
          return false
        }

        var cursor = target

        while (cursor && cursor !== element) {
          if (cursor.classList.contains(cls.element.consuming)) {
            return true
          }

          var style = get(cursor)

          // if deltaY && vertical scrollable
          if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
            var maxScrollTop = cursor.scrollHeight - cursor.clientHeight
            if (maxScrollTop > 0) {
              if (
                (cursor.scrollTop > 0 && deltaY < 0) ||
                (cursor.scrollTop < maxScrollTop && deltaY > 0)
              ) {
                return true
              }
            }
          }
          // if deltaX && horizontal scrollable
          if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
            var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth
            if (maxScrollLeft > 0) {
              if (
                (cursor.scrollLeft > 0 && deltaX < 0) ||
                (cursor.scrollLeft < maxScrollLeft && deltaX > 0)
              ) {
                return true
              }
            }
          }

          cursor = cursor.parentNode
        }

        return false
      }

      function mousewheelHandler (e) {
        var ref = getDeltaFromEvent(e)
        var deltaX = ref[0]
        var deltaY = ref[1]

        if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {
          return
        }

        var shouldPrevent = false
        if (!i.settings.useBothWheelAxes) {
          // deltaX will only be used for horizontal scrolling and deltaY will
          // only be used for vertical scrolling - this is the default
          element.scrollTop -= deltaY * i.settings.wheelSpeed
          element.scrollLeft += deltaX * i.settings.wheelSpeed
        } else if (i.scrollbarYActive && !i.scrollbarXActive) {
          // only vertical scrollbar is active and useBothWheelAxes option is
          // active, so let's scroll vertical bar using both mouse wheel axes
          if (deltaY) {
            element.scrollTop -= deltaY * i.settings.wheelSpeed
          } else {
            element.scrollTop += deltaX * i.settings.wheelSpeed
          }
          shouldPrevent = true
        } else if (i.scrollbarXActive && !i.scrollbarYActive) {
          // useBothWheelAxes and only horizontal bar is active, so use both
          // wheel axes for horizontal bar
          if (deltaX) {
            element.scrollLeft += deltaX * i.settings.wheelSpeed
          } else {
            element.scrollLeft -= deltaY * i.settings.wheelSpeed
          }
          shouldPrevent = true
        }

        updateGeometry(i)

        shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY)
        if (shouldPrevent && !e.ctrlKey) {
          e.stopPropagation()
          e.preventDefault()
        }
      }

      if (typeof window.onwheel !== 'undefined') {
        i.event.bind(element, 'wheel', mousewheelHandler)
      } else if (typeof window.onmousewheel !== 'undefined') {
        i.event.bind(element, 'mousewheel', mousewheelHandler)
      }
    }

    function touch (i) {
      if (!env.supportsTouch && !env.supportsIePointer) {
        return
      }

      var element = i.element

      function shouldPrevent (deltaX, deltaY) {
        var scrollTop = Math.floor(element.scrollTop)
        var scrollLeft = element.scrollLeft
        var magnitudeX = Math.abs(deltaX)
        var magnitudeY = Math.abs(deltaY)

        if (magnitudeY > magnitudeX) {
          // user is perhaps trying to swipe up/down the page

          if (
            (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||
            (deltaY > 0 && scrollTop === 0)
          ) {
            // set prevent for mobile Chrome refresh
            return window.scrollY === 0 && deltaY > 0 && env.isChrome
          }
        } else if (magnitudeX > magnitudeY) {
          // user is perhaps trying to swipe left/right across the page

          if (
            (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||
            (deltaX > 0 && scrollLeft === 0)
          ) {
            return true
          }
        }

        return true
      }

      function applyTouchMove (differenceX, differenceY) {
        element.scrollTop -= differenceY
        element.scrollLeft -= differenceX

        updateGeometry(i)
      }

      var startOffset = {}
      var startTime = 0
      var speed = {}
      var easingLoop = null

      function getTouch (e) {
        if (e.targetTouches) {
          return e.targetTouches[0]
        } else {
          // Maybe IE pointer
          return e
        }
      }

      function shouldHandle (e) {
        if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
          return false
        }
        if (e.targetTouches && e.targetTouches.length === 1) {
          return true
        }
        if (
          e.pointerType &&
          e.pointerType !== 'mouse' &&
          e.pointerType !== e.MSPOINTER_TYPE_MOUSE
        ) {
          return true
        }
        return false
      }

      function touchStart (e) {
        if (!shouldHandle(e)) {
          return
        }

        var touch = getTouch(e)

        startOffset.pageX = touch.pageX
        startOffset.pageY = touch.pageY

        startTime = new Date().getTime()

        if (easingLoop !== null) {
          clearInterval(easingLoop)
        }
      }

      function shouldBeConsumedByChild (target, deltaX, deltaY) {
        if (!element.contains(target)) {
          return false
        }

        var cursor = target

        while (cursor && cursor !== element) {
          if (cursor.classList.contains(cls.element.consuming)) {
            return true
          }

          var style = get(cursor)

          // if deltaY && vertical scrollable
          if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
            var maxScrollTop = cursor.scrollHeight - cursor.clientHeight
            if (maxScrollTop > 0) {
              if (
                (cursor.scrollTop > 0 && deltaY < 0) ||
                (cursor.scrollTop < maxScrollTop && deltaY > 0)
              ) {
                return true
              }
            }
          }
          // if deltaX && horizontal scrollable
          if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
            var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth
            if (maxScrollLeft > 0) {
              if (
                (cursor.scrollLeft > 0 && deltaX < 0) ||
                (cursor.scrollLeft < maxScrollLeft && deltaX > 0)
              ) {
                return true
              }
            }
          }

          cursor = cursor.parentNode
        }

        return false
      }

      function touchMove (e) {
        if (shouldHandle(e)) {
          var touch = getTouch(e)

          var currentOffset = {pageX: touch.pageX, pageY: touch.pageY}

          var differenceX = currentOffset.pageX - startOffset.pageX
          var differenceY = currentOffset.pageY - startOffset.pageY

          if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {
            return
          }

          applyTouchMove(differenceX, differenceY)
          startOffset = currentOffset

          var currentTime = new Date().getTime()

          var timeGap = currentTime - startTime
          if (timeGap > 0) {
            speed.x = differenceX / timeGap
            speed.y = differenceY / timeGap
            startTime = currentTime
          }

          if (shouldPrevent(differenceX, differenceY)) {
            e.preventDefault()
          }
        }
      }

      function touchEnd () {
        if (i.settings.swipeEasing) {
          clearInterval(easingLoop)
          easingLoop = setInterval(function () {
            if (i.isInitialized) {
              clearInterval(easingLoop)
              return
            }

            if (!speed.x && !speed.y) {
              clearInterval(easingLoop)
              return
            }

            if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
              clearInterval(easingLoop)
              return
            }

            applyTouchMove(speed.x * 30, speed.y * 30)

            speed.x *= 0.8
            speed.y *= 0.8
          }, 10)
        }
      }

      if (env.supportsTouch) {
        i.event.bind(element, 'touchstart', touchStart)
        i.event.bind(element, 'touchmove', touchMove)
        i.event.bind(element, 'touchend', touchEnd)
      } else if (env.supportsIePointer) {
        if (window.PointerEvent) {
          i.event.bind(element, 'pointerdown', touchStart)
          i.event.bind(element, 'pointermove', touchMove)
          i.event.bind(element, 'pointerup', touchEnd)
        } else if (window.MSPointerEvent) {
          i.event.bind(element, 'MSPointerDown', touchStart)
          i.event.bind(element, 'MSPointerMove', touchMove)
          i.event.bind(element, 'MSPointerUp', touchEnd)
        }
      }
    }

    var defaultSettings = function () {
      return ({
        handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],
        maxScrollbarLength: null,
        minScrollbarLength: null,
        scrollingThreshold: 1000,
        scrollXMarginOffset: 0,
        scrollYMarginOffset: 0,
        suppressScrollX: false,
        suppressScrollY: false,
        swipeEasing: true,
        useBothWheelAxes: false,
        wheelPropagation: true,
        wheelSpeed: 1
      })
    }

    var handlers = {
      'click-rail': clickRail,
      'drag-thumb': dragThumb,
      keyboard: keyboard,
      wheel: wheel,
      touch: touch
    }

    var PerfectScrollbar = function PerfectScrollbar (element, userSettings) {
      var this$1 = this
      if (userSettings === void 0) userSettings = {}

      if (typeof element === 'string') {
        element = document.querySelector(element)
      }

      if (!element || !element.nodeName) {
        throw new Error('no element is specified to initialize PerfectScrollbar')
      }

      this.element = element

      element.classList.add(cls.main)

      this.settings = defaultSettings()
      for (var key in userSettings) {
        this.settings[key] = userSettings[key]
      }

      this.containerWidth = null
      this.containerHeight = null
      this.contentWidth = null
      this.contentHeight = null

      var focus = function () {
        return element.classList.add(cls.state.focus)
      }
      var blur = function () {
        return element.classList.remove(cls.state.focus)
      }

      this.isRtl = get(element).direction === 'rtl'
      if (this.isRtl === true) {
        element.classList.add(cls.rtl)
      }
      this.isNegativeScroll = (function () {
        var originalScrollLeft = element.scrollLeft
        var result = null
        element.scrollLeft = -1
        result = element.scrollLeft < 0
        element.scrollLeft = originalScrollLeft
        return result
      })()
      this.negativeScrollAdjustment = this.isNegativeScroll
        ? element.scrollWidth - element.clientWidth
        : 0
      this.event = new EventManager()
      this.ownerDocument = element.ownerDocument || document

      this.scrollbarXRail = div(cls.element.rail('x'))
      element.appendChild(this.scrollbarXRail)
      this.scrollbarX = div(cls.element.thumb('x'))
      this.scrollbarXRail.appendChild(this.scrollbarX)
      this.scrollbarX.setAttribute('tabindex', 0)
      this.event.bind(this.scrollbarX, 'focus', focus)
      this.event.bind(this.scrollbarX, 'blur', blur)
      this.scrollbarXActive = null
      this.scrollbarXWidth = null
      this.scrollbarXLeft = null
      var railXStyle = get(this.scrollbarXRail)
      this.scrollbarXBottom = parseInt(railXStyle.bottom, 10)
      if (isNaN(this.scrollbarXBottom)) {
        this.isScrollbarXUsingBottom = false
        this.scrollbarXTop = toInt(railXStyle.top)
      } else {
        this.isScrollbarXUsingBottom = true
      }
      this.railBorderXWidth =
        toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth)
      // Set rail to display:block to calculate margins
      set(this.scrollbarXRail, {display: 'block'})
      this.railXMarginWidth =
        toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight)
      set(this.scrollbarXRail, {display: ''})
      this.railXWidth = null
      this.railXRatio = null

      this.scrollbarYRail = div(cls.element.rail('y'))
      element.appendChild(this.scrollbarYRail)
      this.scrollbarY = div(cls.element.thumb('y'))
      this.scrollbarYRail.appendChild(this.scrollbarY)
      this.scrollbarY.setAttribute('tabindex', 0)
      this.event.bind(this.scrollbarY, 'focus', focus)
      this.event.bind(this.scrollbarY, 'blur', blur)
      this.scrollbarYActive = null
      this.scrollbarYHeight = null
      this.scrollbarYTop = null
      var railYStyle = get(this.scrollbarYRail)
      this.scrollbarYRight = parseInt(railYStyle.right, 10)
      if (isNaN(this.scrollbarYRight)) {
        this.isScrollbarYUsingRight = false
        this.scrollbarYLeft = toInt(railYStyle.left)
      } else {
        this.isScrollbarYUsingRight = true
      }
      this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null
      this.railBorderYWidth =
        toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth)
      set(this.scrollbarYRail, {display: 'block'})
      this.railYMarginHeight =
        toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom)
      set(this.scrollbarYRail, {display: ''})
      this.railYHeight = null
      this.railYRatio = null

      this.reach = {
        x:
          element.scrollLeft <= 0
            ? 'start'
            : element.scrollLeft >= this.contentWidth - this.containerWidth
            ? 'end'
            : null,
        y:
          element.scrollTop <= 0
            ? 'start'
            : element.scrollTop >= this.contentHeight - this.containerHeight
            ? 'end'
            : null
      }

      this.isAlive = true

      this.settings.handlers.forEach(function (handlerName) {
        return handlers[handlerName](this$1)
      })

      this.lastScrollTop = Math.floor(element.scrollTop) // for onScroll only
      this.lastScrollLeft = element.scrollLeft // for onScroll only
      this.event.bind(this.element, 'scroll', function (e) {
        return this$1.onScroll(e)
      })
      updateGeometry(this)
    }

    PerfectScrollbar.prototype.update = function update () {
      if (!this.isAlive) {
        return
      }

      // Recalcuate negative scrollLeft adjustment
      this.negativeScrollAdjustment = this.isNegativeScroll
        ? this.element.scrollWidth - this.element.clientWidth
        : 0

      // Recalculate rail margins
      set(this.scrollbarXRail, {display: 'block'})
      set(this.scrollbarYRail, {display: 'block'})
      this.railXMarginWidth =
        toInt(get(this.scrollbarXRail).marginLeft) +
        toInt(get(this.scrollbarXRail).marginRight)
      this.railYMarginHeight =
        toInt(get(this.scrollbarYRail).marginTop) +
        toInt(get(this.scrollbarYRail).marginBottom)

      // Hide scrollbars not to affect scrollWidth and scrollHeight
      set(this.scrollbarXRail, {display: 'none'})
      set(this.scrollbarYRail, {display: 'none'})

      updateGeometry(this)

      processScrollDiff(this, 'top', 0, false, true)
      processScrollDiff(this, 'left', 0, false, true)

      set(this.scrollbarXRail, {display: ''})
      set(this.scrollbarYRail, {display: ''})
    }

    PerfectScrollbar.prototype.onScroll = function onScroll (e) {
      if (!this.isAlive) {
        return
      }

      updateGeometry(this)
      processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop)
      processScrollDiff(
        this,
        'left',
        this.element.scrollLeft - this.lastScrollLeft
      )

      this.lastScrollTop = Math.floor(this.element.scrollTop)
      this.lastScrollLeft = this.element.scrollLeft
    }

    PerfectScrollbar.prototype.destroy = function destroy () {
      if (!this.isAlive) {
        return
      }

      this.event.unbindAll()
      remove(this.scrollbarX)
      remove(this.scrollbarY)
      remove(this.scrollbarXRail)
      remove(this.scrollbarYRail)
      this.removePsClasses()

      // unset elements
      this.element = null
      this.scrollbarX = null
      this.scrollbarY = null
      this.scrollbarXRail = null
      this.scrollbarYRail = null

      this.isAlive = false
    }

    PerfectScrollbar.prototype.removePsClasses = function removePsClasses () {
      this.element.className = this.element.className
        .split(' ')
        .filter(function (name) {
          return !name.match(/^ps([-_].+|)$/)
        })
        .join(' ')
    }

    /* harmony default export */
    __webpack_exports__['default'] = (PerfectScrollbar)
//# sourceMappingURL=perfect-scrollbar.esm.js.map


    /***/
  }),

  /***/ './node_modules/popper.js/dist/esm/popper.js':
  /*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__);
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**!
       * @fileOverview Kickass library to create and place poppers near their reference elements.
       * @version 1.16.1
       * @license
       * Copyright (c) 2016 Federico Zivolo and contributors
       *
       * Permission is hereby granted, free of charge, to any person obtaining a copy
       * of this software and associated documentation files (the "Software"), to deal
       * in the Software without restriction, including without limitation the rights
       * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       * copies of the Software, and to permit persons to whom the Software is
       * furnished to do so, subject to the following conditions:
       *
       * The above copyright notice and this permission notice shall be included in all
       * copies or substantial portions of the Software.
       *
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
       * SOFTWARE.
       */
      var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined'

      var timeoutDuration = function () {
        var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox']
        for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
          if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
            return 1
          }
        }
        return 0
      }()

      function microtaskDebounce (fn) {
        var called = false
        return function () {
          if (called) {
            return
          }
          called = true
          window.Promise.resolve().then(function () {
            called = false
            fn()
          })
        }
      }

      function taskDebounce (fn) {
        var scheduled = false
        return function () {
          if (!scheduled) {
            scheduled = true
            setTimeout(function () {
              scheduled = false
              fn()
            }, timeoutDuration)
          }
        }
      }

      var supportsMicroTasks = isBrowser && window.Promise

      /**
       * Create a debounced version of a method, that's asynchronously deferred
       * but called in the minimum time possible.
       *
       * @method
       * @memberof Popper.Utils
       * @argument {Function} fn
       * @returns {Function}
       */
      var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce

      /**
       * Check if the given variable is a function
       * @method
       * @memberof Popper.Utils
       * @argument {Any} functionToCheck - variable to check
       * @returns {Boolean} answer to: is a function?
       */
      function isFunction (functionToCheck) {
        var getType = {}
        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]'
      }

      /**
       * Get CSS computed property of the given element
       * @method
       * @memberof Popper.Utils
       * @argument {Eement} element
       * @argument {String} property
       */
      function getStyleComputedProperty (element, property) {
        if (element.nodeType !== 1) {
          return []
        }
        // NOTE: 1 DOM access here
        var window = element.ownerDocument.defaultView
        var css = window.getComputedStyle(element, null)
        return property ? css[property] : css
      }

      /**
       * Returns the parentNode or the host of the element
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element
       * @returns {Element} parent
       */
      function getParentNode (element) {
        if (element.nodeName === 'HTML') {
          return element
        }
        return element.parentNode || element.host
      }

      /**
       * Returns the scrolling parent of the given element
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element
       * @returns {Element} scroll parent
       */
      function getScrollParent (element) {
        // Return body, `getScroll` will take care to get the correct `scrollTop` from it
        if (!element) {
          return document.body
        }

        switch (element.nodeName) {
          case 'HTML':
          case 'BODY':
            return element.ownerDocument.body
          case '#document':
            return element.body
        }

        // Firefox want us to check `-x` and `-y` variations as well

        var _getStyleComputedProp = getStyleComputedProperty(element),
          overflow = _getStyleComputedProp.overflow,
          overflowX = _getStyleComputedProp.overflowX,
          overflowY = _getStyleComputedProp.overflowY

        if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
          return element
        }

        return getScrollParent(getParentNode(element))
      }

      /**
       * Returns the reference node of the reference object, or the reference object itself.
       * @method
       * @memberof Popper.Utils
       * @param {Element|Object} reference - the reference element (the popper will be relative to this)
       * @returns {Element} parent
       */
      function getReferenceNode (reference) {
        return reference && reference.referenceNode ? reference.referenceNode : reference
      }

      var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode)
      var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent)

      /**
       * Determines if the browser is Internet Explorer
       * @method
       * @memberof Popper.Utils
       * @param {Number} version to check
       * @returns {Boolean} isIE
       */
      function isIE (version) {
        if (version === 11) {
          return isIE11
        }
        if (version === 10) {
          return isIE10
        }
        return isIE11 || isIE10
      }

      /**
       * Returns the offset parent of the given element
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element
       * @returns {Element} offset parent
       */
      function getOffsetParent (element) {
        if (!element) {
          return document.documentElement
        }

        var noOffsetParent = isIE(10) ? document.body : null

        // NOTE: 1 DOM access here
        var offsetParent = element.offsetParent || null
        // Skip hidden elements which don't have an offsetParent
        while (offsetParent === noOffsetParent && element.nextElementSibling) {
          offsetParent = (element = element.nextElementSibling).offsetParent
        }

        var nodeName = offsetParent && offsetParent.nodeName

        if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
          return element ? element.ownerDocument.documentElement : document.documentElement
        }

        // .offsetParent will return the closest TH, TD or TABLE in case
        // no offsetParent is present, I hate this job...
        if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
          return getOffsetParent(offsetParent)
        }

        return offsetParent
      }

      function isOffsetContainer (element) {
        var nodeName = element.nodeName

        if (nodeName === 'BODY') {
          return false
        }
        return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element
      }

      /**
       * Finds the root node (document, shadowDOM root) of the given element
       * @method
       * @memberof Popper.Utils
       * @argument {Element} node
       * @returns {Element} root node
       */
      function getRoot (node) {
        if (node.parentNode !== null) {
          return getRoot(node.parentNode)
        }

        return node
      }

      /**
       * Finds the offset parent common to the two provided nodes
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element1
       * @argument {Element} element2
       * @returns {Element} common offset parent
       */
      function findCommonOffsetParent (element1, element2) {
        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
        if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
          return document.documentElement
        }

        // Here we make sure to give as "start" the element that comes first in the DOM
        var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING
        var start = order ? element1 : element2
        var end = order ? element2 : element1

        // Get common ancestor container
        var range = document.createRange()
        range.setStart(start, 0)
        range.setEnd(end, 0)
        var commonAncestorContainer = range.commonAncestorContainer

        // Both nodes are inside #document

        if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
          if (isOffsetContainer(commonAncestorContainer)) {
            return commonAncestorContainer
          }

          return getOffsetParent(commonAncestorContainer)
        }

        // one of the nodes is inside shadowDOM, find which one
        var element1root = getRoot(element1)
        if (element1root.host) {
          return findCommonOffsetParent(element1root.host, element2)
        } else {
          return findCommonOffsetParent(element1, getRoot(element2).host)
        }
      }

      /**
       * Gets the scroll value of the given element in the given side (top and left)
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element
       * @argument {String} side `top` or `left`
       * @returns {number} amount of scrolled pixels
       */
      function getScroll (element) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top'

        var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft'
        var nodeName = element.nodeName

        if (nodeName === 'BODY' || nodeName === 'HTML') {
          var html = element.ownerDocument.documentElement
          var scrollingElement = element.ownerDocument.scrollingElement || html
          return scrollingElement[upperSide]
        }

        return element[upperSide]
      }

      /*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
      function includeScroll (rect, element) {
        var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false

        var scrollTop = getScroll(element, 'top')
        var scrollLeft = getScroll(element, 'left')
        var modifier = subtract ? -1 : 1
        rect.top += scrollTop * modifier
        rect.bottom += scrollTop * modifier
        rect.left += scrollLeft * modifier
        rect.right += scrollLeft * modifier
        return rect
      }

      /*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

      function getBordersSize (styles, axis) {
        var sideA = axis === 'x' ? 'Left' : 'Top'
        var sideB = sideA === 'Left' ? 'Right' : 'Bottom'

        return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width'])
      }

      function getSize (axis, body, html, computedStyle) {
        return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0)
      }

      function getWindowSizes (document) {
        var body = document.body
        var html = document.documentElement
        var computedStyle = isIE(10) && getComputedStyle(html)

        return {
          height: getSize('Height', body, html, computedStyle),
          width: getSize('Width', body, html, computedStyle)
        }
      }

      var classCallCheck = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      var createClass = function () {
        function defineProperties (target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i]
            descriptor.enumerable = descriptor.enumerable || false
            descriptor.configurable = true
            if ('value' in descriptor) descriptor.writable = true
            Object.defineProperty(target, descriptor.key, descriptor)
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps)
          if (staticProps) defineProperties(Constructor, staticProps)
          return Constructor
        }
      }()


      var defineProperty = function (obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }

        return obj
      }

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i]

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key]
            }
          }
        }

        return target
      }

      /**
       * Given element offsets, generate an output similar to getBoundingClientRect
       * @method
       * @memberof Popper.Utils
       * @argument {Object} offsets
       * @returns {Object} ClientRect like output
       */
      function getClientRect (offsets) {
        return _extends({}, offsets, {
          right: offsets.left + offsets.width,
          bottom: offsets.top + offsets.height
        })
      }

      /**
       * Get bounding client rect of given element
       * @method
       * @memberof Popper.Utils
       * @param {HTMLElement} element
       * @return {Object} client rect
       */
      function getBoundingClientRect (element) {
        var rect = {}

        // IE10 10 FIX: Please, don't ask, the element isn't
        // considered in DOM in some circumstances...
        // This isn't reproducible in IE10 compatibility mode of IE11
        try {
          if (isIE(10)) {
            rect = element.getBoundingClientRect()
            var scrollTop = getScroll(element, 'top')
            var scrollLeft = getScroll(element, 'left')
            rect.top += scrollTop
            rect.left += scrollLeft
            rect.bottom += scrollTop
            rect.right += scrollLeft
          } else {
            rect = element.getBoundingClientRect()
          }
        } catch (e) {
        }

        var result = {
          left: rect.left,
          top: rect.top,
          width: rect.right - rect.left,
          height: rect.bottom - rect.top
        }

        // subtract scrollbar size from sizes
        var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {}
        var width = sizes.width || element.clientWidth || result.width
        var height = sizes.height || element.clientHeight || result.height

        var horizScrollbar = element.offsetWidth - width
        var vertScrollbar = element.offsetHeight - height

        // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
        // we make this check conditional for performance reasons
        if (horizScrollbar || vertScrollbar) {
          var styles = getStyleComputedProperty(element)
          horizScrollbar -= getBordersSize(styles, 'x')
          vertScrollbar -= getBordersSize(styles, 'y')

          result.width -= horizScrollbar
          result.height -= vertScrollbar
        }

        return getClientRect(result)
      }

      function getOffsetRectRelativeToArbitraryNode (children, parent) {
        var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false

        var isIE10 = isIE(10)
        var isHTML = parent.nodeName === 'HTML'
        var childrenRect = getBoundingClientRect(children)
        var parentRect = getBoundingClientRect(parent)
        var scrollParent = getScrollParent(children)

        var styles = getStyleComputedProperty(parent)
        var borderTopWidth = parseFloat(styles.borderTopWidth)
        var borderLeftWidth = parseFloat(styles.borderLeftWidth)

        // In cases where the parent is fixed, we must ignore negative scroll in offset calc
        if (fixedPosition && isHTML) {
          parentRect.top = Math.max(parentRect.top, 0)
          parentRect.left = Math.max(parentRect.left, 0)
        }
        var offsets = getClientRect({
          top: childrenRect.top - parentRect.top - borderTopWidth,
          left: childrenRect.left - parentRect.left - borderLeftWidth,
          width: childrenRect.width,
          height: childrenRect.height
        })
        offsets.marginTop = 0
        offsets.marginLeft = 0

        // Subtract margins of documentElement in case it's being used as parent
        // we do this only on HTML because it's the only element that behaves
        // differently when margins are applied to it. The margins are included in
        // the box of the documentElement, in the other cases not.
        if (!isIE10 && isHTML) {
          var marginTop = parseFloat(styles.marginTop)
          var marginLeft = parseFloat(styles.marginLeft)

          offsets.top -= borderTopWidth - marginTop
          offsets.bottom -= borderTopWidth - marginTop
          offsets.left -= borderLeftWidth - marginLeft
          offsets.right -= borderLeftWidth - marginLeft

          // Attach marginTop and marginLeft because in some circumstances we may need them
          offsets.marginTop = marginTop
          offsets.marginLeft = marginLeft
        }

        if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
          offsets = includeScroll(offsets, parent)
        }

        return offsets
      }

      function getViewportOffsetRectRelativeToArtbitraryNode (element) {
        var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false

        var html = element.ownerDocument.documentElement
        var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html)
        var width = Math.max(html.clientWidth, window.innerWidth || 0)
        var height = Math.max(html.clientHeight, window.innerHeight || 0)

        var scrollTop = !excludeScroll ? getScroll(html) : 0
        var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0

        var offset = {
          top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
          left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
          width: width,
          height: height
        }

        return getClientRect(offset)
      }

      /**
       * Check if the given element is fixed or is inside a fixed parent
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element
       * @argument {Element} customContainer
       * @returns {Boolean} answer to "isFixed?"
       */
      function isFixed (element) {
        var nodeName = element.nodeName
        if (nodeName === 'BODY' || nodeName === 'HTML') {
          return false
        }
        if (getStyleComputedProperty(element, 'position') === 'fixed') {
          return true
        }
        var parentNode = getParentNode(element)
        if (!parentNode) {
          return false
        }
        return isFixed(parentNode)
      }

      /**
       * Finds the first parent of an element that has a transformed property defined
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element
       * @returns {Element} first transformed parent or documentElement
       */

      function getFixedPositionOffsetParent (element) {
        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
        if (!element || !element.parentElement || isIE()) {
          return document.documentElement
        }
        var el = element.parentElement
        while (el && getStyleComputedProperty(el, 'transform') === 'none') {
          el = el.parentElement
        }
        return el || document.documentElement
      }

      /**
       * Computed the boundaries limits and return them
       * @method
       * @memberof Popper.Utils
       * @param {HTMLElement} popper
       * @param {HTMLElement} reference
       * @param {number} padding
       * @param {HTMLElement} boundariesElement - Element used to define the boundaries
       * @param {Boolean} fixedPosition - Is in fixed position mode
       * @returns {Object} Coordinates of the boundaries
       */
      function getBoundaries (popper, reference, padding, boundariesElement) {
        var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false

        // NOTE: 1 DOM access here

        var boundaries = {top: 0, left: 0}
        var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference))

        // Handle viewport case
        if (boundariesElement === 'viewport') {
          boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition)
        } else {
          // Handle other cases based on DOM element used as boundaries
          var boundariesNode = void 0
          if (boundariesElement === 'scrollParent') {
            boundariesNode = getScrollParent(getParentNode(reference))
            if (boundariesNode.nodeName === 'BODY') {
              boundariesNode = popper.ownerDocument.documentElement
            }
          } else if (boundariesElement === 'window') {
            boundariesNode = popper.ownerDocument.documentElement
          } else {
            boundariesNode = boundariesElement
          }

          var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition)

          // In case of HTML, we need a different computation
          if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
            var _getWindowSizes = getWindowSizes(popper.ownerDocument),
              height = _getWindowSizes.height,
              width = _getWindowSizes.width

            boundaries.top += offsets.top - offsets.marginTop
            boundaries.bottom = height + offsets.top
            boundaries.left += offsets.left - offsets.marginLeft
            boundaries.right = width + offsets.left
          } else {
            // for all the other DOM elements, this one is good
            boundaries = offsets
          }
        }

        // Add paddings
        padding = padding || 0
        var isPaddingNumber = typeof padding === 'number'
        boundaries.left += isPaddingNumber ? padding : padding.left || 0
        boundaries.top += isPaddingNumber ? padding : padding.top || 0
        boundaries.right -= isPaddingNumber ? padding : padding.right || 0
        boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0

        return boundaries
      }

      function getArea (_ref) {
        var width = _ref.width,
          height = _ref.height

        return width * height
      }

      /**
       * Utility used to transform the `auto` placement to the placement with more
       * available space.
       * @method
       * @memberof Popper.Utils
       * @argument {Object} data - The data object generated by update method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function computeAutoPlacement (placement, refRect, popper, reference, boundariesElement) {
        var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0

        if (placement.indexOf('auto') === -1) {
          return placement
        }

        var boundaries = getBoundaries(popper, reference, padding, boundariesElement)

        var rects = {
          top: {
            width: boundaries.width,
            height: refRect.top - boundaries.top
          },
          right: {
            width: boundaries.right - refRect.right,
            height: boundaries.height
          },
          bottom: {
            width: boundaries.width,
            height: boundaries.bottom - refRect.bottom
          },
          left: {
            width: refRect.left - boundaries.left,
            height: boundaries.height
          }
        }

        var sortedAreas = Object.keys(rects).map(function (key) {
          return _extends({
            key: key
          }, rects[key], {
            area: getArea(rects[key])
          })
        }).sort(function (a, b) {
          return b.area - a.area
        })

        var filteredAreas = sortedAreas.filter(function (_ref2) {
          var width = _ref2.width,
            height = _ref2.height
          return width >= popper.clientWidth && height >= popper.clientHeight
        })

        var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key

        var variation = placement.split('-')[1]

        return computedPlacement + (variation ? '-' + variation : '')
      }

      /**
       * Get offsets to the reference element
       * @method
       * @memberof Popper.Utils
       * @param {Object} state
       * @param {Element} popper - the popper element
       * @param {Element} reference - the reference element (the popper will be relative to this)
       * @param {Element} fixedPosition - is in fixed position mode
       * @returns {Object} An object containing the offsets which will be applied to the popper
       */
      function getReferenceOffsets (state, popper, reference) {
        var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null

        var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference))
        return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition)
      }

      /**
       * Get the outer sizes of the given element (offset size + margins)
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element
       * @returns {Object} object containing width and height properties
       */
      function getOuterSizes (element) {
        var window = element.ownerDocument.defaultView
        var styles = window.getComputedStyle(element)
        var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0)
        var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0)
        var result = {
          width: element.offsetWidth + y,
          height: element.offsetHeight + x
        }
        return result
      }

      /**
       * Get the opposite placement of the given one
       * @method
       * @memberof Popper.Utils
       * @argument {String} placement
       * @returns {String} flipped placement
       */
      function getOppositePlacement (placement) {
        var hash = {left: 'right', right: 'left', bottom: 'top', top: 'bottom'}
        return placement.replace(/left|right|bottom|top/g, function (matched) {
          return hash[matched]
        })
      }

      /**
       * Get offsets to the popper
       * @method
       * @memberof Popper.Utils
       * @param {Object} position - CSS position the Popper will get applied
       * @param {HTMLElement} popper - the popper element
       * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
       * @param {String} placement - one of the valid placement options
       * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
       */
      function getPopperOffsets (popper, referenceOffsets, placement) {
        placement = placement.split('-')[0]

        // Get popper node sizes
        var popperRect = getOuterSizes(popper)

        // Add position, width and height to our offsets object
        var popperOffsets = {
          width: popperRect.width,
          height: popperRect.height
        }

        // depending by the popper placement we have to compute its offsets slightly differently
        var isHoriz = ['right', 'left'].indexOf(placement) !== -1
        var mainSide = isHoriz ? 'top' : 'left'
        var secondarySide = isHoriz ? 'left' : 'top'
        var measurement = isHoriz ? 'height' : 'width'
        var secondaryMeasurement = !isHoriz ? 'height' : 'width'

        popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2
        if (placement === secondarySide) {
          popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement]
        } else {
          popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)]
        }

        return popperOffsets
      }

      /**
       * Mimics the `find` method of Array
       * @method
       * @memberof Popper.Utils
       * @argument {Array} arr
       * @argument prop
       * @argument value
       * @returns index or -1
       */
      function find (arr, check) {
        // use native find if supported
        if (Array.prototype.find) {
          return arr.find(check)
        }

        // use `filter` to obtain the same behavior of `find`
        return arr.filter(check)[0]
      }

      /**
       * Return the index of the matching object
       * @method
       * @memberof Popper.Utils
       * @argument {Array} arr
       * @argument prop
       * @argument value
       * @returns index or -1
       */
      function findIndex (arr, prop, value) {
        // use native findIndex if supported
        if (Array.prototype.findIndex) {
          return arr.findIndex(function (cur) {
            return cur[prop] === value
          })
        }

        // use `find` + `indexOf` if `findIndex` isn't supported
        var match = find(arr, function (obj) {
          return obj[prop] === value
        })
        return arr.indexOf(match)
      }

      /**
       * Loop trough the list of modifiers and run them in order,
       * each of them will then edit the data object.
       * @method
       * @memberof Popper.Utils
       * @param {dataObject} data
       * @param {Array} modifiers
       * @param {String} ends - Optional modifier name used as stopper
       * @returns {dataObject}
       */
      function runModifiers (modifiers, data, ends) {
        var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends))

        modifiersToRun.forEach(function (modifier) {
          if (modifier['function']) {
            // eslint-disable-line dot-notation
            console.warn('`modifier.function` is deprecated, use `modifier.fn`!')
          }
          var fn = modifier['function'] || modifier.fn // eslint-disable-line dot-notation
          if (modifier.enabled && isFunction(fn)) {
            // Add properties to offsets to make them a complete clientRect object
            // we do this before each modifier to make sure the previous one doesn't
            // mess with these values
            data.offsets.popper = getClientRect(data.offsets.popper)
            data.offsets.reference = getClientRect(data.offsets.reference)

            data = fn(data, modifier)
          }
        })

        return data
      }

      /**
       * Updates the position of the popper, computing the new offsets and applying
       * the new style.<br />
       * Prefer `scheduleUpdate` over `update` because of performance reasons.
       * @method
       * @memberof Popper
       */
      function update () {
        // if popper is destroyed, don't perform any further update
        if (this.state.isDestroyed) {
          return
        }

        var data = {
          instance: this,
          styles: {},
          arrowStyles: {},
          attributes: {},
          flipped: false,
          offsets: {}
        }

        // compute reference element offsets
        data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed)

        // compute auto placement, store placement inside the data object,
        // modifiers will be able to edit `placement` if needed
        // and refer to originalPlacement to know the original value
        data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding)

        // store the computed placement inside `originalPlacement`
        data.originalPlacement = data.placement

        data.positionFixed = this.options.positionFixed

        // compute the popper offsets
        data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement)

        data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute'

        // run the modifiers
        data = runModifiers(this.modifiers, data)

        // the first `update` will call `onCreate` callback
        // the other ones will call `onUpdate` callback
        if (!this.state.isCreated) {
          this.state.isCreated = true
          this.options.onCreate(data)
        } else {
          this.options.onUpdate(data)
        }
      }

      /**
       * Helper used to know if the given modifier is enabled.
       * @method
       * @memberof Popper.Utils
       * @returns {Boolean}
       */
      function isModifierEnabled (modifiers, modifierName) {
        return modifiers.some(function (_ref) {
          var name = _ref.name,
            enabled = _ref.enabled
          return enabled && name === modifierName
        })
      }

      /**
       * Get the prefixed supported property name
       * @method
       * @memberof Popper.Utils
       * @argument {String} property (camelCase)
       * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
       */
      function getSupportedPropertyName (property) {
        var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O']
        var upperProp = property.charAt(0).toUpperCase() + property.slice(1)

        for (var i = 0; i < prefixes.length; i++) {
          var prefix = prefixes[i]
          var toCheck = prefix ? '' + prefix + upperProp : property
          if (typeof document.body.style[toCheck] !== 'undefined') {
            return toCheck
          }
        }
        return null
      }

      /**
       * Destroys the popper.
       * @method
       * @memberof Popper
       */
      function destroy () {
        this.state.isDestroyed = true

        // touch DOM only if `applyStyle` modifier is enabled
        if (isModifierEnabled(this.modifiers, 'applyStyle')) {
          this.popper.removeAttribute('x-placement')
          this.popper.style.position = ''
          this.popper.style.top = ''
          this.popper.style.left = ''
          this.popper.style.right = ''
          this.popper.style.bottom = ''
          this.popper.style.willChange = ''
          this.popper.style[getSupportedPropertyName('transform')] = ''
        }

        this.disableEventListeners()

        // remove the popper if user explicitly asked for the deletion on destroy
        // do not use `remove` because IE11 doesn't support it
        if (this.options.removeOnDestroy) {
          this.popper.parentNode.removeChild(this.popper)
        }
        return this
      }

      /**
       * Get the window associated with the element
       * @argument {Element} element
       * @returns {Window}
       */
      function getWindow (element) {
        var ownerDocument = element.ownerDocument
        return ownerDocument ? ownerDocument.defaultView : window
      }

      function attachToScrollParents (scrollParent, event, callback, scrollParents) {
        var isBody = scrollParent.nodeName === 'BODY'
        var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent
        target.addEventListener(event, callback, {passive: true})

        if (!isBody) {
          attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents)
        }
        scrollParents.push(target)
      }

      /**
       * Setup needed event listeners used to update the popper position
       * @method
       * @memberof Popper.Utils
       * @private
       */
      function setupEventListeners (reference, options, state, updateBound) {
        // Resize event listener on window
        state.updateBound = updateBound
        getWindow(reference).addEventListener('resize', state.updateBound, {passive: true})

        // Scroll event listener on scroll parents
        var scrollElement = getScrollParent(reference)
        attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents)
        state.scrollElement = scrollElement
        state.eventsEnabled = true

        return state
      }

      /**
       * It will add resize/scroll events and start recalculating
       * position of the popper element when they are triggered.
       * @method
       * @memberof Popper
       */
      function enableEventListeners () {
        if (!this.state.eventsEnabled) {
          this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate)
        }
      }

      /**
       * Remove event listeners used to update the popper position
       * @method
       * @memberof Popper.Utils
       * @private
       */
      function removeEventListeners (reference, state) {
        // Remove resize event listener on window
        getWindow(reference).removeEventListener('resize', state.updateBound)

        // Remove scroll event listener on scroll parents
        state.scrollParents.forEach(function (target) {
          target.removeEventListener('scroll', state.updateBound)
        })

        // Reset state
        state.updateBound = null
        state.scrollParents = []
        state.scrollElement = null
        state.eventsEnabled = false
        return state
      }

      /**
       * It will remove resize/scroll events and won't recalculate popper position
       * when they are triggered. It also won't trigger `onUpdate` callback anymore,
       * unless you call `update` method manually.
       * @method
       * @memberof Popper
       */
      function disableEventListeners () {
        if (this.state.eventsEnabled) {
          cancelAnimationFrame(this.scheduleUpdate)
          this.state = removeEventListeners(this.reference, this.state)
        }
      }

      /**
       * Tells if a given input is a number
       * @method
       * @memberof Popper.Utils
       * @param {*} input to check
       * @return {Boolean}
       */
      function isNumeric (n) {
        return n !== '' && !isNaN(parseFloat(n)) && isFinite(n)
      }

      /**
       * Set the style to the given popper
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element - Element to apply the style to
       * @argument {Object} styles
       * Object with a list of properties and values which will be applied to the element
       */
      function setStyles (element, styles) {
        Object.keys(styles).forEach(function (prop) {
          var unit = ''
          // add unit if the value is numeric and is one of the following
          if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
            unit = 'px'
          }
          element.style[prop] = styles[prop] + unit
        })
      }

      /**
       * Set the attributes to the given popper
       * @method
       * @memberof Popper.Utils
       * @argument {Element} element - Element to apply the attributes to
       * @argument {Object} styles
       * Object with a list of properties and values which will be applied to the element
       */
      function setAttributes (element, attributes) {
        Object.keys(attributes).forEach(function (prop) {
          var value = attributes[prop]
          if (value !== false) {
            element.setAttribute(prop, attributes[prop])
          } else {
            element.removeAttribute(prop)
          }
        })
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by `update` method
       * @argument {Object} data.styles - List of style properties - values to apply to popper element
       * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The same data object
       */
      function applyStyle (data) {
        // any property present in `data.styles` will be applied to the popper,
        // in this way we can make the 3rd party modifiers add custom styles to it
        // Be aware, modifiers could override the properties defined in the previous
        // lines of this modifier!
        setStyles(data.instance.popper, data.styles)

        // any property present in `data.attributes` will be applied to the popper,
        // they will be set as HTML attributes of the element
        setAttributes(data.instance.popper, data.attributes)

        // if arrowElement is defined and arrowStyles has some properties
        if (data.arrowElement && Object.keys(data.arrowStyles).length) {
          setStyles(data.arrowElement, data.arrowStyles)
        }

        return data
      }

      /**
       * Set the x-placement attribute before everything else because it could be used
       * to add margins to the popper margins needs to be calculated to get the
       * correct popper offsets.
       * @method
       * @memberof Popper.modifiers
       * @param {HTMLElement} reference - The reference element used to position the popper
       * @param {HTMLElement} popper - The HTML element used as popper
       * @param {Object} options - Popper.js options
       */
      function applyStyleOnLoad (reference, popper, options, modifierOptions, state) {
        // compute reference element offsets
        var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed)

        // compute auto placement, store placement inside the data object,
        // modifiers will be able to edit `placement` if needed
        // and refer to originalPlacement to know the original value
        var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding)

        popper.setAttribute('x-placement', placement)

        // Apply `position` to popper before anything else because
        // without the position applied we can't guarantee correct computations
        setStyles(popper, {position: options.positionFixed ? 'fixed' : 'absolute'})

        return options
      }

      /**
       * @function
       * @memberof Popper.Utils
       * @argument {Object} data - The data object generated by `update` method
       * @argument {Boolean} shouldRound - If the offsets should be rounded at all
       * @returns {Object} The popper's position offsets rounded
       *
       * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
       * good as it can be within reason.
       * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
       *
       * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
       * as well on High DPI screens).
       *
       * Firefox prefers no rounding for positioning and does not have blurriness on
       * high DPI screens.
       *
       * Only horizontal placement and left/right values need to be considered.
       */
      function getRoundedOffsets (data, shouldRound) {
        var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference
        var round = Math.round,
          floor = Math.floor

        var noRound = function noRound (v) {
          return v
        }

        var referenceWidth = round(reference.width)
        var popperWidth = round(popper.width)

        var isVertical = ['left', 'right'].indexOf(data.placement) !== -1
        var isVariation = data.placement.indexOf('-') !== -1
        var sameWidthParity = referenceWidth % 2 === popperWidth % 2
        var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1

        var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor
        var verticalToInteger = !shouldRound ? noRound : round

        return {
          left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
          top: verticalToInteger(popper.top),
          bottom: verticalToInteger(popper.bottom),
          right: horizontalToInteger(popper.right)
        }
      }

      var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent)

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by `update` method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function computeStyle (data, options) {
        var x = options.x,
          y = options.y
        var popper = data.offsets.popper

        // Remove this legacy support in Popper.js v2

        var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
          return modifier.name === 'applyStyle'
        }).gpuAcceleration
        if (legacyGpuAccelerationOption !== undefined) {
          console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!')
        }
        var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration

        var offsetParent = getOffsetParent(data.instance.popper)
        var offsetParentRect = getBoundingClientRect(offsetParent)

        // Styles
        var styles = {
          position: popper.position
        }

        var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox)

        var sideA = x === 'bottom' ? 'top' : 'bottom'
        var sideB = y === 'right' ? 'left' : 'right'

        // if gpuAcceleration is set to `true` and transform is supported,
        //  we use `translate3d` to apply the position to the popper we
        // automatically use the supported prefixed version if needed
        var prefixedProperty = getSupportedPropertyName('transform')

        // now, let's make a step back and look at this code closely (wtf?)
        // If the content of the popper grows once it's been positioned, it
        // may happen that the popper gets misplaced because of the new content
        // overflowing its reference element
        // To avoid this problem, we provide two options (x and y), which allow
        // the consumer to define the offset origin.
        // If we position a popper on top of a reference element, we can set
        // `x` to `top` to make the popper grow towards its top instead of
        // its bottom.
        var left = void 0,
          top = void 0
        if (sideA === 'bottom') {
          // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
          // and not the bottom of the html element
          if (offsetParent.nodeName === 'HTML') {
            top = -offsetParent.clientHeight + offsets.bottom
          } else {
            top = -offsetParentRect.height + offsets.bottom
          }
        } else {
          top = offsets.top
        }
        if (sideB === 'right') {
          if (offsetParent.nodeName === 'HTML') {
            left = -offsetParent.clientWidth + offsets.right
          } else {
            left = -offsetParentRect.width + offsets.right
          }
        } else {
          left = offsets.left
        }
        if (gpuAcceleration && prefixedProperty) {
          styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)'
          styles[sideA] = 0
          styles[sideB] = 0
          styles.willChange = 'transform'
        } else {
          // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
          var invertTop = sideA === 'bottom' ? -1 : 1
          var invertLeft = sideB === 'right' ? -1 : 1
          styles[sideA] = top * invertTop
          styles[sideB] = left * invertLeft
          styles.willChange = sideA + ', ' + sideB
        }

        // Attributes
        var attributes = {
          'x-placement': data.placement
        }

        // Update `data` attributes, styles and arrowStyles
        data.attributes = _extends({}, attributes, data.attributes)
        data.styles = _extends({}, styles, data.styles)
        data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles)

        return data
      }

      /**
       * Helper used to know if the given modifier depends from another one.<br />
       * It checks if the needed modifier is listed and enabled.
       * @method
       * @memberof Popper.Utils
       * @param {Array} modifiers - list of modifiers
       * @param {String} requestingName - name of requesting modifier
       * @param {String} requestedName - name of requested modifier
       * @returns {Boolean}
       */
      function isModifierRequired (modifiers, requestingName, requestedName) {
        var requesting = find(modifiers, function (_ref) {
          var name = _ref.name
          return name === requestingName
        })

        var isRequired = !!requesting && modifiers.some(function (modifier) {
          return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order
        })

        if (!isRequired) {
          var _requesting = '`' + requestingName + '`'
          var requested = '`' + requestedName + '`'
          console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!')
        }
        return isRequired
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by update method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function arrow (data, options) {
        var _data$offsets$arrow

        // arrow depends on keepTogether in order to work
        if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
          return data
        }

        var arrowElement = options.element

        // if arrowElement is a string, suppose it's a CSS selector
        if (typeof arrowElement === 'string') {
          arrowElement = data.instance.popper.querySelector(arrowElement)

          // if arrowElement is not found, don't run the modifier
          if (!arrowElement) {
            return data
          }
        } else {
          // if the arrowElement isn't a query selector we must check that the
          // provided DOM node is child of its popper node
          if (!data.instance.popper.contains(arrowElement)) {
            console.warn('WARNING: `arrow.element` must be child of its popper element!')
            return data
          }
        }

        var placement = data.placement.split('-')[0]
        var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference

        var isVertical = ['left', 'right'].indexOf(placement) !== -1

        var len = isVertical ? 'height' : 'width'
        var sideCapitalized = isVertical ? 'Top' : 'Left'
        var side = sideCapitalized.toLowerCase()
        var altSide = isVertical ? 'left' : 'top'
        var opSide = isVertical ? 'bottom' : 'right'
        var arrowElementSize = getOuterSizes(arrowElement)[len]

        //
        // extends keepTogether behavior making sure the popper and its
        // reference have enough pixels in conjunction
        //

        // top/left side
        if (reference[opSide] - arrowElementSize < popper[side]) {
          data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize)
        }
        // bottom/right side
        if (reference[side] + arrowElementSize > popper[opSide]) {
          data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide]
        }
        data.offsets.popper = getClientRect(data.offsets.popper)

        // compute center of the popper
        var center = reference[side] + reference[len] / 2 - arrowElementSize / 2

        // Compute the sideValue using the updated popper offsets
        // take popper margin in account because we don't have this info available
        var css = getStyleComputedProperty(data.instance.popper)
        var popperMarginSide = parseFloat(css['margin' + sideCapitalized])
        var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'])
        var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide

        // prevent arrowElement from being placed not contiguously to its popper
        sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0)

        data.arrowElement = arrowElement
        data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow)

        return data
      }

      /**
       * Get the opposite placement variation of the given one
       * @method
       * @memberof Popper.Utils
       * @argument {String} placement variation
       * @returns {String} flipped placement variation
       */
      function getOppositeVariation (variation) {
        if (variation === 'end') {
          return 'start'
        } else if (variation === 'start') {
          return 'end'
        }
        return variation
      }

      /**
       * List of accepted placements to use as values of the `placement` option.<br />
       * Valid placements are:
       * - `auto`
       * - `top`
       * - `right`
       * - `bottom`
       * - `left`
       *
       * Each placement can have a variation from this list:
       * - `-start`
       * - `-end`
       *
       * Variations are interpreted easily if you think of them as the left to right
       * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
       * is right.<br />
       * Vertically (`left` and `right`), `start` is top and `end` is bottom.
       *
       * Some valid examples are:
       * - `top-end` (on top of reference, right aligned)
       * - `right-start` (on right of reference, top aligned)
       * - `bottom` (on bottom, centered)
       * - `auto-end` (on the side with more space available, alignment depends by placement)
       *
       * @static
       * @type {Array}
       * @enum {String}
       * @readonly
       * @method placements
       * @memberof Popper
       */
      var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']

// Get rid of `auto` `auto-start` and `auto-end`
      var validPlacements = placements.slice(3)

      /**
       * Given an initial placement, returns all the subsequent placements
       * clockwise (or counter-clockwise).
       *
       * @method
       * @memberof Popper.Utils
       * @argument {String} placement - A valid placement (it accepts variations)
       * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
       * @returns {Array} placements including their variations
       */
      function clockwise (placement) {
        var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false

        var index = validPlacements.indexOf(placement)
        var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index))
        return counter ? arr.reverse() : arr
      }

      var BEHAVIORS = {
        FLIP: 'flip',
        CLOCKWISE: 'clockwise',
        COUNTERCLOCKWISE: 'counterclockwise'
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by update method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function flip (data, options) {
        // if `inner` modifier is enabled, we can't use the `flip` modifier
        if (isModifierEnabled(data.instance.modifiers, 'inner')) {
          return data
        }

        if (data.flipped && data.placement === data.originalPlacement) {
          // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
          return data
        }

        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed)

        var placement = data.placement.split('-')[0]
        var placementOpposite = getOppositePlacement(placement)
        var variation = data.placement.split('-')[1] || ''

        var flipOrder = []

        switch (options.behavior) {
          case BEHAVIORS.FLIP:
            flipOrder = [placement, placementOpposite]
            break
          case BEHAVIORS.CLOCKWISE:
            flipOrder = clockwise(placement)
            break
          case BEHAVIORS.COUNTERCLOCKWISE:
            flipOrder = clockwise(placement, true)
            break
          default:
            flipOrder = options.behavior
        }

        flipOrder.forEach(function (step, index) {
          if (placement !== step || flipOrder.length === index + 1) {
            return data
          }

          placement = data.placement.split('-')[0]
          placementOpposite = getOppositePlacement(placement)

          var popperOffsets = data.offsets.popper
          var refOffsets = data.offsets.reference

          // using floor because the reference offsets may contain decimals we are not going to consider here
          var floor = Math.floor
          var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom)

          var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left)
          var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right)
          var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top)
          var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom)

          var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom

          // flip the variation if required
          var isVertical = ['top', 'bottom'].indexOf(placement) !== -1

          // flips variation if reference element overflows boundaries
          var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom)

          // flips variation if popper content overflows boundaries
          var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop)

          var flippedVariation = flippedVariationByRef || flippedVariationByContent

          if (overlapsRef || overflowsBoundaries || flippedVariation) {
            // this boolean to detect any flip loop
            data.flipped = true

            if (overlapsRef || overflowsBoundaries) {
              placement = flipOrder[index + 1]
            }

            if (flippedVariation) {
              variation = getOppositeVariation(variation)
            }

            data.placement = placement + (variation ? '-' + variation : '')

            // this object contains `position`, we want to preserve it along with
            // any additional property we may add in the future
            data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement))

            data = runModifiers(data.instance.modifiers, data, 'flip')
          }
        })
        return data
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by update method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function keepTogether (data) {
        var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference

        var placement = data.placement.split('-')[0]
        var floor = Math.floor
        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1
        var side = isVertical ? 'right' : 'bottom'
        var opSide = isVertical ? 'left' : 'top'
        var measurement = isVertical ? 'width' : 'height'

        if (popper[side] < floor(reference[opSide])) {
          data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement]
        }
        if (popper[opSide] > floor(reference[side])) {
          data.offsets.popper[opSide] = floor(reference[side])
        }

        return data
      }

      /**
       * Converts a string containing value + unit into a px value number
       * @function
       * @memberof {modifiers~offset}
       * @private
       * @argument {String} str - Value + unit string
       * @argument {String} measurement - `height` or `width`
       * @argument {Object} popperOffsets
       * @argument {Object} referenceOffsets
       * @returns {Number|String}
       * Value in pixels, or original string if no values were extracted
       */
      function toValue (str, measurement, popperOffsets, referenceOffsets) {
        // separate value from unit
        var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/)
        var value = +split[1]
        var unit = split[2]

        // If it's not a number it's an operator, I guess
        if (!value) {
          return str
        }

        if (unit.indexOf('%') === 0) {
          var element = void 0
          switch (unit) {
            case '%p':
              element = popperOffsets
              break
            case '%':
            case '%r':
            default:
              element = referenceOffsets
          }

          var rect = getClientRect(element)
          return rect[measurement] / 100 * value
        } else if (unit === 'vh' || unit === 'vw') {
          // if is a vh or vw, we calculate the size based on the viewport
          var size = void 0
          if (unit === 'vh') {
            size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
          } else {
            size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
          }
          return size / 100 * value
        } else {
          // if is an explicit pixel unit, we get rid of the unit and keep the value
          // if is an implicit unit, it's px, and we return just the value
          return value
        }
      }

      /**
       * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
       * @function
       * @memberof {modifiers~offset}
       * @private
       * @argument {String} offset
       * @argument {Object} popperOffsets
       * @argument {Object} referenceOffsets
       * @argument {String} basePlacement
       * @returns {Array} a two cells array with x and y offsets in numbers
       */
      function parseOffset (offset, popperOffsets, referenceOffsets, basePlacement) {
        var offsets = [0, 0]

        // Use height if placement is left or right and index is 0 otherwise use width
        // in this way the first offset will use an axis and the second one
        // will use the other one
        var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1

        // Split the offset string to obtain a list of values and operands
        // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
        var fragments = offset.split(/(\+|\-)/).map(function (frag) {
          return frag.trim()
        })

        // Detect if the offset string contains a pair of values or a single one
        // they could be separated by comma or space
        var divider = fragments.indexOf(find(fragments, function (frag) {
          return frag.search(/,|\s/) !== -1
        }))

        if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
          console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.')
        }

        // If divider is found, we divide the list of values and operands to divide
        // them by ofset X and Y.
        var splitRegex = /\s*,\s*|\s+/
        var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments]

        // Convert the values with units to absolute pixels to allow our computations
        ops = ops.map(function (op, index) {
          // Most of the units rely on the orientation of the popper
          var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width'
          var mergeWithPrevious = false
          return op
            // This aggregates any `+` or `-` sign that aren't considered operators
            // e.g.: 10 + +5 => [10, +, +5]
            .reduce(function (a, b) {
              if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
                a[a.length - 1] = b
                mergeWithPrevious = true
                return a
              } else if (mergeWithPrevious) {
                a[a.length - 1] += b
                mergeWithPrevious = false
                return a
              } else {
                return a.concat(b)
              }
            }, [])
            // Here we convert the string values into number values (in px)
            .map(function (str) {
              return toValue(str, measurement, popperOffsets, referenceOffsets)
            })
        })

        // Loop trough the offsets arrays and execute the operations
        ops.forEach(function (op, index) {
          op.forEach(function (frag, index2) {
            if (isNumeric(frag)) {
              offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1)
            }
          })
        })
        return offsets
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by update method
       * @argument {Object} options - Modifiers configuration and options
       * @argument {Number|String} options.offset=0
       * The offset value as described in the modifier description
       * @returns {Object} The data object, properly modified
       */
      function offset (data, _ref) {
        var offset = _ref.offset
        var placement = data.placement,
          _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference

        var basePlacement = placement.split('-')[0]

        var offsets = void 0
        if (isNumeric(+offset)) {
          offsets = [+offset, 0]
        } else {
          offsets = parseOffset(offset, popper, reference, basePlacement)
        }

        if (basePlacement === 'left') {
          popper.top += offsets[0]
          popper.left -= offsets[1]
        } else if (basePlacement === 'right') {
          popper.top += offsets[0]
          popper.left += offsets[1]
        } else if (basePlacement === 'top') {
          popper.left += offsets[0]
          popper.top -= offsets[1]
        } else if (basePlacement === 'bottom') {
          popper.left += offsets[0]
          popper.top += offsets[1]
        }

        data.popper = popper
        return data
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by `update` method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function preventOverflow (data, options) {
        var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper)

        // If offsetParent is the reference element, we really want to
        // go one step up and use the next offsetParent as reference to
        // avoid to make this modifier completely useless and look like broken
        if (data.instance.reference === boundariesElement) {
          boundariesElement = getOffsetParent(boundariesElement)
        }

        // NOTE: DOM access here
        // resets the popper's position so that the document size can be calculated excluding
        // the size of the popper element itself
        var transformProp = getSupportedPropertyName('transform')
        var popperStyles = data.instance.popper.style // assignment to help minification
        var top = popperStyles.top,
          left = popperStyles.left,
          transform = popperStyles[transformProp]

        popperStyles.top = ''
        popperStyles.left = ''
        popperStyles[transformProp] = ''

        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed)

        // NOTE: DOM access here
        // restores the original style properties after the offsets have been computed
        popperStyles.top = top
        popperStyles.left = left
        popperStyles[transformProp] = transform

        options.boundaries = boundaries

        var order = options.priority
        var popper = data.offsets.popper

        var check = {
          primary: function primary (placement) {
            var value = popper[placement]
            if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
              value = Math.max(popper[placement], boundaries[placement])
            }
            return defineProperty({}, placement, value)
          },
          secondary: function secondary (placement) {
            var mainSide = placement === 'right' ? 'left' : 'top'
            var value = popper[mainSide]
            if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
              value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height))
            }
            return defineProperty({}, mainSide, value)
          }
        }

        order.forEach(function (placement) {
          var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary'
          popper = _extends({}, popper, check[side](placement))
        })

        data.offsets.popper = popper

        return data
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by `update` method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function shift (data) {
        var placement = data.placement
        var basePlacement = placement.split('-')[0]
        var shiftvariation = placement.split('-')[1]

        // if shift shiftvariation is specified, run the modifier
        if (shiftvariation) {
          var _data$offsets = data.offsets,
            reference = _data$offsets.reference,
            popper = _data$offsets.popper

          var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1
          var side = isVertical ? 'left' : 'top'
          var measurement = isVertical ? 'width' : 'height'

          var shiftOffsets = {
            start: defineProperty({}, side, reference[side]),
            end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
          }

          data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation])
        }

        return data
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by update method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function hide (data) {
        if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
          return data
        }

        var refRect = data.offsets.reference
        var bound = find(data.instance.modifiers, function (modifier) {
          return modifier.name === 'preventOverflow'
        }).boundaries

        if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
          // Avoid unnecessary DOM access if visibility hasn't changed
          if (data.hide === true) {
            return data
          }

          data.hide = true
          data.attributes['x-out-of-boundaries'] = ''
        } else {
          // Avoid unnecessary DOM access if visibility hasn't changed
          if (data.hide === false) {
            return data
          }

          data.hide = false
          data.attributes['x-out-of-boundaries'] = false
        }

        return data
      }

      /**
       * @function
       * @memberof Modifiers
       * @argument {Object} data - The data object generated by `update` method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {Object} The data object, properly modified
       */
      function inner (data) {
        var placement = data.placement
        var basePlacement = placement.split('-')[0]
        var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference

        var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1

        var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1

        popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0)

        data.placement = getOppositePlacement(placement)
        data.offsets.popper = getClientRect(popper)

        return data
      }

      /**
       * Modifier function, each modifier can have a function of this type assigned
       * to its `fn` property.<br />
       * These functions will be called on each update, this means that you must
       * make sure they are performant enough to avoid performance bottlenecks.
       *
       * @function ModifierFn
       * @argument {dataObject} data - The data object generated by `update` method
       * @argument {Object} options - Modifiers configuration and options
       * @returns {dataObject} The data object, properly modified
       */

      /**
       * Modifiers are plugins used to alter the behavior of your poppers.<br />
       * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
       * needed by the library.
       *
       * Usually you don't want to override the `order`, `fn` and `onLoad` props.
       * All the other properties are configurations that could be tweaked.
       * @namespace modifiers
       */
      var modifiers = {
        /**
         * Modifier used to shift the popper on the start or end of its reference
         * element.<br />
         * It will read the variation of the `placement` property.<br />
         * It can be one either `-end` or `-start`.
         * @memberof modifiers
         * @inner
         */
        shift: {
          /** @prop {number} order=100 - Index used to define the order of execution */
          order: 100,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: shift
        },

        /**
         * The `offset` modifier can shift your popper on both its axis.
         *
         * It accepts the following units:
         * - `px` or unit-less, interpreted as pixels
         * - `%` or `%r`, percentage relative to the length of the reference element
         * - `%p`, percentage relative to the length of the popper element
         * - `vw`, CSS viewport width unit
         * - `vh`, CSS viewport height unit
         *
         * For length is intended the main axis relative to the placement of the popper.<br />
         * This means that if the placement is `top` or `bottom`, the length will be the
         * `width`. In case of `left` or `right`, it will be the `height`.
         *
         * You can provide a single value (as `Number` or `String`), or a pair of values
         * as `String` divided by a comma or one (or more) white spaces.<br />
         * The latter is a deprecated method because it leads to confusion and will be
         * removed in v2.<br />
         * Additionally, it accepts additions and subtractions between different units.
         * Note that multiplications and divisions aren't supported.
         *
         * Valid examples are:
         * ```
         * 10
         * '10%'
         * '10, 10'
         * '10%, 10'
         * '10 + 10%'
         * '10 - 5vh + 3%'
         * '-10px + 5vh, 5px - 6%'
         * ```
         * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
         * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
         * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
         *
         * @memberof modifiers
         * @inner
         */
        offset: {
          /** @prop {number} order=200 - Index used to define the order of execution */
          order: 200,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: offset,
          /** @prop {Number|String} offset=0
           * The offset value as described in the modifier description
           */
          offset: 0
        },

        /**
         * Modifier used to prevent the popper from being positioned outside the boundary.
         *
         * A scenario exists where the reference itself is not within the boundaries.<br />
         * We can say it has "escaped the boundaries" — or just "escaped".<br />
         * In this case we need to decide whether the popper should either:
         *
         * - detach from the reference and remain "trapped" in the boundaries, or
         * - if it should ignore the boundary and "escape with its reference"
         *
         * When `escapeWithReference` is set to`true` and reference is completely
         * outside its boundaries, the popper will overflow (or completely leave)
         * the boundaries in order to remain attached to the edge of the reference.
         *
         * @memberof modifiers
         * @inner
         */
        preventOverflow: {
          /** @prop {number} order=300 - Index used to define the order of execution */
          order: 300,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: preventOverflow,
          /**
           * @prop {Array} [priority=['left','right','top','bottom']]
           * Popper will try to prevent overflow following these priorities by default,
           * then, it could overflow on the left and on top of the `boundariesElement`
           */
          priority: ['left', 'right', 'top', 'bottom'],
          /**
           * @prop {number} padding=5
           * Amount of pixel used to define a minimum distance between the boundaries
           * and the popper. This makes sure the popper always has a little padding
           * between the edges of its container
           */
          padding: 5,
          /**
           * @prop {String|HTMLElement} boundariesElement='scrollParent'
           * Boundaries used by the modifier. Can be `scrollParent`, `window`,
           * `viewport` or any DOM element.
           */
          boundariesElement: 'scrollParent'
        },

        /**
         * Modifier used to make sure the reference and its popper stay near each other
         * without leaving any gap between the two. Especially useful when the arrow is
         * enabled and you want to ensure that it points to its reference element.
         * It cares only about the first axis. You can still have poppers with margin
         * between the popper and its reference element.
         * @memberof modifiers
         * @inner
         */
        keepTogether: {
          /** @prop {number} order=400 - Index used to define the order of execution */
          order: 400,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: keepTogether
        },

        /**
         * This modifier is used to move the `arrowElement` of the popper to make
         * sure it is positioned between the reference element and its popper element.
         * It will read the outer size of the `arrowElement` node to detect how many
         * pixels of conjunction are needed.
         *
         * It has no effect if no `arrowElement` is provided.
         * @memberof modifiers
         * @inner
         */
        arrow: {
          /** @prop {number} order=500 - Index used to define the order of execution */
          order: 500,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: arrow,
          /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
          element: '[x-arrow]'
        },

        /**
         * Modifier used to flip the popper's placement when it starts to overlap its
         * reference element.
         *
         * Requires the `preventOverflow` modifier before it in order to work.
         *
         * **NOTE:** this modifier will interrupt the current update cycle and will
         * restart it if it detects the need to flip the placement.
         * @memberof modifiers
         * @inner
         */
        flip: {
          /** @prop {number} order=600 - Index used to define the order of execution */
          order: 600,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: flip,
          /**
           * @prop {String|Array} behavior='flip'
           * The behavior used to change the popper's placement. It can be one of
           * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
           * placements (with optional variations)
           */
          behavior: 'flip',
          /**
           * @prop {number} padding=5
           * The popper will flip if it hits the edges of the `boundariesElement`
           */
          padding: 5,
          /**
           * @prop {String|HTMLElement} boundariesElement='viewport'
           * The element which will define the boundaries of the popper position.
           * The popper will never be placed outside of the defined boundaries
           * (except if `keepTogether` is enabled)
           */
          boundariesElement: 'viewport',
          /**
           * @prop {Boolean} flipVariations=false
           * The popper will switch placement variation between `-start` and `-end` when
           * the reference element overlaps its boundaries.
           *
           * The original placement should have a set variation.
           */
          flipVariations: false,
          /**
           * @prop {Boolean} flipVariationsByContent=false
           * The popper will switch placement variation between `-start` and `-end` when
           * the popper element overlaps its reference boundaries.
           *
           * The original placement should have a set variation.
           */
          flipVariationsByContent: false
        },

        /**
         * Modifier used to make the popper flow toward the inner of the reference element.
         * By default, when this modifier is disabled, the popper will be placed outside
         * the reference element.
         * @memberof modifiers
         * @inner
         */
        inner: {
          /** @prop {number} order=700 - Index used to define the order of execution */
          order: 700,
          /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
          enabled: false,
          /** @prop {ModifierFn} */
          fn: inner
        },

        /**
         * Modifier used to hide the popper when its reference element is outside of the
         * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
         * be used to hide with a CSS selector the popper when its reference is
         * out of boundaries.
         *
         * Requires the `preventOverflow` modifier before it in order to work.
         * @memberof modifiers
         * @inner
         */
        hide: {
          /** @prop {number} order=800 - Index used to define the order of execution */
          order: 800,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: hide
        },

        /**
         * Computes the style that will be applied to the popper element to gets
         * properly positioned.
         *
         * Note that this modifier will not touch the DOM, it just prepares the styles
         * so that `applyStyle` modifier can apply it. This separation is useful
         * in case you need to replace `applyStyle` with a custom implementation.
         *
         * This modifier has `850` as `order` value to maintain backward compatibility
         * with previous versions of Popper.js. Expect the modifiers ordering method
         * to change in future major versions of the library.
         *
         * @memberof modifiers
         * @inner
         */
        computeStyle: {
          /** @prop {number} order=850 - Index used to define the order of execution */
          order: 850,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: computeStyle,
          /**
           * @prop {Boolean} gpuAcceleration=true
           * If true, it uses the CSS 3D transformation to position the popper.
           * Otherwise, it will use the `top` and `left` properties
           */
          gpuAcceleration: true,
          /**
           * @prop {string} [x='bottom']
           * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
           * Change this if your popper should grow in a direction different from `bottom`
           */
          x: 'bottom',
          /**
           * @prop {string} [x='left']
           * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
           * Change this if your popper should grow in a direction different from `right`
           */
          y: 'right'
        },

        /**
         * Applies the computed styles to the popper element.
         *
         * All the DOM manipulations are limited to this modifier. This is useful in case
         * you want to integrate Popper.js inside a framework or view library and you
         * want to delegate all the DOM manipulations to it.
         *
         * Note that if you disable this modifier, you must make sure the popper element
         * has its position set to `absolute` before Popper.js can do its work!
         *
         * Just disable this modifier and define your own to achieve the desired effect.
         *
         * @memberof modifiers
         * @inner
         */
        applyStyle: {
          /** @prop {number} order=900 - Index used to define the order of execution */
          order: 900,
          /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
          enabled: true,
          /** @prop {ModifierFn} */
          fn: applyStyle,
          /** @prop {Function} */
          onLoad: applyStyleOnLoad,
          /**
           * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
           * @prop {Boolean} gpuAcceleration=true
           * If true, it uses the CSS 3D transformation to position the popper.
           * Otherwise, it will use the `top` and `left` properties
           */
          gpuAcceleration: undefined
        }
      }

      /**
       * The `dataObject` is an object containing all the information used by Popper.js.
       * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
       * @name dataObject
       * @property {Object} data.instance The Popper.js instance
       * @property {String} data.placement Placement applied to popper
       * @property {String} data.originalPlacement Placement originally defined on init
       * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
       * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
       * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
       * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
       * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
       * @property {Object} data.boundaries Offsets of the popper boundaries
       * @property {Object} data.offsets The measurements of popper, reference and arrow elements
       * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
       * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
       * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
       */

      /**
       * Default options provided to Popper.js constructor.<br />
       * These can be overridden using the `options` argument of Popper.js.<br />
       * To override an option, simply pass an object with the same
       * structure of the `options` object, as the 3rd argument. For example:
       * ```
       * new Popper(ref, pop, {
       *   modifiers: {
       *     preventOverflow: { enabled: false }
       *   }
       * })
       * ```
       * @type {Object}
       * @static
       * @memberof Popper
       */
      var Defaults = {
        /**
         * Popper's placement.
         * @prop {Popper.placements} placement='bottom'
         */
        placement: 'bottom',

        /**
         * Set this to true if you want popper to position it self in 'fixed' mode
         * @prop {Boolean} positionFixed=false
         */
        positionFixed: false,

        /**
         * Whether events (resize, scroll) are initially enabled.
         * @prop {Boolean} eventsEnabled=true
         */
        eventsEnabled: true,

        /**
         * Set to true if you want to automatically remove the popper when
         * you call the `destroy` method.
         * @prop {Boolean} removeOnDestroy=false
         */
        removeOnDestroy: false,

        /**
         * Callback called when the popper is created.<br />
         * By default, it is set to no-op.<br />
         * Access Popper.js instance with `data.instance`.
         * @prop {onCreate}
         */
        onCreate: function onCreate () {
        },

        /**
         * Callback called when the popper is updated. This callback is not called
         * on the initialization/creation of the popper, but only on subsequent
         * updates.<br />
         * By default, it is set to no-op.<br />
         * Access Popper.js instance with `data.instance`.
         * @prop {onUpdate}
         */
        onUpdate: function onUpdate () {
        },

        /**
         * List of modifiers used to modify the offsets before they are applied to the popper.
         * They provide most of the functionalities of Popper.js.
         * @prop {modifiers}
         */
        modifiers: modifiers
      }

      /**
       * @callback onCreate
       * @param {dataObject} data
       */

      /**
       * @callback onUpdate
       * @param {dataObject} data
       */

// Utils
// Methods
      var Popper = function () {
        /**
         * Creates a new Popper.js instance.
         * @class Popper
         * @param {Element|referenceObject} reference - The reference element used to position the popper
         * @param {Element} popper - The HTML / XML element used as the popper
         * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
         * @return {Object} instance - The generated Popper.js instance
         */
        function Popper (reference, popper) {
          var _this = this

          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}
          classCallCheck(this, Popper)

          this.scheduleUpdate = function () {
            return requestAnimationFrame(_this.update)
          }

          // make update() debounced, so that it only runs at most once-per-tick
          this.update = debounce(this.update.bind(this))

          // with {} we create a new object with the options inside it
          this.options = _extends({}, Popper.Defaults, options)

          // init state
          this.state = {
            isDestroyed: false,
            isCreated: false,
            scrollParents: []
          }

          // get reference and popper elements (allow jQuery wrappers)
          this.reference = reference && reference.jquery ? reference[0] : reference
          this.popper = popper && popper.jquery ? popper[0] : popper

          // Deep merge modifiers options
          this.options.modifiers = {}
          Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
            _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {})
          })

          // Refactoring modifiers' list (Object => Array)
          this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
            return _extends({
              name: name
            }, _this.options.modifiers[name])
          })
            // sort the modifiers by order
            .sort(function (a, b) {
              return a.order - b.order
            })

          // modifiers have the ability to execute arbitrary code when Popper.js get inited
          // such code is executed in the same order of its modifier
          // they could add new properties to their options configuration
          // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
          this.modifiers.forEach(function (modifierOptions) {
            if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
              modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state)
            }
          })

          // fire the first update to position the popper in the right place
          this.update()

          var eventsEnabled = this.options.eventsEnabled
          if (eventsEnabled) {
            // setup event listeners, they will take care of update the position in specific situations
            this.enableEventListeners()
          }

          this.state.eventsEnabled = eventsEnabled
        }

        // We can't use class properties because they don't get listed in the
        // class prototype and break stuff like Sinon stubs


        createClass(Popper, [{
          key: 'update',
          value: function update$$1 () {
            return update.call(this)
          }
        }, {
          key: 'destroy',
          value: function destroy$$1 () {
            return destroy.call(this)
          }
        }, {
          key: 'enableEventListeners',
          value: function enableEventListeners$$1 () {
            return enableEventListeners.call(this)
          }
        }, {
          key: 'disableEventListeners',
          value: function disableEventListeners$$1 () {
            return disableEventListeners.call(this)
          }

          /**
           * Schedules an update. It will run on the next UI update available.
           * @method scheduleUpdate
           * @memberof Popper
           */


          /**
           * Collection of utilities useful when writing custom modifiers.
           * Starting from version 1.7, this method is available only if you
           * include `popper-utils.js` before `popper.js`.
           *
           * **DEPRECATION**: This way to access PopperUtils is deprecated
           * and will be removed in v2! Use the PopperUtils module directly instead.
           * Due to the high instability of the methods contained in Utils, we can't
           * guarantee them to follow semver. Use them at your own risk!
           * @static
           * @private
           * @type {Object}
           * @deprecated since version 1.8
           * @member Utils
           * @memberof Popper
           */

        }])
        return Popper
      }()

      /**
       * The `referenceObject` is an object that provides an interface compatible with Popper.js
       * and lets you use it as replacement of a real DOM node.<br />
       * You can use this method to position a popper relatively to a set of coordinates
       * in case you don't have a DOM node to use as reference.
       *
       * ```
       * new Popper(referenceObject, popperNode);
       * ```
       *
       * NB: This feature isn't supported in Internet Explorer 10.
       * @name referenceObject
       * @property {Function} data.getBoundingClientRect
       * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
       * @property {number} data.clientWidth
       * An ES6 getter that will return the width of the virtual reference element.
       * @property {number} data.clientHeight
       * An ES6 getter that will return the height of the virtual reference element.
       */


      Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils
      Popper.placements = placements
      Popper.Defaults = Defaults

      /* harmony default export */
      __webpack_exports__['default'] = (Popper)
//# sourceMappingURL=popper.js.map

      /* WEBPACK VAR INJECTION */
    }.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ './node_modules/webpack/buildin/global.js')))

    /***/
  }),

  /***/ './node_modules/stimulus/index.js':
  /*!****************************************!*\
  !*** ./node_modules/stimulus/index.js ***!
  \****************************************/
  /*! exports provided: Application, Context, Controller, defaultSchema */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony import */
    var _stimulus_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stimulus/core */ './node_modules/@stimulus/core/dist/index.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'Application', function () {
      return _stimulus_core__WEBPACK_IMPORTED_MODULE_0__['Application']
    })

    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'Context', function () {
      return _stimulus_core__WEBPACK_IMPORTED_MODULE_0__['Context']
    })

    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'Controller', function () {
      return _stimulus_core__WEBPACK_IMPORTED_MODULE_0__['Controller']
    })

    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'defaultSchema', function () {
      return _stimulus_core__WEBPACK_IMPORTED_MODULE_0__['defaultSchema']
    })


    /***/
  }),

  /***/ './node_modules/stimulus/webpack-helpers.js':
  /*!**************************************************!*\
  !*** ./node_modules/stimulus/webpack-helpers.js ***!
  \**************************************************/
  /*! exports provided: definitionsFromContext, identifierForContextKey */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {

    'use strict'
    __webpack_require__.r(__webpack_exports__)
    /* harmony import */
    var _stimulus_webpack_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stimulus/webpack-helpers */ './node_modules/@stimulus/webpack-helpers/dist/index.js')
    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'definitionsFromContext', function () {
      return _stimulus_webpack_helpers__WEBPACK_IMPORTED_MODULE_0__['definitionsFromContext']
    })

    /* harmony reexport (safe) */
    __webpack_require__.d(__webpack_exports__, 'identifierForContextKey', function () {
      return _stimulus_webpack_helpers__WEBPACK_IMPORTED_MODULE_0__['identifierForContextKey']
    })


    /***/
  })

}])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
